
Sensor Node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000258c  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08002720  08002720  00003720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002748  08002748  00004050  2**0
                  CONTENTS
  4 .ARM          00000000  08002748  08002748  00004050  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002748  08002748  00004050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002748  08002748  00003748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800274c  0800274c  0000374c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000050  20000000  08002750  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000054  20000050  080027a0  00004050  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  080027a0  000040a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004050  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009df6  00000000  00000000  00004080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fbb  00000000  00000000  0000de76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc0  00000000  00000000  0000fe38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a1b  00000000  00000000  00010bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003651  00000000  00000000  00011613  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aa8f  00000000  00000000  00014c64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004a0bc  00000000  00000000  0001f6f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000697af  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a1c  00000000  00000000  000697f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  0006d210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000050 	.word	0x20000050
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002708 	.word	0x08002708

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000054 	.word	0x20000054
 80001d0:	08002708 	.word	0x08002708

080001d4 <EXTI_Init>:
  * @retval None
  */
  

void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b085      	sub	sp, #20
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 80001dc:	2300      	movs	r3, #0
 80001de:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE_ALL(EXTI_InitStruct->EXTI_Line));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 80001e0:	4b7b      	ldr	r3, [pc, #492]	@ (80003d0 <EXTI_Init+0x1fc>)
 80001e2:	60fb      	str	r3, [r7, #12]
      
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	799b      	ldrb	r3, [r3, #6]
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	f000 80d2 	beq.w	8000392 <EXTI_Init+0x1be>
  {
    /* Clear EXTI line configuration */   
    *(__IO uint32_t *) (((uint32_t) &(EXTI->IMR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));   
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	095b      	lsrs	r3, r3, #5
 80001f4:	f103 7300 	add.w	r3, r3, #33554432	@ 0x2000000
 80001f8:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 80001fc:	015b      	lsls	r3, r3, #5
 80001fe:	6819      	ldr	r1, [r3, #0]
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	f003 031f 	and.w	r3, r3, #31
 8000208:	2201      	movs	r2, #1
 800020a:	fa02 f303 	lsl.w	r3, r2, r3
 800020e:	43da      	mvns	r2, r3
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	095b      	lsrs	r3, r3, #5
 8000216:	f103 7300 	add.w	r3, r3, #33554432	@ 0x2000000
 800021a:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800021e:	015b      	lsls	r3, r3, #5
 8000220:	4618      	mov	r0, r3
 8000222:	ea01 0302 	and.w	r3, r1, r2
 8000226:	6003      	str	r3, [r0, #0]
    *(__IO uint32_t *) (((uint32_t) &(EXTI->EMR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	095b      	lsrs	r3, r3, #5
 800022e:	015a      	lsls	r2, r3, #5
 8000230:	4b68      	ldr	r3, [pc, #416]	@ (80003d4 <EXTI_Init+0x200>)
 8000232:	4413      	add	r3, r2
 8000234:	6819      	ldr	r1, [r3, #0]
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	f003 031f 	and.w	r3, r3, #31
 800023e:	2201      	movs	r2, #1
 8000240:	fa02 f303 	lsl.w	r3, r2, r3
 8000244:	43da      	mvns	r2, r3
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	095b      	lsrs	r3, r3, #5
 800024c:	0158      	lsls	r0, r3, #5
 800024e:	4b61      	ldr	r3, [pc, #388]	@ (80003d4 <EXTI_Init+0x200>)
 8000250:	4403      	add	r3, r0
 8000252:	4618      	mov	r0, r3
 8000254:	ea01 0302 	and.w	r3, r1, r2
 8000258:	6003      	str	r3, [r0, #0]
     
    tmp += EXTI_InitStruct->EXTI_Mode + (((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20);
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	791b      	ldrb	r3, [r3, #4]
 800025e:	461a      	mov	r2, r3
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	095b      	lsrs	r3, r3, #5
 8000266:	015b      	lsls	r3, r3, #5
 8000268:	4413      	add	r3, r2
 800026a:	68fa      	ldr	r2, [r7, #12]
 800026c:	4413      	add	r3, r2
 800026e:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= (uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 8000270:	68fb      	ldr	r3, [r7, #12]
 8000272:	681a      	ldr	r2, [r3, #0]
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	f003 031f 	and.w	r3, r3, #31
 800027c:	2101      	movs	r1, #1
 800027e:	fa01 f303 	lsl.w	r3, r1, r3
 8000282:	4619      	mov	r1, r3
 8000284:	68fb      	ldr	r3, [r7, #12]
 8000286:	430a      	orrs	r2, r1
 8000288:	601a      	str	r2, [r3, #0]
    
    tmp = (uint32_t)EXTI_BASE;
 800028a:	4b51      	ldr	r3, [pc, #324]	@ (80003d0 <EXTI_Init+0x1fc>)
 800028c:	60fb      	str	r3, [r7, #12]

    /* Clear Rising Falling edge configuration */
    *(__IO uint32_t *) (((uint32_t) &(EXTI->RTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	095b      	lsrs	r3, r3, #5
 8000294:	015a      	lsls	r2, r3, #5
 8000296:	4b50      	ldr	r3, [pc, #320]	@ (80003d8 <EXTI_Init+0x204>)
 8000298:	4413      	add	r3, r2
 800029a:	6819      	ldr	r1, [r3, #0]
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	f003 031f 	and.w	r3, r3, #31
 80002a4:	2201      	movs	r2, #1
 80002a6:	fa02 f303 	lsl.w	r3, r2, r3
 80002aa:	43da      	mvns	r2, r3
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	095b      	lsrs	r3, r3, #5
 80002b2:	0158      	lsls	r0, r3, #5
 80002b4:	4b48      	ldr	r3, [pc, #288]	@ (80003d8 <EXTI_Init+0x204>)
 80002b6:	4403      	add	r3, r0
 80002b8:	4618      	mov	r0, r3
 80002ba:	ea01 0302 	and.w	r3, r1, r2
 80002be:	6003      	str	r3, [r0, #0]
    *(__IO uint32_t *) (((uint32_t) &(EXTI->FTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	095b      	lsrs	r3, r3, #5
 80002c6:	015a      	lsls	r2, r3, #5
 80002c8:	4b44      	ldr	r3, [pc, #272]	@ (80003dc <EXTI_Init+0x208>)
 80002ca:	4413      	add	r3, r2
 80002cc:	6819      	ldr	r1, [r3, #0]
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	f003 031f 	and.w	r3, r3, #31
 80002d6:	2201      	movs	r2, #1
 80002d8:	fa02 f303 	lsl.w	r3, r2, r3
 80002dc:	43da      	mvns	r2, r3
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	095b      	lsrs	r3, r3, #5
 80002e4:	0158      	lsls	r0, r3, #5
 80002e6:	4b3d      	ldr	r3, [pc, #244]	@ (80003dc <EXTI_Init+0x208>)
 80002e8:	4403      	add	r3, r0
 80002ea:	4618      	mov	r0, r3
 80002ec:	ea01 0302 	and.w	r3, r1, r2
 80002f0:	6003      	str	r3, [r0, #0]
    
      /* Select the trigger for the selected interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	795b      	ldrb	r3, [r3, #5]
 80002f6:	2b10      	cmp	r3, #16
 80002f8:	d132      	bne.n	8000360 <EXTI_Init+0x18c>
    {
      /* Rising Falling edge */
    *(__IO uint32_t *) (((uint32_t) &(EXTI->RTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) |= (uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	095b      	lsrs	r3, r3, #5
 8000300:	015a      	lsls	r2, r3, #5
 8000302:	4b35      	ldr	r3, [pc, #212]	@ (80003d8 <EXTI_Init+0x204>)
 8000304:	4413      	add	r3, r2
 8000306:	681a      	ldr	r2, [r3, #0]
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	f003 031f 	and.w	r3, r3, #31
 8000310:	2101      	movs	r1, #1
 8000312:	fa01 f303 	lsl.w	r3, r1, r3
 8000316:	4618      	mov	r0, r3
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	095b      	lsrs	r3, r3, #5
 800031e:	0159      	lsls	r1, r3, #5
 8000320:	4b2d      	ldr	r3, [pc, #180]	@ (80003d8 <EXTI_Init+0x204>)
 8000322:	440b      	add	r3, r1
 8000324:	4619      	mov	r1, r3
 8000326:	ea42 0300 	orr.w	r3, r2, r0
 800032a:	600b      	str	r3, [r1, #0]
    *(__IO uint32_t *) (((uint32_t) &(EXTI->FTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) |= (uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));      
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	095b      	lsrs	r3, r3, #5
 8000332:	015a      	lsls	r2, r3, #5
 8000334:	4b29      	ldr	r3, [pc, #164]	@ (80003dc <EXTI_Init+0x208>)
 8000336:	4413      	add	r3, r2
 8000338:	681a      	ldr	r2, [r3, #0]
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	f003 031f 	and.w	r3, r3, #31
 8000342:	2101      	movs	r1, #1
 8000344:	fa01 f303 	lsl.w	r3, r1, r3
 8000348:	4618      	mov	r0, r3
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	095b      	lsrs	r3, r3, #5
 8000350:	0159      	lsls	r1, r3, #5
 8000352:	4b22      	ldr	r3, [pc, #136]	@ (80003dc <EXTI_Init+0x208>)
 8000354:	440b      	add	r3, r1
 8000356:	4619      	mov	r1, r3
 8000358:	ea42 0300 	orr.w	r3, r2, r0
 800035c:	600b      	str	r3, [r1, #0]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
  }
         
}
 800035e:	e030      	b.n	80003c2 <EXTI_Init+0x1ee>
      tmp += EXTI_InitStruct->EXTI_Trigger + (((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20);
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	795b      	ldrb	r3, [r3, #5]
 8000364:	461a      	mov	r2, r3
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	095b      	lsrs	r3, r3, #5
 800036c:	015b      	lsls	r3, r3, #5
 800036e:	4413      	add	r3, r2
 8000370:	68fa      	ldr	r2, [r7, #12]
 8000372:	4413      	add	r3, r2
 8000374:	60fb      	str	r3, [r7, #12]
      *(__IO uint32_t *) tmp |= (uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	681a      	ldr	r2, [r3, #0]
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	f003 031f 	and.w	r3, r3, #31
 8000382:	2101      	movs	r1, #1
 8000384:	fa01 f303 	lsl.w	r3, r1, r3
 8000388:	4619      	mov	r1, r3
 800038a:	68fb      	ldr	r3, [r7, #12]
 800038c:	430a      	orrs	r2, r1
 800038e:	601a      	str	r2, [r3, #0]
}
 8000390:	e017      	b.n	80003c2 <EXTI_Init+0x1ee>
    tmp += EXTI_InitStruct->EXTI_Mode + (((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20);
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	791b      	ldrb	r3, [r3, #4]
 8000396:	461a      	mov	r2, r3
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	095b      	lsrs	r3, r3, #5
 800039e:	015b      	lsls	r3, r3, #5
 80003a0:	4413      	add	r3, r2
 80003a2:	68fa      	ldr	r2, [r7, #12]
 80003a4:	4413      	add	r3, r2
 80003a6:	60fb      	str	r3, [r7, #12]
    *(__IO uint32_t *) tmp &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 80003a8:	68fb      	ldr	r3, [r7, #12]
 80003aa:	6819      	ldr	r1, [r3, #0]
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	f003 031f 	and.w	r3, r3, #31
 80003b4:	2201      	movs	r2, #1
 80003b6:	fa02 f303 	lsl.w	r3, r2, r3
 80003ba:	43da      	mvns	r2, r3
 80003bc:	68fb      	ldr	r3, [r7, #12]
 80003be:	400a      	ands	r2, r1
 80003c0:	601a      	str	r2, [r3, #0]
}
 80003c2:	bf00      	nop
 80003c4:	3714      	adds	r7, #20
 80003c6:	46bd      	mov	sp, r7
 80003c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop
 80003d0:	40010400 	.word	0x40010400
 80003d4:	40010404 	.word	0x40010404
 80003d8:	40010408 	.word	0x40010408
 80003dc:	4001040c 	.word	0x4001040c

080003e0 <GPIO_Init>:
  *         GPIO_Pin_0->GPIO_Pin_2, GPIO_Pin_4, GPIO_Pin_6, GPIO_Pin_9 
  *                       and GPIO_Pin_10 for GPIOF.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{ 
 80003e0:	b480      	push	{r7}
 80003e2:	b087      	sub	sp, #28
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
 80003e8:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80003ea:	2300      	movs	r3, #0
 80003ec:	617b      	str	r3, [r7, #20]
 80003ee:	2300      	movs	r3, #0
 80003f0:	613b      	str	r3, [r7, #16]
 80003f2:	2300      	movs	r3, #0
 80003f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80003f6:	2300      	movs	r3, #0
 80003f8:	617b      	str	r3, [r7, #20]
 80003fa:	e07c      	b.n	80004f6 <GPIO_Init+0x116>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80003fc:	2201      	movs	r2, #1
 80003fe:	697b      	ldr	r3, [r7, #20]
 8000400:	fa02 f303 	lsl.w	r3, r2, r3
 8000404:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000406:	683b      	ldr	r3, [r7, #0]
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	693a      	ldr	r2, [r7, #16]
 800040c:	4013      	ands	r3, r2
 800040e:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000410:	68fa      	ldr	r2, [r7, #12]
 8000412:	693b      	ldr	r3, [r7, #16]
 8000414:	429a      	cmp	r2, r3
 8000416:	d16b      	bne.n	80004f0 <GPIO_Init+0x110>
    {
      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000418:	683b      	ldr	r3, [r7, #0]
 800041a:	791b      	ldrb	r3, [r3, #4]
 800041c:	2b01      	cmp	r3, #1
 800041e:	d003      	beq.n	8000428 <GPIO_Init+0x48>
 8000420:	683b      	ldr	r3, [r7, #0]
 8000422:	791b      	ldrb	r3, [r3, #4]
 8000424:	2b02      	cmp	r3, #2
 8000426:	d134      	bne.n	8000492 <GPIO_Init+0xb2>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	689a      	ldr	r2, [r3, #8]
 800042c:	697b      	ldr	r3, [r7, #20]
 800042e:	005b      	lsls	r3, r3, #1
 8000430:	2103      	movs	r1, #3
 8000432:	fa01 f303 	lsl.w	r3, r1, r3
 8000436:	43db      	mvns	r3, r3
 8000438:	401a      	ands	r2, r3
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	689a      	ldr	r2, [r3, #8]
 8000442:	683b      	ldr	r3, [r7, #0]
 8000444:	795b      	ldrb	r3, [r3, #5]
 8000446:	4619      	mov	r1, r3
 8000448:	697b      	ldr	r3, [r7, #20]
 800044a:	005b      	lsls	r3, r3, #1
 800044c:	fa01 f303 	lsl.w	r3, r1, r3
 8000450:	431a      	orrs	r2, r3
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	889b      	ldrh	r3, [r3, #4]
 800045a:	b29a      	uxth	r2, r3
 800045c:	697b      	ldr	r3, [r7, #20]
 800045e:	b29b      	uxth	r3, r3
 8000460:	4619      	mov	r1, r3
 8000462:	2301      	movs	r3, #1
 8000464:	408b      	lsls	r3, r1
 8000466:	b29b      	uxth	r3, r3
 8000468:	43db      	mvns	r3, r3
 800046a:	b29b      	uxth	r3, r3
 800046c:	4013      	ands	r3, r2
 800046e:	b29a      	uxth	r2, r3
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	889b      	ldrh	r3, [r3, #4]
 8000478:	b29a      	uxth	r2, r3
 800047a:	683b      	ldr	r3, [r7, #0]
 800047c:	799b      	ldrb	r3, [r3, #6]
 800047e:	4619      	mov	r1, r3
 8000480:	697b      	ldr	r3, [r7, #20]
 8000482:	b29b      	uxth	r3, r3
 8000484:	fa01 f303 	lsl.w	r3, r1, r3
 8000488:	b29b      	uxth	r3, r3
 800048a:	4313      	orrs	r3, r2
 800048c:	b29a      	uxth	r2, r3
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	809a      	strh	r2, [r3, #4]
      }
      
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	681a      	ldr	r2, [r3, #0]
 8000496:	697b      	ldr	r3, [r7, #20]
 8000498:	005b      	lsls	r3, r3, #1
 800049a:	2103      	movs	r1, #3
 800049c:	fa01 f303 	lsl.w	r3, r1, r3
 80004a0:	43db      	mvns	r3, r3
 80004a2:	401a      	ands	r2, r3
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	681a      	ldr	r2, [r3, #0]
 80004ac:	683b      	ldr	r3, [r7, #0]
 80004ae:	791b      	ldrb	r3, [r3, #4]
 80004b0:	4619      	mov	r1, r3
 80004b2:	697b      	ldr	r3, [r7, #20]
 80004b4:	005b      	lsls	r3, r3, #1
 80004b6:	fa01 f303 	lsl.w	r3, r1, r3
 80004ba:	431a      	orrs	r2, r3
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	601a      	str	r2, [r3, #0]

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	68da      	ldr	r2, [r3, #12]
 80004c4:	697b      	ldr	r3, [r7, #20]
 80004c6:	b29b      	uxth	r3, r3
 80004c8:	005b      	lsls	r3, r3, #1
 80004ca:	2103      	movs	r1, #3
 80004cc:	fa01 f303 	lsl.w	r3, r1, r3
 80004d0:	43db      	mvns	r3, r3
 80004d2:	401a      	ands	r2, r3
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	68da      	ldr	r2, [r3, #12]
 80004dc:	683b      	ldr	r3, [r7, #0]
 80004de:	79db      	ldrb	r3, [r3, #7]
 80004e0:	4619      	mov	r1, r3
 80004e2:	697b      	ldr	r3, [r7, #20]
 80004e4:	005b      	lsls	r3, r3, #1
 80004e6:	fa01 f303 	lsl.w	r3, r1, r3
 80004ea:	431a      	orrs	r2, r3
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80004f0:	697b      	ldr	r3, [r7, #20]
 80004f2:	3301      	adds	r3, #1
 80004f4:	617b      	str	r3, [r7, #20]
 80004f6:	697b      	ldr	r3, [r7, #20]
 80004f8:	2b0f      	cmp	r3, #15
 80004fa:	f67f af7f 	bls.w	80003fc <GPIO_Init+0x1c>
    }
  }
}
 80004fe:	bf00      	nop
 8000500:	bf00      	nop
 8000502:	371c      	adds	r7, #28
 8000504:	46bd      	mov	sp, r7
 8000506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050a:	4770      	bx	lr

0800050c <GPIO_PinAFConfig>:
  *        for the detailed mapping of the system and peripherals alternate 
  *        function I/O pins.
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 800050c:	b480      	push	{r7}
 800050e:	b085      	sub	sp, #20
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
 8000514:	460b      	mov	r3, r1
 8000516:	807b      	strh	r3, [r7, #2]
 8000518:	4613      	mov	r3, r2
 800051a:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 800051c:	2300      	movs	r3, #0
 800051e:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000520:	2300      	movs	r3, #0
 8000522:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 8000524:	787a      	ldrb	r2, [r7, #1]
 8000526:	887b      	ldrh	r3, [r7, #2]
 8000528:	f003 0307 	and.w	r3, r3, #7
 800052c:	009b      	lsls	r3, r3, #2
 800052e:	fa02 f303 	lsl.w	r3, r2, r3
 8000532:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 8000534:	887b      	ldrh	r3, [r7, #2]
 8000536:	08db      	lsrs	r3, r3, #3
 8000538:	b29b      	uxth	r3, r3
 800053a:	461a      	mov	r2, r3
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	3208      	adds	r2, #8
 8000540:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000544:	887b      	ldrh	r3, [r7, #2]
 8000546:	f003 0307 	and.w	r3, r3, #7
 800054a:	009b      	lsls	r3, r3, #2
 800054c:	210f      	movs	r1, #15
 800054e:	fa01 f303 	lsl.w	r3, r1, r3
 8000552:	43db      	mvns	r3, r3
 8000554:	8879      	ldrh	r1, [r7, #2]
 8000556:	08c9      	lsrs	r1, r1, #3
 8000558:	b289      	uxth	r1, r1
 800055a:	4608      	mov	r0, r1
 800055c:	ea02 0103 	and.w	r1, r2, r3
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	f100 0208 	add.w	r2, r0, #8
 8000566:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800056a:	887b      	ldrh	r3, [r7, #2]
 800056c:	08db      	lsrs	r3, r3, #3
 800056e:	b29b      	uxth	r3, r3
 8000570:	461a      	mov	r2, r3
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	3208      	adds	r2, #8
 8000576:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800057a:	68fa      	ldr	r2, [r7, #12]
 800057c:	4313      	orrs	r3, r2
 800057e:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000580:	887b      	ldrh	r3, [r7, #2]
 8000582:	08db      	lsrs	r3, r3, #3
 8000584:	b29b      	uxth	r3, r3
 8000586:	461a      	mov	r2, r3
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	3208      	adds	r2, #8
 800058c:	68b9      	ldr	r1, [r7, #8]
 800058e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000592:	bf00      	nop
 8000594:	3714      	adds	r7, #20
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
	...

080005a0 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that
  *         contains the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b085      	sub	sp, #20
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
 80005a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80005aa:	2300      	movs	r3, #0
 80005ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_I2C_OWN_ADDRESS1(I2C_InitStruct->I2C_OwnAddress1));
  assert_param(IS_I2C_ACK(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

  /* Disable I2Cx Peripheral */
  I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_PE);
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	f023 0201 	bic.w	r2, r3, #1
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx FILTERS Configuration ------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	60fb      	str	r3, [r7, #12]
  /* Clear I2Cx CR1 register */
  tmpreg &= CR1_CLEAR_MASK;
 80005c0:	68fa      	ldr	r2, [r7, #12]
 80005c2:	4b29      	ldr	r3, [pc, #164]	@ (8000668 <I2C_Init+0xc8>)
 80005c4:	4013      	ands	r3, r2
 80005c6:	60fb      	str	r3, [r7, #12]
  /* Configure I2Cx: analog and digital filter */
  /* Set ANFOFF bit according to I2C_AnalogFilter value */
  /* Set DFN bits according to I2C_DigitalFilter value */
  tmpreg |= (uint32_t)I2C_InitStruct->I2C_AnalogFilter |(I2C_InitStruct->I2C_DigitalFilter << 8);
 80005c8:	683b      	ldr	r3, [r7, #0]
 80005ca:	685a      	ldr	r2, [r3, #4]
 80005cc:	683b      	ldr	r3, [r7, #0]
 80005ce:	689b      	ldr	r3, [r3, #8]
 80005d0:	021b      	lsls	r3, r3, #8
 80005d2:	4313      	orrs	r3, r2
 80005d4:	68fa      	ldr	r2, [r7, #12]
 80005d6:	4313      	orrs	r3, r2
 80005d8:	60fb      	str	r3, [r7, #12]
  
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	68fa      	ldr	r2, [r7, #12]
 80005de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMING Configuration -------------------*/
  /* Configure I2Cx: Timing */
  /* Set TIMINGR bits according to I2C_Timing */
  /* Write to I2Cx TIMING */
  I2Cx->TIMINGR = I2C_InitStruct->I2C_Timing & TIMING_CLEAR_MASK;
 80005e0:	683b      	ldr	r3, [r7, #0]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	611a      	str	r2, [r3, #16]

  /* Enable I2Cx Peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f043 0201 	orr.w	r2, r3, #1
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Clear tmpreg local variable */
  tmpreg = 0;
 80005f8:	2300      	movs	r3, #0
 80005fa:	60fb      	str	r3, [r7, #12]
  /* Clear OAR1 register */
  I2Cx->OAR1 = (uint32_t)tmpreg;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	68fa      	ldr	r2, [r7, #12]
 8000600:	609a      	str	r2, [r3, #8]
  /* Clear OAR2 register */
  I2Cx->OAR2 = (uint32_t)tmpreg;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	68fa      	ldr	r2, [r7, #12]
 8000606:	60da      	str	r2, [r3, #12]
  /* Configure I2Cx: Own Address1 and acknowledged address */
  /* Set OA1MODE bit according to I2C_AcknowledgedAddress value */
  /* Set OA1 bits according to I2C_OwnAddress1 value */
  tmpreg = (uint32_t)((uint32_t)I2C_InitStruct->I2C_AcknowledgedAddress | \
 8000608:	683b      	ldr	r3, [r7, #0]
 800060a:	699a      	ldr	r2, [r3, #24]
                      (uint32_t)I2C_InitStruct->I2C_OwnAddress1);
 800060c:	683b      	ldr	r3, [r7, #0]
 800060e:	691b      	ldr	r3, [r3, #16]
  tmpreg = (uint32_t)((uint32_t)I2C_InitStruct->I2C_AcknowledgedAddress | \
 8000610:	4313      	orrs	r3, r2
 8000612:	60fb      	str	r3, [r7, #12]
  /* Write to I2Cx OAR1 */
  I2Cx->OAR1 = tmpreg;
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	68fa      	ldr	r2, [r7, #12]
 8000618:	609a      	str	r2, [r3, #8]
  /* Enable Own Address1 acknowledgement */
  I2Cx->OAR1 |= I2C_OAR1_OA1EN;
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	689b      	ldr	r3, [r3, #8]
 800061e:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx MODE Configuration ---------------------*/
  /* Configure I2Cx: mode */
  /* Set SMBDEN and SMBHEN bits according to I2C_Mode value */
  tmpreg = I2C_InitStruct->I2C_Mode;
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	68db      	ldr	r3, [r3, #12]
 800062a:	60fb      	str	r3, [r7, #12]
  /* Write to I2Cx CR1 */
  I2Cx->CR1 |= tmpreg;
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681a      	ldr	r2, [r3, #0]
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	431a      	orrs	r2, r3
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx ACK Configuration ----------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	685b      	ldr	r3, [r3, #4]
 800063c:	60fb      	str	r3, [r7, #12]
  /* Clear I2Cx CR2 register */
  tmpreg &= CR2_CLEAR_MASK;
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8000644:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000648:	60fb      	str	r3, [r7, #12]
  /* Configure I2Cx: acknowledgement */
  /* Set NACK bit according to I2C_Ack value */
  tmpreg |= I2C_InitStruct->I2C_Ack;
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	695b      	ldr	r3, [r3, #20]
 800064e:	68fa      	ldr	r2, [r7, #12]
 8000650:	4313      	orrs	r3, r2
 8000652:	60fb      	str	r3, [r7, #12]
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	68fa      	ldr	r2, [r7, #12]
 8000658:	605a      	str	r2, [r3, #4]
}
 800065a:	bf00      	nop
 800065c:	3714      	adds	r7, #20
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	00cfe0ff 	.word	0x00cfe0ff

0800066c <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800066c:	b480      	push	{r7}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
 8000674:	460b      	mov	r3, r1
 8000676:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000678:	78fb      	ldrb	r3, [r7, #3]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d006      	beq.n	800068c <I2C_Cmd+0x20>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	f043 0201 	orr.w	r2, r3, #1
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_PE);
  }
}
 800068a:	e005      	b.n	8000698 <I2C_Cmd+0x2c>
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_PE);
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	f023 0201 	bic.w	r2, r3, #1
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	601a      	str	r2, [r3, #0]
}
 8000698:	bf00      	nop
 800069a:	370c      	adds	r7, #12
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr

080006a4 <I2C_TransferHandling>:
  *     @arg I2C_Generate_Start_Read: Generate Restart for read request.
  *     @arg I2C_Generate_Start_Write: Generate Restart for write request.
  * @retval None
  */
void I2C_TransferHandling(I2C_TypeDef* I2Cx, uint16_t Address, uint8_t Number_Bytes, uint32_t ReloadEndMode, uint32_t StartStopMode)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b087      	sub	sp, #28
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	60f8      	str	r0, [r7, #12]
 80006ac:	607b      	str	r3, [r7, #4]
 80006ae:	460b      	mov	r3, r1
 80006b0:	817b      	strh	r3, [r7, #10]
 80006b2:	4613      	mov	r3, r2
 80006b4:	727b      	strb	r3, [r7, #9]
  uint32_t tmpreg = 0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_I2C_SLAVE_ADDRESS(Address));  
  assert_param(IS_RELOAD_END_MODE(ReloadEndMode));
  assert_param(IS_START_STOP_MODE(StartStopMode));
    
  /* Get the CR2 register value */
  tmpreg = I2Cx->CR2;
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	685b      	ldr	r3, [r3, #4]
 80006be:	617b      	str	r3, [r7, #20]
  
  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 80006c0:	697a      	ldr	r2, [r7, #20]
 80006c2:	4b0d      	ldr	r3, [pc, #52]	@ (80006f8 <I2C_TransferHandling+0x54>)
 80006c4:	4013      	ands	r3, r2
 80006c6:	617b      	str	r3, [r7, #20]
  
  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)Address & I2C_CR2_SADD) | (((uint32_t)Number_Bytes << 16 ) & I2C_CR2_NBYTES) | \
 80006c8:	897b      	ldrh	r3, [r7, #10]
 80006ca:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80006ce:	7a7b      	ldrb	r3, [r7, #9]
 80006d0:	041b      	lsls	r3, r3, #16
 80006d2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80006d6:	431a      	orrs	r2, r3
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	431a      	orrs	r2, r3
 80006dc:	6a3b      	ldr	r3, [r7, #32]
 80006de:	4313      	orrs	r3, r2
 80006e0:	697a      	ldr	r2, [r7, #20]
 80006e2:	4313      	orrs	r3, r2
 80006e4:	617b      	str	r3, [r7, #20]
            (uint32_t)ReloadEndMode | (uint32_t)StartStopMode);
  
  /* update CR2 register */
  I2Cx->CR2 = tmpreg;  
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	697a      	ldr	r2, [r7, #20]
 80006ea:	605a      	str	r2, [r3, #4]
}  
 80006ec:	bf00      	nop
 80006ee:	371c      	adds	r7, #28
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr
 80006f8:	fc009800 	.word	0xfc009800

080006fc <I2C_SendData>:
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
 8000704:	460b      	mov	r3, r1
 8000706:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  
  /* Write in the DR register the data to be sent */
  I2Cx->TXDR = (uint8_t)Data;
 8000708:	78fa      	ldrb	r2, [r7, #3]
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800070e:	bf00      	nop
 8000710:	370c      	adds	r7, #12
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr

0800071a <I2C_ReceiveData>:
  * @brief  Returns the most recent received data by the I2Cx peripheral.
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @retval The value of the received data.
  */
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
 800071a:	b480      	push	{r7}
 800071c:	b083      	sub	sp, #12
 800071e:	af00      	add	r7, sp, #0
 8000720:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->RXDR;
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000726:	b2db      	uxtb	r3, r3
}  
 8000728:	4618      	mov	r0, r3
 800072a:	370c      	adds	r7, #12
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr

08000734 <I2C_GetFlagStatus>:
  *     @arg I2C_FLAG_ALERT: SMBus Alert
  *     @arg I2C_FLAG_BUSY: Bus busy
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8000734:	b480      	push	{r7}
 8000736:	b085      	sub	sp, #20
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
 800073c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800073e:	2300      	movs	r3, #0
 8000740:	60bb      	str	r3, [r7, #8]
  FlagStatus bitstatus = RESET;
 8000742:	2300      	movs	r3, #0
 8000744:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));
  
  /* Get the ISR register value */
  tmpreg = I2Cx->ISR;
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	699b      	ldr	r3, [r3, #24]
 800074a:	60bb      	str	r3, [r7, #8]
  
  /* Get flag status */
  tmpreg &= I2C_FLAG;
 800074c:	68ba      	ldr	r2, [r7, #8]
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	4013      	ands	r3, r2
 8000752:	60bb      	str	r3, [r7, #8]
  
  if(tmpreg != 0)
 8000754:	68bb      	ldr	r3, [r7, #8]
 8000756:	2b00      	cmp	r3, #0
 8000758:	d002      	beq.n	8000760 <I2C_GetFlagStatus+0x2c>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 800075a:	2301      	movs	r3, #1
 800075c:	73fb      	strb	r3, [r7, #15]
 800075e:	e001      	b.n	8000764 <I2C_GetFlagStatus+0x30>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 8000760:	2300      	movs	r3, #0
 8000762:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000764:	7bfb      	ldrb	r3, [r7, #15]
}  
 8000766:	4618      	mov	r0, r3
 8000768:	3714      	adds	r7, #20
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr

08000772 <I2C_ClearFlag>:
  *     @arg I2C_FLAG_TIMEOUT: Timeout or Tlow detection flag
  *     @arg I2C_FLAG_ALERT: SMBus Alert
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
void I2C_ClearFlag(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{ 
 8000772:	b480      	push	{r7}
 8000774:	b083      	sub	sp, #12
 8000776:	af00      	add	r7, sp, #0
 8000778:	6078      	str	r0, [r7, #4]
 800077a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));

  /* Clear the selected flag */
  I2Cx->ICR = I2C_FLAG;
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	683a      	ldr	r2, [r7, #0]
 8000780:	61da      	str	r2, [r3, #28]
  }
 8000782:	bf00      	nop
 8000784:	370c      	adds	r7, #12
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr

0800078e <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800078e:	b480      	push	{r7}
 8000790:	af00      	add	r7, sp, #0
}
 8000792:	bf00      	nop
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr

0800079c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80007a0:	bf00      	nop
 80007a2:	e7fd      	b.n	80007a0 <HardFault_Handler+0x4>

080007a4 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80007a8:	bf00      	nop
 80007aa:	e7fd      	b.n	80007a8 <MemManage_Handler+0x4>

080007ac <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80007b0:	bf00      	nop
 80007b2:	e7fd      	b.n	80007b0 <BusFault_Handler+0x4>

080007b4 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80007b8:	bf00      	nop
 80007ba:	e7fd      	b.n	80007b8 <UsageFault_Handler+0x4>

080007bc <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
}
 80007c0:	bf00      	nop
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr

080007ca <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80007ca:	b480      	push	{r7}
 80007cc:	af00      	add	r7, sp, #0
}
 80007ce:	bf00      	nop
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr

080007d8 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
}
 80007dc:	bf00      	nop
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr
	...

080007e8 <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b08b      	sub	sp, #44	@ 0x2c
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 80007f0:	2300      	movs	r3, #0
 80007f2:	623b      	str	r3, [r7, #32]
 80007f4:	2300      	movs	r3, #0
 80007f6:	61fb      	str	r3, [r7, #28]
 80007f8:	2300      	movs	r3, #0
 80007fa:	61bb      	str	r3, [r7, #24]
 80007fc:	2300      	movs	r3, #0
 80007fe:	617b      	str	r3, [r7, #20]
 8000800:	2300      	movs	r3, #0
 8000802:	613b      	str	r3, [r7, #16]
 8000804:	2300      	movs	r3, #0
 8000806:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t apb2presc = 0, ahbpresc = 0;
 8000808:	2300      	movs	r3, #0
 800080a:	60fb      	str	r3, [r7, #12]
 800080c:	2300      	movs	r3, #0
 800080e:	60bb      	str	r3, [r7, #8]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000810:	4b8b      	ldr	r3, [pc, #556]	@ (8000a40 <RCC_GetClocksFreq+0x258>)
 8000812:	685b      	ldr	r3, [r3, #4]
 8000814:	f003 030c 	and.w	r3, r3, #12
 8000818:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 800081a:	6a3b      	ldr	r3, [r7, #32]
 800081c:	2b08      	cmp	r3, #8
 800081e:	d011      	beq.n	8000844 <RCC_GetClocksFreq+0x5c>
 8000820:	6a3b      	ldr	r3, [r7, #32]
 8000822:	2b08      	cmp	r3, #8
 8000824:	d837      	bhi.n	8000896 <RCC_GetClocksFreq+0xae>
 8000826:	6a3b      	ldr	r3, [r7, #32]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d003      	beq.n	8000834 <RCC_GetClocksFreq+0x4c>
 800082c:	6a3b      	ldr	r3, [r7, #32]
 800082e:	2b04      	cmp	r3, #4
 8000830:	d004      	beq.n	800083c <RCC_GetClocksFreq+0x54>
 8000832:	e030      	b.n	8000896 <RCC_GetClocksFreq+0xae>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	4a83      	ldr	r2, [pc, #524]	@ (8000a44 <RCC_GetClocksFreq+0x25c>)
 8000838:	601a      	str	r2, [r3, #0]
      break;
 800083a:	e030      	b.n	800089e <RCC_GetClocksFreq+0xb6>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	4a81      	ldr	r2, [pc, #516]	@ (8000a44 <RCC_GetClocksFreq+0x25c>)
 8000840:	601a      	str	r2, [r3, #0]
      break;
 8000842:	e02c      	b.n	800089e <RCC_GetClocksFreq+0xb6>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8000844:	4b7e      	ldr	r3, [pc, #504]	@ (8000a40 <RCC_GetClocksFreq+0x258>)
 8000846:	685b      	ldr	r3, [r3, #4]
 8000848:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 800084c:	61fb      	str	r3, [r7, #28]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 800084e:	4b7c      	ldr	r3, [pc, #496]	@ (8000a40 <RCC_GetClocksFreq+0x258>)
 8000850:	685b      	ldr	r3, [r3, #4]
 8000852:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000856:	61bb      	str	r3, [r7, #24]
      pllmull = ( pllmull >> 18) + 2;
 8000858:	69fb      	ldr	r3, [r7, #28]
 800085a:	0c9b      	lsrs	r3, r3, #18
 800085c:	3302      	adds	r3, #2
 800085e:	61fb      	str	r3, [r7, #28]
      
      if (pllsource == 0x00)
 8000860:	69bb      	ldr	r3, [r7, #24]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d105      	bne.n	8000872 <RCC_GetClocksFreq+0x8a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
 8000866:	69fb      	ldr	r3, [r7, #28]
 8000868:	4a77      	ldr	r2, [pc, #476]	@ (8000a48 <RCC_GetClocksFreq+0x260>)
 800086a:	fb02 f303 	mul.w	r3, r2, r3
 800086e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000870:	e00d      	b.n	800088e <RCC_GetClocksFreq+0xa6>
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 8000872:	4b73      	ldr	r3, [pc, #460]	@ (8000a40 <RCC_GetClocksFreq+0x258>)
 8000874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000876:	f003 030f 	and.w	r3, r3, #15
 800087a:	3301      	adds	r3, #1
 800087c:	617b      	str	r3, [r7, #20]
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 800087e:	4a71      	ldr	r2, [pc, #452]	@ (8000a44 <RCC_GetClocksFreq+0x25c>)
 8000880:	697b      	ldr	r3, [r7, #20]
 8000882:	fbb2 f2f3 	udiv	r2, r2, r3
 8000886:	69fb      	ldr	r3, [r7, #28]
 8000888:	fb02 f303 	mul.w	r3, r2, r3
 800088c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      RCC_Clocks->SYSCLK_Frequency = pllclk;      
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000892:	601a      	str	r2, [r3, #0]
      break;
 8000894:	e003      	b.n	800089e <RCC_GetClocksFreq+0xb6>
    default: /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	4a6a      	ldr	r2, [pc, #424]	@ (8000a44 <RCC_GetClocksFreq+0x25c>)
 800089a:	601a      	str	r2, [r3, #0]
      break;
 800089c:	bf00      	nop
  }
    /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 800089e:	4b68      	ldr	r3, [pc, #416]	@ (8000a40 <RCC_GetClocksFreq+0x258>)
 80008a0:	685b      	ldr	r3, [r3, #4]
 80008a2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80008a6:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 80008a8:	6a3b      	ldr	r3, [r7, #32]
 80008aa:	091b      	lsrs	r3, r3, #4
 80008ac:	623b      	str	r3, [r7, #32]
  ahbpresc = APBAHBPrescTable[tmp]; 
 80008ae:	4a67      	ldr	r2, [pc, #412]	@ (8000a4c <RCC_GetClocksFreq+0x264>)
 80008b0:	6a3b      	ldr	r3, [r7, #32]
 80008b2:	4413      	add	r3, r2
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	b2db      	uxtb	r3, r3
 80008b8:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> ahbpresc;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681a      	ldr	r2, [r3, #0]
 80008be:	68bb      	ldr	r3, [r7, #8]
 80008c0:	40da      	lsrs	r2, r3
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80008c6:	4b5e      	ldr	r3, [pc, #376]	@ (8000a40 <RCC_GetClocksFreq+0x258>)
 80008c8:	685b      	ldr	r3, [r3, #4]
 80008ca:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80008ce:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 8;
 80008d0:	6a3b      	ldr	r3, [r7, #32]
 80008d2:	0a1b      	lsrs	r3, r3, #8
 80008d4:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 80008d6:	4a5d      	ldr	r2, [pc, #372]	@ (8000a4c <RCC_GetClocksFreq+0x264>)
 80008d8:	6a3b      	ldr	r3, [r7, #32]
 80008da:	4413      	add	r3, r2
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	613b      	str	r3, [r7, #16]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	685a      	ldr	r2, [r3, #4]
 80008e6:	693b      	ldr	r3, [r7, #16]
 80008e8:	40da      	lsrs	r2, r3
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	609a      	str	r2, [r3, #8]
  
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 80008ee:	4b54      	ldr	r3, [pc, #336]	@ (8000a40 <RCC_GetClocksFreq+0x258>)
 80008f0:	685b      	ldr	r3, [r3, #4]
 80008f2:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80008f6:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 11;
 80008f8:	6a3b      	ldr	r3, [r7, #32]
 80008fa:	0adb      	lsrs	r3, r3, #11
 80008fc:	623b      	str	r3, [r7, #32]
  apb2presc = APBAHBPrescTable[tmp];
 80008fe:	4a53      	ldr	r2, [pc, #332]	@ (8000a4c <RCC_GetClocksFreq+0x264>)
 8000900:	6a3b      	ldr	r3, [r7, #32]
 8000902:	4413      	add	r3, r2
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	b2db      	uxtb	r3, r3
 8000908:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> apb2presc;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	685a      	ldr	r2, [r3, #4]
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	40da      	lsrs	r2, r3
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	60da      	str	r2, [r3, #12]
  
  /* Get ADC12CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE12;
 8000916:	4b4a      	ldr	r3, [pc, #296]	@ (8000a40 <RCC_GetClocksFreq+0x258>)
 8000918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800091a:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800091e:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8000920:	6a3b      	ldr	r3, [r7, #32]
 8000922:	091b      	lsrs	r3, r3, #4
 8000924:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 8000926:	4a4a      	ldr	r2, [pc, #296]	@ (8000a50 <RCC_GetClocksFreq+0x268>)
 8000928:	6a3b      	ldr	r3, [r7, #32]
 800092a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800092e:	b29b      	uxth	r3, r3
 8000930:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 8000932:	693b      	ldr	r3, [r7, #16]
 8000934:	f003 0310 	and.w	r3, r3, #16
 8000938:	2b00      	cmp	r3, #0
 800093a:	d006      	beq.n	800094a <RCC_GetClocksFreq+0x162>
  {
     /* ADC12CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC12CLK_Frequency = pllclk / presc;
 800093c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800093e:	693b      	ldr	r3, [r7, #16]
 8000940:	fbb2 f2f3 	udiv	r2, r2, r3
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	611a      	str	r2, [r3, #16]
 8000948:	e003      	b.n	8000952 <RCC_GetClocksFreq+0x16a>
  }
  else
  {
   /* ADC12CLK clock frequency is AHB clock */
     RCC_Clocks->ADC12CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681a      	ldr	r2, [r3, #0]
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	611a      	str	r2, [r3, #16]
  }
  
  /* Get ADC34CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE34;
 8000952:	4b3b      	ldr	r3, [pc, #236]	@ (8000a40 <RCC_GetClocksFreq+0x258>)
 8000954:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000956:	f403 5378 	and.w	r3, r3, #15872	@ 0x3e00
 800095a:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 9;
 800095c:	6a3b      	ldr	r3, [r7, #32]
 800095e:	0a5b      	lsrs	r3, r3, #9
 8000960:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 8000962:	4a3b      	ldr	r2, [pc, #236]	@ (8000a50 <RCC_GetClocksFreq+0x268>)
 8000964:	6a3b      	ldr	r3, [r7, #32]
 8000966:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800096a:	b29b      	uxth	r3, r3
 800096c:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 800096e:	693b      	ldr	r3, [r7, #16]
 8000970:	f003 0310 	and.w	r3, r3, #16
 8000974:	2b00      	cmp	r3, #0
 8000976:	d006      	beq.n	8000986 <RCC_GetClocksFreq+0x19e>
  {
     /* ADC34CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC34CLK_Frequency = pllclk / presc;
 8000978:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800097a:	693b      	ldr	r3, [r7, #16]
 800097c:	fbb2 f2f3 	udiv	r2, r2, r3
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	615a      	str	r2, [r3, #20]
 8000984:	e003      	b.n	800098e <RCC_GetClocksFreq+0x1a6>
  }
  else
  {
   /* ADC34CLK clock frequency is AHB clock */
     RCC_Clocks->ADC34CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681a      	ldr	r2, [r3, #0]
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	615a      	str	r2, [r3, #20]
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 800098e:	4b2c      	ldr	r3, [pc, #176]	@ (8000a40 <RCC_GetClocksFreq+0x258>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000992:	f003 0310 	and.w	r3, r3, #16
 8000996:	2b10      	cmp	r3, #16
 8000998:	d003      	beq.n	80009a2 <RCC_GetClocksFreq+0x1ba>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	4a29      	ldr	r2, [pc, #164]	@ (8000a44 <RCC_GetClocksFreq+0x25c>)
 800099e:	619a      	str	r2, [r3, #24]
 80009a0:	e003      	b.n	80009aa <RCC_GetClocksFreq+0x1c2>
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681a      	ldr	r2, [r3, #0]
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	619a      	str	r2, [r3, #24]
  }

  /* I2C2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C2SW) != RCC_CFGR3_I2C2SW)
 80009aa:	4b25      	ldr	r3, [pc, #148]	@ (8000a40 <RCC_GetClocksFreq+0x258>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ae:	f003 0320 	and.w	r3, r3, #32
 80009b2:	2b20      	cmp	r3, #32
 80009b4:	d003      	beq.n	80009be <RCC_GetClocksFreq+0x1d6>
  {
    /* I2C2 Clock is HSI Osc. */
    RCC_Clocks->I2C2CLK_Frequency = HSI_VALUE;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	4a22      	ldr	r2, [pc, #136]	@ (8000a44 <RCC_GetClocksFreq+0x25c>)
 80009ba:	61da      	str	r2, [r3, #28]
 80009bc:	e003      	b.n	80009c6 <RCC_GetClocksFreq+0x1de>
  }
  else
  {
    /* I2C2 Clock is System Clock */
    RCC_Clocks->I2C2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681a      	ldr	r2, [r3, #0]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	61da      	str	r2, [r3, #28]
  }
  
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM1SW) == RCC_CFGR3_TIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 80009c6:	4b1e      	ldr	r3, [pc, #120]	@ (8000a40 <RCC_GetClocksFreq+0x258>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80009ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80009d2:	d10d      	bne.n	80009f0 <RCC_GetClocksFreq+0x208>
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80009da:	429a      	cmp	r2, r3
 80009dc:	d108      	bne.n	80009f0 <RCC_GetClocksFreq+0x208>
  && (apb2presc == ahbpresc)) 
 80009de:	68fa      	ldr	r2, [r7, #12]
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	429a      	cmp	r2, r3
 80009e4:	d104      	bne.n	80009f0 <RCC_GetClocksFreq+0x208>
  {
    /* TIM1 Clock is 2 * pllclk */
    RCC_Clocks->TIM1CLK_Frequency = pllclk * 2;
 80009e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009e8:	005a      	lsls	r2, r3, #1
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	621a      	str	r2, [r3, #32]
 80009ee:	e003      	b.n	80009f8 <RCC_GetClocksFreq+0x210>
  }
  else
  {
    /* TIM1 Clock is APB2 clock. */
    RCC_Clocks->TIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	68da      	ldr	r2, [r3, #12]
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	621a      	str	r2, [r3, #32]
  }

    /* TIM8CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 80009f8:	4b11      	ldr	r3, [pc, #68]	@ (8000a40 <RCC_GetClocksFreq+0x258>)
 80009fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000a00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000a04:	d10d      	bne.n	8000a22 <RCC_GetClocksFreq+0x23a>
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a0c:	429a      	cmp	r2, r3
 8000a0e:	d108      	bne.n	8000a22 <RCC_GetClocksFreq+0x23a>
  && (apb2presc == ahbpresc))
 8000a10:	68fa      	ldr	r2, [r7, #12]
 8000a12:	68bb      	ldr	r3, [r7, #8]
 8000a14:	429a      	cmp	r2, r3
 8000a16:	d104      	bne.n	8000a22 <RCC_GetClocksFreq+0x23a>
  {
    /* TIM8 Clock is 2 * pllclk */
    RCC_Clocks->TIM8CLK_Frequency = pllclk * 2;
 8000a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a1a:	005a      	lsls	r2, r3, #1
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	625a      	str	r2, [r3, #36]	@ 0x24
 8000a20:	e003      	b.n	8000a2a <RCC_GetClocksFreq+0x242>
  }
  else
  {
    /* TIM8 Clock is APB2 clock. */
    RCC_Clocks->TIM8CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	68da      	ldr	r2, [r3, #12]
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  
  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 8000a2a:	4b05      	ldr	r3, [pc, #20]	@ (8000a40 <RCC_GetClocksFreq+0x258>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2e:	f003 0303 	and.w	r3, r3, #3
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d10e      	bne.n	8000a54 <RCC_GetClocksFreq+0x26c>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	68da      	ldr	r2, [r3, #12]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	629a      	str	r2, [r3, #40]	@ 0x28
 8000a3e:	e028      	b.n	8000a92 <RCC_GetClocksFreq+0x2aa>
 8000a40:	40021000 	.word	0x40021000
 8000a44:	007a1200 	.word	0x007a1200
 8000a48:	003d0900 	.word	0x003d0900
 8000a4c:	20000000 	.word	0x20000000
 8000a50:	20000010 	.word	0x20000010
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 8000a54:	4b6c      	ldr	r3, [pc, #432]	@ (8000c08 <RCC_GetClocksFreq+0x420>)
 8000a56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a58:	f003 0303 	and.w	r3, r3, #3
 8000a5c:	2b01      	cmp	r3, #1
 8000a5e:	d104      	bne.n	8000a6a <RCC_GetClocksFreq+0x282>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681a      	ldr	r2, [r3, #0]
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	629a      	str	r2, [r3, #40]	@ 0x28
 8000a68:	e013      	b.n	8000a92 <RCC_GetClocksFreq+0x2aa>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 8000a6a:	4b67      	ldr	r3, [pc, #412]	@ (8000c08 <RCC_GetClocksFreq+0x420>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6e:	f003 0303 	and.w	r3, r3, #3
 8000a72:	2b02      	cmp	r3, #2
 8000a74:	d104      	bne.n	8000a80 <RCC_GetClocksFreq+0x298>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000a7c:	629a      	str	r2, [r3, #40]	@ 0x28
 8000a7e:	e008      	b.n	8000a92 <RCC_GetClocksFreq+0x2aa>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 8000a80:	4b61      	ldr	r3, [pc, #388]	@ (8000c08 <RCC_GetClocksFreq+0x420>)
 8000a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a84:	f003 0303 	and.w	r3, r3, #3
 8000a88:	2b03      	cmp	r3, #3
 8000a8a:	d102      	bne.n	8000a92 <RCC_GetClocksFreq+0x2aa>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	4a5f      	ldr	r2, [pc, #380]	@ (8000c0c <RCC_GetClocksFreq+0x424>)
 8000a90:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* USART2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
 8000a92:	4b5d      	ldr	r3, [pc, #372]	@ (8000c08 <RCC_GetClocksFreq+0x420>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a96:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d104      	bne.n	8000aa8 <RCC_GetClocksFreq+0x2c0>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	689a      	ldr	r2, [r3, #8]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000aa6:	e021      	b.n	8000aec <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 8000aa8:	4b57      	ldr	r3, [pc, #348]	@ (8000c08 <RCC_GetClocksFreq+0x420>)
 8000aaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ab0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000ab4:	d104      	bne.n	8000ac0 <RCC_GetClocksFreq+0x2d8>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000abe:	e015      	b.n	8000aec <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 8000ac0:	4b51      	ldr	r3, [pc, #324]	@ (8000c08 <RCC_GetClocksFreq+0x420>)
 8000ac2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ac8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8000acc:	d104      	bne.n	8000ad8 <RCC_GetClocksFreq+0x2f0>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000ad4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000ad6:	e009      	b.n	8000aec <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 8000ad8:	4b4b      	ldr	r3, [pc, #300]	@ (8000c08 <RCC_GetClocksFreq+0x420>)
 8000ada:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000adc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ae0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8000ae4:	d102      	bne.n	8000aec <RCC_GetClocksFreq+0x304>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	4a48      	ldr	r2, [pc, #288]	@ (8000c0c <RCC_GetClocksFreq+0x424>)
 8000aea:	62da      	str	r2, [r3, #44]	@ 0x2c
  }    

  /* USART3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
 8000aec:	4b46      	ldr	r3, [pc, #280]	@ (8000c08 <RCC_GetClocksFreq+0x420>)
 8000aee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af0:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d104      	bne.n	8000b02 <RCC_GetClocksFreq+0x31a>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	689a      	ldr	r2, [r3, #8]
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	631a      	str	r2, [r3, #48]	@ 0x30
 8000b00:	e021      	b.n	8000b46 <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
 8000b02:	4b41      	ldr	r3, [pc, #260]	@ (8000c08 <RCC_GetClocksFreq+0x420>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b06:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8000b0a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8000b0e:	d104      	bne.n	8000b1a <RCC_GetClocksFreq+0x332>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	631a      	str	r2, [r3, #48]	@ 0x30
 8000b18:	e015      	b.n	8000b46 <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
 8000b1a:	4b3b      	ldr	r3, [pc, #236]	@ (8000c08 <RCC_GetClocksFreq+0x420>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8000b22:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8000b26:	d104      	bne.n	8000b32 <RCC_GetClocksFreq+0x34a>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000b2e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000b30:	e009      	b.n	8000b46 <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
 8000b32:	4b35      	ldr	r3, [pc, #212]	@ (8000c08 <RCC_GetClocksFreq+0x420>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b36:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8000b3a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8000b3e:	d102      	bne.n	8000b46 <RCC_GetClocksFreq+0x35e>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	4a32      	ldr	r2, [pc, #200]	@ (8000c0c <RCC_GetClocksFreq+0x424>)
 8000b44:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
    /* UART4CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == 0x0)
 8000b46:	4b30      	ldr	r3, [pc, #192]	@ (8000c08 <RCC_GetClocksFreq+0x420>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d104      	bne.n	8000b5c <RCC_GetClocksFreq+0x374>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	689a      	ldr	r2, [r3, #8]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b5a:	e021      	b.n	8000ba0 <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_0)
 8000b5c:	4b2a      	ldr	r3, [pc, #168]	@ (8000c08 <RCC_GetClocksFreq+0x420>)
 8000b5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b60:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8000b64:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8000b68:	d104      	bne.n	8000b74 <RCC_GetClocksFreq+0x38c>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681a      	ldr	r2, [r3, #0]
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b72:	e015      	b.n	8000ba0 <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_1)
 8000b74:	4b24      	ldr	r3, [pc, #144]	@ (8000c08 <RCC_GetClocksFreq+0x420>)
 8000b76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b78:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8000b7c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8000b80:	d104      	bne.n	8000b8c <RCC_GetClocksFreq+0x3a4>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART4CLK_Frequency = LSE_VALUE;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000b88:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b8a:	e009      	b.n	8000ba0 <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW)
 8000b8c:	4b1e      	ldr	r3, [pc, #120]	@ (8000c08 <RCC_GetClocksFreq+0x420>)
 8000b8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b90:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8000b94:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8000b98:	d102      	bne.n	8000ba0 <RCC_GetClocksFreq+0x3b8>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART4CLK_Frequency = HSI_VALUE;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	4a1b      	ldr	r2, [pc, #108]	@ (8000c0c <RCC_GetClocksFreq+0x424>)
 8000b9e:	635a      	str	r2, [r3, #52]	@ 0x34
  }   
  
  /* UART5CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == 0x0)
 8000ba0:	4b19      	ldr	r3, [pc, #100]	@ (8000c08 <RCC_GetClocksFreq+0x420>)
 8000ba2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba4:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d104      	bne.n	8000bb6 <RCC_GetClocksFreq+0x3ce>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	689a      	ldr	r2, [r3, #8]
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	639a      	str	r2, [r3, #56]	@ 0x38
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
  } 
}
 8000bb4:	e021      	b.n	8000bfa <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_0)
 8000bb6:	4b14      	ldr	r3, [pc, #80]	@ (8000c08 <RCC_GetClocksFreq+0x420>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bba:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8000bbe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000bc2:	d104      	bne.n	8000bce <RCC_GetClocksFreq+0x3e6>
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000bcc:	e015      	b.n	8000bfa <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_1)
 8000bce:	4b0e      	ldr	r3, [pc, #56]	@ (8000c08 <RCC_GetClocksFreq+0x420>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd2:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8000bd6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8000bda:	d104      	bne.n	8000be6 <RCC_GetClocksFreq+0x3fe>
    RCC_Clocks->UART5CLK_Frequency = LSE_VALUE;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000be2:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000be4:	e009      	b.n	8000bfa <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
 8000be6:	4b08      	ldr	r3, [pc, #32]	@ (8000c08 <RCC_GetClocksFreq+0x420>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bea:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8000bee:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8000bf2:	d102      	bne.n	8000bfa <RCC_GetClocksFreq+0x412>
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	4a05      	ldr	r2, [pc, #20]	@ (8000c0c <RCC_GetClocksFreq+0x424>)
 8000bf8:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000bfa:	bf00      	nop
 8000bfc:	372c      	adds	r7, #44	@ 0x2c
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	40021000 	.word	0x40021000
 8000c0c:	007a1200 	.word	0x007a1200

08000c10 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
 8000c18:	460b      	mov	r3, r1
 8000c1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000c1c:	78fb      	ldrb	r3, [r7, #3]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d006      	beq.n	8000c30 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8000c22:	4b0a      	ldr	r3, [pc, #40]	@ (8000c4c <RCC_AHBPeriphClockCmd+0x3c>)
 8000c24:	695a      	ldr	r2, [r3, #20]
 8000c26:	4909      	ldr	r1, [pc, #36]	@ (8000c4c <RCC_AHBPeriphClockCmd+0x3c>)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	4313      	orrs	r3, r2
 8000c2c:	614b      	str	r3, [r1, #20]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 8000c2e:	e006      	b.n	8000c3e <RCC_AHBPeriphClockCmd+0x2e>
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8000c30:	4b06      	ldr	r3, [pc, #24]	@ (8000c4c <RCC_AHBPeriphClockCmd+0x3c>)
 8000c32:	695a      	ldr	r2, [r3, #20]
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	43db      	mvns	r3, r3
 8000c38:	4904      	ldr	r1, [pc, #16]	@ (8000c4c <RCC_AHBPeriphClockCmd+0x3c>)
 8000c3a:	4013      	ands	r3, r2
 8000c3c:	614b      	str	r3, [r1, #20]
}
 8000c3e:	bf00      	nop
 8000c40:	370c      	adds	r7, #12
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	40021000 	.word	0x40021000

08000c50 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
 8000c58:	460b      	mov	r3, r1
 8000c5a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000c5c:	78fb      	ldrb	r3, [r7, #3]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d006      	beq.n	8000c70 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000c62:	4b0a      	ldr	r3, [pc, #40]	@ (8000c8c <RCC_APB2PeriphClockCmd+0x3c>)
 8000c64:	699a      	ldr	r2, [r3, #24]
 8000c66:	4909      	ldr	r1, [pc, #36]	@ (8000c8c <RCC_APB2PeriphClockCmd+0x3c>)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	4313      	orrs	r3, r2
 8000c6c:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000c6e:	e006      	b.n	8000c7e <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000c70:	4b06      	ldr	r3, [pc, #24]	@ (8000c8c <RCC_APB2PeriphClockCmd+0x3c>)
 8000c72:	699a      	ldr	r2, [r3, #24]
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	43db      	mvns	r3, r3
 8000c78:	4904      	ldr	r1, [pc, #16]	@ (8000c8c <RCC_APB2PeriphClockCmd+0x3c>)
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	618b      	str	r3, [r1, #24]
}
 8000c7e:	bf00      	nop
 8000c80:	370c      	adds	r7, #12
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	40021000 	.word	0x40021000

08000c90 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	460b      	mov	r3, r1
 8000c9a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000c9c:	78fb      	ldrb	r3, [r7, #3]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d006      	beq.n	8000cb0 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000ca2:	4b0a      	ldr	r3, [pc, #40]	@ (8000ccc <RCC_APB1PeriphClockCmd+0x3c>)
 8000ca4:	69da      	ldr	r2, [r3, #28]
 8000ca6:	4909      	ldr	r1, [pc, #36]	@ (8000ccc <RCC_APB1PeriphClockCmd+0x3c>)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	4313      	orrs	r3, r2
 8000cac:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000cae:	e006      	b.n	8000cbe <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000cb0:	4b06      	ldr	r3, [pc, #24]	@ (8000ccc <RCC_APB1PeriphClockCmd+0x3c>)
 8000cb2:	69da      	ldr	r2, [r3, #28]
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	43db      	mvns	r3, r3
 8000cb8:	4904      	ldr	r1, [pc, #16]	@ (8000ccc <RCC_APB1PeriphClockCmd+0x3c>)
 8000cba:	4013      	ands	r3, r2
 8000cbc:	61cb      	str	r3, [r1, #28]
}
 8000cbe:	bf00      	nop
 8000cc0:	370c      	adds	r7, #12
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	40021000 	.word	0x40021000

08000cd0 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b085      	sub	sp, #20
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
 8000cd8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_BAUDRATE_PRESCALER(SPI_InitStruct->SPI_BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

  /* Configuring the SPI in master mode */
  if(SPI_InitStruct->SPI_Mode == SPI_Mode_Master)
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	885b      	ldrh	r3, [r3, #2]
 8000ce2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8000ce6:	d136      	bne.n	8000d56 <SPI_Init+0x86>
  {
/*---------------------------- SPIx CR1 Configuration ------------------------*/
    /* Get the SPIx CR1 value */
    tmpreg = SPIx->CR1;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	881b      	ldrh	r3, [r3, #0]
 8000cec:	81fb      	strh	r3, [r7, #14]
    /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
    tmpreg &= CR1_CLEAR_MASK;
 8000cee:	89fb      	ldrh	r3, [r7, #14]
 8000cf0:	f403 5341 	and.w	r3, r3, #12352	@ 0x3040
 8000cf4:	81fb      	strh	r3, [r7, #14]
    /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
    /* Set LSBFirst bit according to SPI_FirstBit value */
    /* Set BR bits according to SPI_BaudRatePrescaler value */
    /* Set CPOL bit according to SPI_CPOL value */
    /* Set CPHA bit according to SPI_CPHA value */
    tmpreg |= (uint16_t)((uint16_t)(SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode) |
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	881a      	ldrh	r2, [r3, #0]
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	885b      	ldrh	r3, [r3, #2]
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	b29a      	uxth	r2, r3
                         (uint16_t)((uint16_t)(SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA) |
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	88d9      	ldrh	r1, [r3, #6]
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	891b      	ldrh	r3, [r3, #8]
 8000d0a:	430b      	orrs	r3, r1
 8000d0c:	b299      	uxth	r1, r3
                         (uint16_t)((uint16_t)(SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRatePrescaler) | 
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	8958      	ldrh	r0, [r3, #10]
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	899b      	ldrh	r3, [r3, #12]
 8000d16:	4303      	orrs	r3, r0
 8000d18:	b298      	uxth	r0, r3
                         SPI_InitStruct->SPI_FirstBit)));
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	89db      	ldrh	r3, [r3, #14]
                         (uint16_t)((uint16_t)(SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRatePrescaler) | 
 8000d1e:	4303      	orrs	r3, r0
 8000d20:	b29b      	uxth	r3, r3
                         (uint16_t)((uint16_t)(SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA) |
 8000d22:	430b      	orrs	r3, r1
 8000d24:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)(SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode) |
 8000d26:	4313      	orrs	r3, r2
 8000d28:	b29a      	uxth	r2, r3
 8000d2a:	89fb      	ldrh	r3, [r7, #14]
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	81fb      	strh	r3, [r7, #14]
    /* Write to SPIx CR1 */
    SPIx->CR1 = tmpreg;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	89fa      	ldrh	r2, [r7, #14]
 8000d34:	801a      	strh	r2, [r3, #0]
    /*-------------------------Data Size Configuration -----------------------*/
    /* Get the SPIx CR2 value */
    tmpreg = SPIx->CR2;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	889b      	ldrh	r3, [r3, #4]
 8000d3a:	81fb      	strh	r3, [r7, #14]
    /* Clear DS[3:0] bits */
    tmpreg &= (uint16_t)~SPI_CR2_DS;
 8000d3c:	89fb      	ldrh	r3, [r7, #14]
 8000d3e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000d42:	81fb      	strh	r3, [r7, #14]
    /* Configure SPIx: Data Size */
    tmpreg |= (uint16_t)(SPI_InitStruct->SPI_DataSize);
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	889a      	ldrh	r2, [r3, #4]
 8000d48:	89fb      	ldrh	r3, [r7, #14]
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	81fb      	strh	r3, [r7, #14]
    /* Write to SPIx CR2 */
    SPIx->CR2 = tmpreg;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	89fa      	ldrh	r2, [r7, #14]
 8000d52:	809a      	strh	r2, [r3, #4]
 8000d54:	e035      	b.n	8000dc2 <SPI_Init+0xf2>
  /* Configuring the SPI in slave mode */
  else
  {
/*---------------------------- Data size Configuration -----------------------*/
    /* Get the SPIx CR2 value */
    tmpreg = SPIx->CR2;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	889b      	ldrh	r3, [r3, #4]
 8000d5a:	81fb      	strh	r3, [r7, #14]
    /* Clear DS[3:0] bits */
    tmpreg &= (uint16_t)~SPI_CR2_DS;
 8000d5c:	89fb      	ldrh	r3, [r7, #14]
 8000d5e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000d62:	81fb      	strh	r3, [r7, #14]
    /* Configure SPIx: Data Size */
    tmpreg |= (uint16_t)(SPI_InitStruct->SPI_DataSize);
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	889a      	ldrh	r2, [r3, #4]
 8000d68:	89fb      	ldrh	r3, [r7, #14]
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	81fb      	strh	r3, [r7, #14]
    /* Write to SPIx CR2 */
    SPIx->CR2 = tmpreg;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	89fa      	ldrh	r2, [r7, #14]
 8000d72:	809a      	strh	r2, [r3, #4]
/*---------------------------- SPIx CR1 Configuration ------------------------*/
    /* Get the SPIx CR1 value */
    tmpreg = SPIx->CR1;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	881b      	ldrh	r3, [r3, #0]
 8000d78:	81fb      	strh	r3, [r7, #14]
    /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
    tmpreg &= CR1_CLEAR_MASK;
 8000d7a:	89fb      	ldrh	r3, [r7, #14]
 8000d7c:	f403 5341 	and.w	r3, r3, #12352	@ 0x3040
 8000d80:	81fb      	strh	r3, [r7, #14]
    /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
    /* Set LSBFirst bit according to SPI_FirstBit value */
    /* Set BR bits according to SPI_BaudRatePrescaler value */
    /* Set CPOL bit according to SPI_CPOL value */
    /* Set CPHA bit according to SPI_CPHA value */
    tmpreg |= (uint16_t)((uint16_t)(SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode) | 
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	881a      	ldrh	r2, [r3, #0]
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	885b      	ldrh	r3, [r3, #2]
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	b29a      	uxth	r2, r3
                         (uint16_t)((uint16_t)(SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA) | 
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	88d9      	ldrh	r1, [r3, #6]
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	891b      	ldrh	r3, [r3, #8]
 8000d96:	430b      	orrs	r3, r1
 8000d98:	b299      	uxth	r1, r3
                         (uint16_t)((uint16_t)(SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRatePrescaler) | 
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	8958      	ldrh	r0, [r3, #10]
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	899b      	ldrh	r3, [r3, #12]
 8000da2:	4303      	orrs	r3, r0
 8000da4:	b298      	uxth	r0, r3
                         SPI_InitStruct->SPI_FirstBit)));
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	89db      	ldrh	r3, [r3, #14]
                         (uint16_t)((uint16_t)(SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRatePrescaler) | 
 8000daa:	4303      	orrs	r3, r0
 8000dac:	b29b      	uxth	r3, r3
                         (uint16_t)((uint16_t)(SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA) | 
 8000dae:	430b      	orrs	r3, r1
 8000db0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)(SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode) | 
 8000db2:	4313      	orrs	r3, r2
 8000db4:	b29a      	uxth	r2, r3
 8000db6:	89fb      	ldrh	r3, [r7, #14]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	81fb      	strh	r3, [r7, #14]

    /* Write to SPIx CR1 */
    SPIx->CR1 = tmpreg;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	89fa      	ldrh	r2, [r7, #14]
 8000dc0:	801a      	strh	r2, [r3, #0]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	8b9b      	ldrh	r3, [r3, #28]
 8000dc6:	b29b      	uxth	r3, r3
 8000dc8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000dcc:	b29a      	uxth	r2, r3
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	839a      	strh	r2, [r3, #28]

/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	8a1a      	ldrh	r2, [r3, #16]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	821a      	strh	r2, [r3, #16]
}
 8000dda:	bf00      	nop
 8000ddc:	3714      	adds	r7, #20
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr

08000de6 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8000de6:	b480      	push	{r7}
 8000de8:	b083      	sub	sp, #12
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	6078      	str	r0, [r7, #4]
 8000dee:	460b      	mov	r3, r1
 8000df0:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000df2:	78fb      	ldrb	r3, [r7, #3]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d008      	beq.n	8000e0a <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	881b      	ldrh	r3, [r3, #0]
 8000dfc:	b29b      	uxth	r3, r3
 8000dfe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e02:	b29a      	uxth	r2, r3
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
  }
}
 8000e08:	e007      	b.n	8000e1a <SPI_Cmd+0x34>
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	881b      	ldrh	r3, [r3, #0]
 8000e0e:	b29b      	uxth	r3, r3
 8000e10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000e14:	b29a      	uxth	r2, r3
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	801a      	strh	r2, [r3, #0]
}
 8000e1a:	bf00      	nop
 8000e1c:	370c      	adds	r7, #12
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr

08000e26 <SPI_SendData8>:
  * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_SendData8(SPI_TypeDef* SPIx, uint8_t Data)
{
 8000e26:	b480      	push	{r7}
 8000e28:	b085      	sub	sp, #20
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	6078      	str	r0, [r7, #4]
 8000e2e:	460b      	mov	r3, r1
 8000e30:	70fb      	strb	r3, [r7, #3]
  uint32_t spixbase = 0x00;
 8000e32:	2300      	movs	r3, #0
 8000e34:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  spixbase = (uint32_t)SPIx; 
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	60fb      	str	r3, [r7, #12]
  spixbase += 0x0C;
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	330c      	adds	r3, #12
 8000e3e:	60fb      	str	r3, [r7, #12]
  
  *(__IO uint8_t *) spixbase = Data;
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	78fa      	ldrb	r2, [r7, #3]
 8000e44:	701a      	strb	r2, [r3, #0]
}
 8000e46:	bf00      	nop
 8000e48:	3714      	adds	r7, #20
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr

08000e52 <SPI_ReceiveData8>:
  * @brief  Returns the most recent received data by the SPIx peripheral. 
  * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
  * @retval The value of the received data.
  */
uint8_t SPI_ReceiveData8(SPI_TypeDef* SPIx)
{
 8000e52:	b480      	push	{r7}
 8000e54:	b085      	sub	sp, #20
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
  uint32_t spixbase = 0x00;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  spixbase = (uint32_t)SPIx; 
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	60fb      	str	r3, [r7, #12]
  spixbase += 0x0C;
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	330c      	adds	r3, #12
 8000e66:	60fb      	str	r3, [r7, #12]
  
  return *(__IO uint8_t *) spixbase;
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	b2db      	uxtb	r3, r3
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3714      	adds	r7, #20
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
	...

08000e7c <SYSCFG_EXTILineConfig>:
  * @param  EXTI_PinSourcex: specifies the EXTI line to be configured.
  *         This parameter can be EXTI_PinSourcex where x can be (0..15)
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b085      	sub	sp, #20
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	460a      	mov	r2, r1
 8000e86:	71fb      	strb	r3, [r7, #7]
 8000e88:	4613      	mov	r3, r2
 8000e8a:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8000e90:	79bb      	ldrb	r3, [r7, #6]
 8000e92:	f003 0303 	and.w	r3, r3, #3
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	220f      	movs	r2, #15
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8000ea0:	4a16      	ldr	r2, [pc, #88]	@ (8000efc <SYSCFG_EXTILineConfig+0x80>)
 8000ea2:	79bb      	ldrb	r3, [r7, #6]
 8000ea4:	089b      	lsrs	r3, r3, #2
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	3302      	adds	r3, #2
 8000eaa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	43db      	mvns	r3, r3
 8000eb2:	4812      	ldr	r0, [pc, #72]	@ (8000efc <SYSCFG_EXTILineConfig+0x80>)
 8000eb4:	79b9      	ldrb	r1, [r7, #6]
 8000eb6:	0889      	lsrs	r1, r1, #2
 8000eb8:	b2c9      	uxtb	r1, r1
 8000eba:	401a      	ands	r2, r3
 8000ebc:	1c8b      	adds	r3, r1, #2
 8000ebe:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8000ec2:	4a0e      	ldr	r2, [pc, #56]	@ (8000efc <SYSCFG_EXTILineConfig+0x80>)
 8000ec4:	79bb      	ldrb	r3, [r7, #6]
 8000ec6:	089b      	lsrs	r3, r3, #2
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	3302      	adds	r3, #2
 8000ecc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ed0:	79f9      	ldrb	r1, [r7, #7]
 8000ed2:	79bb      	ldrb	r3, [r7, #6]
 8000ed4:	f003 0303 	and.w	r3, r3, #3
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	fa01 f303 	lsl.w	r3, r1, r3
 8000ede:	4807      	ldr	r0, [pc, #28]	@ (8000efc <SYSCFG_EXTILineConfig+0x80>)
 8000ee0:	79b9      	ldrb	r1, [r7, #6]
 8000ee2:	0889      	lsrs	r1, r1, #2
 8000ee4:	b2c9      	uxtb	r1, r1
 8000ee6:	431a      	orrs	r2, r3
 8000ee8:	1c8b      	adds	r3, r1, #2
 8000eea:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000eee:	bf00      	nop
 8000ef0:	3714      	adds	r7, #20
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	40010000 	.word	0x40010000

08000f00 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	881b      	ldrh	r3, [r3, #0]
 8000f12:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || 
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	4a2d      	ldr	r2, [pc, #180]	@ (8000fcc <TIM_TimeBaseInit+0xcc>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d00f      	beq.n	8000f3c <TIM_TimeBaseInit+0x3c>
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	4a2c      	ldr	r2, [pc, #176]	@ (8000fd0 <TIM_TimeBaseInit+0xd0>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d00b      	beq.n	8000f3c <TIM_TimeBaseInit+0x3c>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f2a:	d007      	beq.n	8000f3c <TIM_TimeBaseInit+0x3c>
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	4a29      	ldr	r2, [pc, #164]	@ (8000fd4 <TIM_TimeBaseInit+0xd4>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d003      	beq.n	8000f3c <TIM_TimeBaseInit+0x3c>
     (TIMx == TIM3)|| (TIMx == TIM4)) 
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	4a28      	ldr	r2, [pc, #160]	@ (8000fd8 <TIM_TimeBaseInit+0xd8>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d108      	bne.n	8000f4e <TIM_TimeBaseInit+0x4e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8000f3c:	89fb      	ldrh	r3, [r7, #14]
 8000f3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000f42:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	885a      	ldrh	r2, [r3, #2]
 8000f48:	89fb      	ldrh	r3, [r7, #14]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4a22      	ldr	r2, [pc, #136]	@ (8000fdc <TIM_TimeBaseInit+0xdc>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d00c      	beq.n	8000f70 <TIM_TimeBaseInit+0x70>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a21      	ldr	r2, [pc, #132]	@ (8000fe0 <TIM_TimeBaseInit+0xe0>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d008      	beq.n	8000f70 <TIM_TimeBaseInit+0x70>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8000f5e:	89fb      	ldrh	r3, [r7, #14]
 8000f60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000f64:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	891a      	ldrh	r2, [r3, #8]
 8000f6a:	89fb      	ldrh	r3, [r7, #14]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	89fa      	ldrh	r2, [r7, #14]
 8000f74:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	685a      	ldr	r2, [r3, #4]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	62da      	str	r2, [r3, #44]	@ 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	881a      	ldrh	r2, [r3, #0]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	851a      	strh	r2, [r3, #40]	@ 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15) || 
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a10      	ldr	r2, [pc, #64]	@ (8000fcc <TIM_TimeBaseInit+0xcc>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d00f      	beq.n	8000fae <TIM_TimeBaseInit+0xae>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4a0f      	ldr	r2, [pc, #60]	@ (8000fd0 <TIM_TimeBaseInit+0xd0>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d00b      	beq.n	8000fae <TIM_TimeBaseInit+0xae>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a12      	ldr	r2, [pc, #72]	@ (8000fe4 <TIM_TimeBaseInit+0xe4>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d007      	beq.n	8000fae <TIM_TimeBaseInit+0xae>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a11      	ldr	r2, [pc, #68]	@ (8000fe8 <TIM_TimeBaseInit+0xe8>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d003      	beq.n	8000fae <TIM_TimeBaseInit+0xae>
      (TIMx == TIM16) || (TIMx == TIM17))  
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4a10      	ldr	r2, [pc, #64]	@ (8000fec <TIM_TimeBaseInit+0xec>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d104      	bne.n	8000fb8 <TIM_TimeBaseInit+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	7a9b      	ldrb	r3, [r3, #10]
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2201      	movs	r2, #1
 8000fbc:	615a      	str	r2, [r3, #20]
}
 8000fbe:	bf00      	nop
 8000fc0:	3714      	adds	r7, #20
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	40012c00 	.word	0x40012c00
 8000fd0:	40013400 	.word	0x40013400
 8000fd4:	40000400 	.word	0x40000400
 8000fd8:	40000800 	.word	0x40000800
 8000fdc:	40001000 	.word	0x40001000
 8000fe0:	40001400 	.word	0x40001400
 8000fe4:	40014000 	.word	0x40014000
 8000fe8:	40014400 	.word	0x40014400
 8000fec:	40014800 	.word	0x40014800

08000ff0 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000ffc:	78fb      	ldrb	r3, [r7, #3]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d008      	beq.n	8001014 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	881b      	ldrh	r3, [r3, #0]
 8001006:	b29b      	uxth	r3, r3
 8001008:	f043 0301 	orr.w	r3, r3, #1
 800100c:	b29a      	uxth	r2, r3
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 8001012:	e007      	b.n	8001024 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	881b      	ldrh	r3, [r3, #0]
 8001018:	b29b      	uxth	r3, r3
 800101a:	f023 0301 	bic.w	r3, r3, #1
 800101e:	b29a      	uxth	r2, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	801a      	strh	r2, [r3, #0]
}
 8001024:	bf00      	nop
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8001030:	b480      	push	{r7}
 8001032:	b087      	sub	sp, #28
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800103a:	2300      	movs	r3, #0
 800103c:	60fb      	str	r3, [r7, #12]
 800103e:	2300      	movs	r3, #0
 8001040:	617b      	str	r3, [r7, #20]
 8001042:	2300      	movs	r3, #0
 8001044:	613b      	str	r3, [r7, #16]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC2E;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6a1b      	ldr	r3, [r3, #32]
 800104a:	f023 0210 	bic.w	r2, r3, #16
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6a1b      	ldr	r3, [r3, #32]
 8001056:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	699b      	ldr	r3, [r3, #24]
 8001062:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint32_t)~TIM_CCMR1_OC2M;
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800106a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800106e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= (uint32_t)~TIM_CCMR1_CC2S;
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001076:	60fb      	str	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint32_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	021b      	lsls	r3, r3, #8
 800107e:	68fa      	ldr	r2, [r7, #12]
 8001080:	4313      	orrs	r3, r2
 8001082:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC2P;
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	f023 0320 	bic.w	r3, r3, #32
 800108a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCPolarity << 4);
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	899b      	ldrh	r3, [r3, #12]
 8001090:	011b      	lsls	r3, r3, #4
 8001092:	697a      	ldr	r2, [r7, #20]
 8001094:	4313      	orrs	r3, r2
 8001096:	617b      	str	r3, [r7, #20]
  
  /* Set the Output State */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OutputState << 4);
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	889b      	ldrh	r3, [r3, #4]
 800109c:	011b      	lsls	r3, r3, #4
 800109e:	697a      	ldr	r2, [r7, #20]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	617b      	str	r3, [r7, #20]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	4a21      	ldr	r2, [pc, #132]	@ (800112c <TIM_OC2Init+0xfc>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d003      	beq.n	80010b4 <TIM_OC2Init+0x84>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	4a20      	ldr	r2, [pc, #128]	@ (8001130 <TIM_OC2Init+0x100>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d127      	bne.n	8001104 <TIM_OC2Init+0xd4>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint32_t)~TIM_CCER_CC2NP;
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80010ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCNPolarity << 4);
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	89db      	ldrh	r3, [r3, #14]
 80010c0:	011b      	lsls	r3, r3, #4
 80010c2:	697a      	ldr	r2, [r7, #20]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= (uint32_t)~TIM_CCER_CC2NE;
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80010ce:	617b      	str	r3, [r7, #20]
    
    /* Set the Output N State */
    tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OutputNState << 4);
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	88db      	ldrh	r3, [r3, #6]
 80010d4:	011b      	lsls	r3, r3, #4
 80010d6:	697a      	ldr	r2, [r7, #20]
 80010d8:	4313      	orrs	r3, r2
 80010da:	617b      	str	r3, [r7, #20]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS2;
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80010e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS2N;
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80010ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCIdleState << 2);
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	8a1b      	ldrh	r3, [r3, #16]
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCNIdleState << 2);
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	8a5b      	ldrh	r3, [r3, #18]
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	4313      	orrs	r3, r2
 8001102:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	68fa      	ldr	r2, [r7, #12]
 800110e:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	689a      	ldr	r2, [r3, #8]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	697a      	ldr	r2, [r7, #20]
 800111c:	621a      	str	r2, [r3, #32]
}
 800111e:	bf00      	nop
 8001120:	371c      	adds	r7, #28
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	40012c00 	.word	0x40012c00
 8001130:	40013400 	.word	0x40013400

08001134 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *         that contains the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b094      	sub	sp, #80	@ 0x50
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	6039      	str	r1, [r7, #0]
  uint32_t divider = 0, apbclock = 0, tmpreg = 0;
 800113e:	2300      	movs	r3, #0
 8001140:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001142:	2300      	movs	r3, #0
 8001144:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001146:	2300      	movs	r3, #0
 8001148:	647b      	str	r3, [r7, #68]	@ 0x44
  assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
  assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
  assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
  
  /* Disable USART */
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f023 0201 	bic.w	r2, r3, #1
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	601a      	str	r2, [r3, #0]
  
  /*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	647b      	str	r3, [r7, #68]	@ 0x44
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800115c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800115e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001162:	647b      	str	r3, [r7, #68]	@ 0x44
  
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800116a:	4313      	orrs	r3, r2
 800116c:	647b      	str	r3, [r7, #68]	@ 0x44
  
  /* Write to USART CR2 */
  USARTx->CR2 = tmpreg;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001172:	605a      	str	r2, [r3, #4]
  
  /*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	647b      	str	r3, [r7, #68]	@ 0x44
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 800117a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800117c:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8001180:	f023 030c 	bic.w	r3, r3, #12
 8001184:	647b      	str	r3, [r7, #68]	@ 0x44
  
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685a      	ldr	r2, [r3, #4]
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	68db      	ldr	r3, [r3, #12]
 800118e:	431a      	orrs	r2, r3
    USART_InitStruct->USART_Mode;
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	691b      	ldr	r3, [r3, #16]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8001194:	4313      	orrs	r3, r2
 8001196:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001198:	4313      	orrs	r3, r2
 800119a:	647b      	str	r3, [r7, #68]	@ 0x44
  
  /* Write to USART CR1 */
  USARTx->CR1 = tmpreg;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80011a0:	601a      	str	r2, [r3, #0]
  
  /*---------------------------- USART CR3 Configuration -----------------------*/
  tmpreg = USARTx->CR3;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	647b      	str	r3, [r7, #68]	@ 0x44
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 80011a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80011aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80011ae:	647b      	str	r3, [r7, #68]	@ 0x44
  
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	695b      	ldr	r3, [r3, #20]
 80011b4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80011b6:	4313      	orrs	r3, r2
 80011b8:	647b      	str	r3, [r7, #68]	@ 0x44
  
  /* Write to USART CR3 */
  USARTx->CR3 = tmpreg;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80011be:	609a      	str	r2, [r3, #8]
  
  /*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 80011c0:	f107 0308 	add.w	r3, r7, #8
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff fb0f 	bl	80007e8 <RCC_GetClocksFreq>
  
  if (USARTx == USART1)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a33      	ldr	r2, [pc, #204]	@ (800129c <USART_Init+0x168>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d102      	bne.n	80011d8 <USART_Init+0xa4>
  {
    apbclock = RCC_ClocksStatus.USART1CLK_Frequency;
 80011d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80011d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80011d6:	e016      	b.n	8001206 <USART_Init+0xd2>
  }
  else if (USARTx == USART2)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	4a31      	ldr	r2, [pc, #196]	@ (80012a0 <USART_Init+0x16c>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d102      	bne.n	80011e6 <USART_Init+0xb2>
  {
    apbclock = RCC_ClocksStatus.USART2CLK_Frequency;
 80011e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80011e4:	e00f      	b.n	8001206 <USART_Init+0xd2>
  }
  else if (USARTx == USART3)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4a2e      	ldr	r2, [pc, #184]	@ (80012a4 <USART_Init+0x170>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d102      	bne.n	80011f4 <USART_Init+0xc0>
  {
    apbclock = RCC_ClocksStatus.USART3CLK_Frequency;
 80011ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80011f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80011f2:	e008      	b.n	8001206 <USART_Init+0xd2>
  }
  else if (USARTx == UART4)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	4a2c      	ldr	r2, [pc, #176]	@ (80012a8 <USART_Init+0x174>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d102      	bne.n	8001202 <USART_Init+0xce>
  {
    apbclock = RCC_ClocksStatus.UART4CLK_Frequency;
 80011fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80011fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001200:	e001      	b.n	8001206 <USART_Init+0xd2>
  }
  else 
  {
    apbclock = RCC_ClocksStatus.UART5CLK_Frequency;
 8001202:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001204:	64bb      	str	r3, [r7, #72]	@ 0x48
  }  
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d011      	beq.n	8001236 <USART_Init+0x102>
  {
    /* (divider * 10) computing in case Oversampling mode is 8 Samples */
    divider = (uint32_t)((2 * apbclock) / (USART_InitStruct->USART_BaudRate));
 8001212:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001214:	005a      	lsls	r2, r3, #1
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	fbb2 f3f3 	udiv	r3, r2, r3
 800121e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    tmpreg  = (uint32_t)((2 * apbclock) % (USART_InitStruct->USART_BaudRate));
 8001220:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	683a      	ldr	r2, [r7, #0]
 8001226:	6812      	ldr	r2, [r2, #0]
 8001228:	fbb3 f1f2 	udiv	r1, r3, r2
 800122c:	fb01 f202 	mul.w	r2, r1, r2
 8001230:	1a9b      	subs	r3, r3, r2
 8001232:	647b      	str	r3, [r7, #68]	@ 0x44
 8001234:	e00e      	b.n	8001254 <USART_Init+0x120>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* (divider * 10) computing in case Oversampling mode is 16 Samples */
    divider = (uint32_t)((apbclock) / (USART_InitStruct->USART_BaudRate));
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800123c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001240:	64fb      	str	r3, [r7, #76]	@ 0x4c
    tmpreg  = (uint32_t)((apbclock) % (USART_InitStruct->USART_BaudRate));
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001248:	fbb3 f1f2 	udiv	r1, r3, r2
 800124c:	fb01 f202 	mul.w	r2, r1, r2
 8001250:	1a9b      	subs	r3, r3, r2
 8001252:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  
  /* round the divider : if fractional part i greater than 0.5 increment divider */
  if (tmpreg >=  (USART_InitStruct->USART_BaudRate) / 2)
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	085b      	lsrs	r3, r3, #1
 800125a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800125c:	429a      	cmp	r2, r3
 800125e:	d302      	bcc.n	8001266 <USART_Init+0x132>
  {
    divider++;
 8001260:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001262:	3301      	adds	r3, #1
 8001264:	64fb      	str	r3, [r7, #76]	@ 0x4c
  } 
  
  /* Implement the divider in case Oversampling mode is 8 Samples */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800126e:	2b00      	cmp	r3, #0
 8001270:	d00b      	beq.n	800128a <USART_Init+0x156>
  {
    /* get the LSB of divider and shift it to the right by 1 bit */
    tmpreg = (divider & (uint16_t)0x000F) >> 1;
 8001272:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001274:	085b      	lsrs	r3, r3, #1
 8001276:	f003 0307 	and.w	r3, r3, #7
 800127a:	647b      	str	r3, [r7, #68]	@ 0x44
    
    /* update the divider value */
    divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 800127c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800127e:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 8001282:	4013      	ands	r3, r2
 8001284:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001286:	4313      	orrs	r3, r2
 8001288:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)divider;
 800128a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800128c:	b29a      	uxth	r2, r3
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	819a      	strh	r2, [r3, #12]
}
 8001292:	bf00      	nop
 8001294:	3750      	adds	r7, #80	@ 0x50
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	40013800 	.word	0x40013800
 80012a0:	40004400 	.word	0x40004400
 80012a4:	40004800 	.word	0x40004800
 80012a8:	40004c00 	.word	0x40004c00

080012ac <USART_ClockInit>:
  *         structure that contains the configuration information for the specified
  *         USART peripheral.
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b085      	sub	sp, #20
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80012b6:	2300      	movs	r3, #0
 80012b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CLOCK(USART_ClockInitStruct->USART_Clock));
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA, LBCL and SSM bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80012c6:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA, LastBit and SSM ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)(USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	431a      	orrs	r2, r3
                       USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit);
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 80012d6:	431a      	orrs	r2, r3
                       USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit);
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 80012de:	68fa      	ldr	r2, [r7, #12]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	60fb      	str	r3, [r7, #12]
  /* Write to USART CR2 */
  USARTx->CR2 = tmpreg;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	68fa      	ldr	r2, [r7, #12]
 80012e8:	605a      	str	r2, [r3, #4]
}
 80012ea:	bf00      	nop
 80012ec:	3714      	adds	r7, #20
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr

080012f6 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 80012f6:	b480      	push	{r7}
 80012f8:	b083      	sub	sp, #12
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2200      	movs	r2, #0
 8001308:	605a      	str	r2, [r3, #4]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2200      	movs	r2, #0
 800130e:	609a      	str	r2, [r3, #8]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2200      	movs	r2, #0
 8001314:	60da      	str	r2, [r3, #12]
}
 8001316:	bf00      	nop
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr

08001322 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8001322:	b480      	push	{r7}
 8001324:	b083      	sub	sp, #12
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
 800132a:	460b      	mov	r3, r1
 800132c:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800132e:	78fb      	ldrb	r3, [r7, #3]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d006      	beq.n	8001342 <USART_Cmd+0x20>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f043 0201 	orr.w	r2, r3, #1
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
  }
}
 8001340:	e005      	b.n	800134e <USART_Cmd+0x2c>
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f023 0201 	bic.w	r2, r3, #1
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	601a      	str	r2, [r3, #0]
}
 800134e:	bf00      	nop
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr

0800135a <USART_SendData>:
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 800135a:	b480      	push	{r7}
 800135c:	b083      	sub	sp, #12
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
 8001362:	460b      	mov	r3, r1
 8001364:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 

  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)0x01FF);
 8001366:	887b      	ldrh	r3, [r7, #2]
 8001368:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800136c:	b29a      	uxth	r2, r3
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 8001372:	bf00      	nop
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr

0800137e <USART_ReceiveData>:
  * @param  USARTx: Select the USART peripheral. This parameter can be one of the 
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 800137e:	b480      	push	{r7}
 8001380:	b083      	sub	sp, #12
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Receive Data */
  return (uint16_t)(USARTx->RDR & (uint16_t)0x01FF);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800138a:	b29b      	uxth	r3, r3
 800138c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001390:	b29b      	uxth	r3, r3
}
 8001392:	4618      	mov	r0, r3
 8001394:	370c      	adds	r7, #12
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr

0800139e <USART_GetFlagStatus>:
  *         @arg USART_FLAG_FE:  Framing Error flag.
  *         @arg USART_FLAG_PE:  Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint32_t USART_FLAG)
{
 800139e:	b480      	push	{r7}
 80013a0:	b085      	sub	sp, #20
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
 80013a6:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80013a8:	2300      	movs	r3, #0
 80013aa:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  
  if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	69da      	ldr	r2, [r3, #28]
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	4013      	ands	r3, r2
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d002      	beq.n	80013be <USART_GetFlagStatus+0x20>
  {
    bitstatus = SET;
 80013b8:	2301      	movs	r3, #1
 80013ba:	73fb      	strb	r3, [r7, #15]
 80013bc:	e001      	b.n	80013c2 <USART_GetFlagStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 80013be:	2300      	movs	r3, #0
 80013c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3714      	adds	r7, #20
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001454 <SystemInit+0x84>)
 80013d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013da:	4a1e      	ldr	r2, [pc, #120]	@ (8001454 <SystemInit+0x84>)
 80013dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80013e4:	4b1c      	ldr	r3, [pc, #112]	@ (8001458 <SystemInit+0x88>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a1b      	ldr	r2, [pc, #108]	@ (8001458 <SystemInit+0x88>)
 80013ea:	f043 0301 	orr.w	r3, r3, #1
 80013ee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 80013f0:	4b19      	ldr	r3, [pc, #100]	@ (8001458 <SystemInit+0x88>)
 80013f2:	685a      	ldr	r2, [r3, #4]
 80013f4:	4918      	ldr	r1, [pc, #96]	@ (8001458 <SystemInit+0x88>)
 80013f6:	4b19      	ldr	r3, [pc, #100]	@ (800145c <SystemInit+0x8c>)
 80013f8:	4013      	ands	r3, r2
 80013fa:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80013fc:	4b16      	ldr	r3, [pc, #88]	@ (8001458 <SystemInit+0x88>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a15      	ldr	r2, [pc, #84]	@ (8001458 <SystemInit+0x88>)
 8001402:	f023 7384 	bic.w	r3, r3, #17301504	@ 0x1080000
 8001406:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800140a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800140c:	4b12      	ldr	r3, [pc, #72]	@ (8001458 <SystemInit+0x88>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a11      	ldr	r2, [pc, #68]	@ (8001458 <SystemInit+0x88>)
 8001412:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001416:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8001418:	4b0f      	ldr	r3, [pc, #60]	@ (8001458 <SystemInit+0x88>)
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	4a0e      	ldr	r2, [pc, #56]	@ (8001458 <SystemInit+0x88>)
 800141e:	f423 03fe 	bic.w	r3, r3, #8323072	@ 0x7f0000
 8001422:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8001424:	4b0c      	ldr	r3, [pc, #48]	@ (8001458 <SystemInit+0x88>)
 8001426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001428:	4a0b      	ldr	r2, [pc, #44]	@ (8001458 <SystemInit+0x88>)
 800142a:	f023 030f 	bic.w	r3, r3, #15
 800142e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 8001430:	4b09      	ldr	r3, [pc, #36]	@ (8001458 <SystemInit+0x88>)
 8001432:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001434:	4908      	ldr	r1, [pc, #32]	@ (8001458 <SystemInit+0x88>)
 8001436:	4b0a      	ldr	r3, [pc, #40]	@ (8001460 <SystemInit+0x90>)
 8001438:	4013      	ands	r3, r2
 800143a:	630b      	str	r3, [r1, #48]	@ 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800143c:	4b06      	ldr	r3, [pc, #24]	@ (8001458 <SystemInit+0x88>)
 800143e:	2200      	movs	r2, #0
 8001440:	609a      	str	r2, [r3, #8]

  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8001442:	f000 f80f 	bl	8001464 <SetSysClock>
  
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001446:	4b03      	ldr	r3, [pc, #12]	@ (8001454 <SystemInit+0x84>)
 8001448:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800144c:	609a      	str	r2, [r3, #8]
#endif  
}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	e000ed00 	.word	0xe000ed00
 8001458:	40021000 	.word	0x40021000
 800145c:	f87fc00c 	.word	0xf87fc00c
 8001460:	ff00fccc 	.word	0xff00fccc

08001464 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).             
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800146a:	2300      	movs	r3, #0
 800146c:	607b      	str	r3, [r7, #4]
 800146e:	2300      	movs	r3, #0
 8001470:	603b      	str	r3, [r7, #0]
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/

  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration -----------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001472:	4b33      	ldr	r3, [pc, #204]	@ (8001540 <SetSysClock+0xdc>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a32      	ldr	r2, [pc, #200]	@ (8001540 <SetSysClock+0xdc>)
 8001478:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800147c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800147e:	4b30      	ldr	r3, [pc, #192]	@ (8001540 <SetSysClock+0xdc>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001486:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	3301      	adds	r3, #1
 800148c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d103      	bne.n	800149c <SetSysClock+0x38>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800149a:	d1f0      	bne.n	800147e <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800149c:	4b28      	ldr	r3, [pc, #160]	@ (8001540 <SetSysClock+0xdc>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d002      	beq.n	80014ae <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80014a8:	2301      	movs	r3, #1
 80014aa:	603b      	str	r3, [r7, #0]
 80014ac:	e001      	b.n	80014b2 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80014ae:	2300      	movs	r3, #0
 80014b0:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d13c      	bne.n	8001532 <SetSysClock+0xce>
  {
    /* Enable Prefetch Buffer and set Flash Latency */
    FLASH->ACR = FLASH_ACR_PRFTBE | (uint32_t)FLASH_ACR_LATENCY_1;
 80014b8:	4b22      	ldr	r3, [pc, #136]	@ (8001544 <SetSysClock+0xe0>)
 80014ba:	2212      	movs	r2, #18
 80014bc:	601a      	str	r2, [r3, #0]
 
     /* HCLK = SYSCLK / 1 */
     RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80014be:	4b20      	ldr	r3, [pc, #128]	@ (8001540 <SetSysClock+0xdc>)
 80014c0:	4a1f      	ldr	r2, [pc, #124]	@ (8001540 <SetSysClock+0xdc>)
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	6053      	str	r3, [r2, #4]
       
     /* PCLK2 = HCLK / 1 */
     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80014c6:	4b1e      	ldr	r3, [pc, #120]	@ (8001540 <SetSysClock+0xdc>)
 80014c8:	4a1d      	ldr	r2, [pc, #116]	@ (8001540 <SetSysClock+0xdc>)
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	6053      	str	r3, [r2, #4]
     
     /* PCLK1 = HCLK / 2 */
     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80014ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001540 <SetSysClock+0xdc>)
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	4a1b      	ldr	r2, [pc, #108]	@ (8001540 <SetSysClock+0xdc>)
 80014d4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80014d8:	6053      	str	r3, [r2, #4]

    /* PLL configuration */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 80014da:	4b19      	ldr	r3, [pc, #100]	@ (8001540 <SetSysClock+0xdc>)
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	4a18      	ldr	r2, [pc, #96]	@ (8001540 <SetSysClock+0xdc>)
 80014e0:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 80014e4:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL9);
 80014e6:	4b16      	ldr	r3, [pc, #88]	@ (8001540 <SetSysClock+0xdc>)
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	4a15      	ldr	r2, [pc, #84]	@ (8001540 <SetSysClock+0xdc>)
 80014ec:	f443 13e8 	orr.w	r3, r3, #1900544	@ 0x1d0000
 80014f0:	6053      	str	r3, [r2, #4]

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 80014f2:	4b13      	ldr	r3, [pc, #76]	@ (8001540 <SetSysClock+0xdc>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a12      	ldr	r2, [pc, #72]	@ (8001540 <SetSysClock+0xdc>)
 80014f8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80014fc:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80014fe:	bf00      	nop
 8001500:	4b0f      	ldr	r3, [pc, #60]	@ (8001540 <SetSysClock+0xdc>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001508:	2b00      	cmp	r3, #0
 800150a:	d0f9      	beq.n	8001500 <SetSysClock+0x9c>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800150c:	4b0c      	ldr	r3, [pc, #48]	@ (8001540 <SetSysClock+0xdc>)
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	4a0b      	ldr	r2, [pc, #44]	@ (8001540 <SetSysClock+0xdc>)
 8001512:	f023 0303 	bic.w	r3, r3, #3
 8001516:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 8001518:	4b09      	ldr	r3, [pc, #36]	@ (8001540 <SetSysClock+0xdc>)
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	4a08      	ldr	r2, [pc, #32]	@ (8001540 <SetSysClock+0xdc>)
 800151e:	f043 0302 	orr.w	r3, r3, #2
 8001522:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8001524:	bf00      	nop
 8001526:	4b06      	ldr	r3, [pc, #24]	@ (8001540 <SetSysClock+0xdc>)
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f003 030c 	and.w	r3, r3, #12
 800152e:	2b08      	cmp	r3, #8
 8001530:	d1f9      	bne.n	8001526 <SetSysClock+0xc2>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }
}
 8001532:	bf00      	nop
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	40021000 	.word	0x40021000
 8001544:	40022000 	.word	0x40022000

08001548 <main>:

//---------------------------------------
// Funksjonsdeklarasjonar
//---------------------------------------

int main(void)  {
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
    uint16_t a;

    maskinvare_init();
 800154e:	f000 fddd 	bl	800210c <maskinvare_init>

	while(1) {

		if(oppdater_diodar) {  // Blir gjort kvart 200. msek, sjå fila avbrotsmetodar
 8001552:	4b81      	ldr	r3, [pc, #516]	@ (8001758 <main+0x210>)
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	b2db      	uxtb	r3, r3
 8001558:	2b00      	cmp	r3, #0
 800155a:	d00e      	beq.n	800157a <main+0x32>

			GPIO_sett_kompassmoenster(diode_moenster);
 800155c:	4b7f      	ldr	r3, [pc, #508]	@ (800175c <main+0x214>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	b25b      	sxtb	r3, r3
 8001562:	4618      	mov	r0, r3
 8001564:	f000 f96c 	bl	8001840 <GPIO_sett_kompassmoenster>
			diode_moenster = diode_moenster + 0x2;
 8001568:	4b7c      	ldr	r3, [pc, #496]	@ (800175c <main+0x214>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	3302      	adds	r3, #2
 800156e:	b2da      	uxtb	r2, r3
 8001570:	4b7a      	ldr	r3, [pc, #488]	@ (800175c <main+0x214>)
 8001572:	701a      	strb	r2, [r3, #0]
			oppdater_diodar = 0;
 8001574:	4b78      	ldr	r3, [pc, #480]	@ (8001758 <main+0x210>)
 8001576:	2200      	movs	r2, #0
 8001578:	701a      	strb	r2, [r3, #0]

		}

		if(gyldig_trykk_av_USERbrytar) { //Er brytaren trykt ned sidan sist?
 800157a:	4b79      	ldr	r3, [pc, #484]	@ (8001760 <main+0x218>)
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	b2db      	uxtb	r3, r3
 8001580:	2b00      	cmp	r3, #0
 8001582:	d01e      	beq.n	80015c2 <main+0x7a>
                                         // Skal då laga ei ekstramelding.
		    uint8_t data0, data1;

            data0 = diode_moenster;
 8001584:	4b75      	ldr	r3, [pc, #468]	@ (800175c <main+0x214>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	71fb      	strb	r3, [r7, #7]
            data1 = data0 >> 4;
 800158a:	79fb      	ldrb	r3, [r7, #7]
 800158c:	091b      	lsrs	r3, r3, #4
 800158e:	71bb      	strb	r3, [r7, #6]

        	USART2_skriv('S');    //Viser at det er ei brytarmelding (S for svitsj)
 8001590:	2053      	movs	r0, #83	@ 0x53
 8001592:	f000 fbd9 	bl	8001d48 <USART2_skriv>
        	USART2_skriv((uint8_t)(hex2ascii_tabell[(data1 & 0x0F)]));   // Send MS Hex-siffer av ein tidsbyte
 8001596:	79bb      	ldrb	r3, [r7, #6]
 8001598:	f003 030f 	and.w	r3, r3, #15
 800159c:	4a71      	ldr	r2, [pc, #452]	@ (8001764 <main+0x21c>)
 800159e:	5cd3      	ldrb	r3, [r2, r3]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f000 fbd1 	bl	8001d48 <USART2_skriv>
        	USART2_skriv((uint8_t)(hex2ascii_tabell[(data0 & 0x0F)])); // Send LS Hex-siffer av ein tidsbyte
 80015a6:	79fb      	ldrb	r3, [r7, #7]
 80015a8:	f003 030f 	and.w	r3, r3, #15
 80015ac:	4a6d      	ldr	r2, [pc, #436]	@ (8001764 <main+0x21c>)
 80015ae:	5cd3      	ldrb	r3, [r2, r3]
 80015b0:	4618      	mov	r0, r3
 80015b2:	f000 fbc9 	bl	8001d48 <USART2_skriv>

        	gyldig_trykk_av_USERbrytar = 0;
 80015b6:	4b6a      	ldr	r3, [pc, #424]	@ (8001760 <main+0x218>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	701a      	strb	r2, [r3, #0]

        	diode_moenster = 0; 		  // Nullstill diodem�nsteret etter eit brytartrykk
 80015bc:	4b67      	ldr	r3, [pc, #412]	@ (800175c <main+0x214>)
 80015be:	2200      	movs	r2, #0
 80015c0:	701a      	strb	r2, [r3, #0]
        }

	 // Her er hovudoppg�va til dette prosjektet, nemleg avlesing av 3D akselerasjonsdata og sending av dette
	 // til PC.
		if(send_maalingar_til_loggar)  {   // Viss brukaren har sett i gong logging ved � trykkja 'k' p�
 80015c2:	4b69      	ldr	r3, [pc, #420]	@ (8001768 <main+0x220>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	f000 80b4 	beq.w	8001734 <main+0x1ec>
			                               // tastaturet.
        	if(legg_til_meldingshovud)  {
 80015cc:	4b67      	ldr	r3, [pc, #412]	@ (800176c <main+0x224>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d005      	beq.n	80015e0 <main+0x98>
        		USART2_skriv((uint8_t) STX); // Meldingsstart aller f�rst
 80015d4:	2002      	movs	r0, #2
 80015d6:	f000 fbb7 	bl	8001d48 <USART2_skriv>
        		legg_til_meldingshovud = 0;
 80015da:	4b64      	ldr	r3, [pc, #400]	@ (800176c <main+0x224>)
 80015dc:	2200      	movs	r2, #0
 80015de:	701a      	strb	r2, [r3, #0]
        	}

        	if(ny_maaling) { // Det skal utf�rast ny m�ling med 100Hz samplefrekvens (ordna i fila avbrotsmetodar)
 80015e0:	4b63      	ldr	r3, [pc, #396]	@ (8001770 <main+0x228>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d0b3      	beq.n	8001552 <main+0xa>

		        LSM303DLHC_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A, buffer, 6); // OUT_X_L_A ligg på lågaste adresse
 80015ea:	2306      	movs	r3, #6
 80015ec:	4a61      	ldr	r2, [pc, #388]	@ (8001774 <main+0x22c>)
 80015ee:	2128      	movs	r1, #40	@ 0x28
 80015f0:	2032      	movs	r0, #50	@ 0x32
 80015f2:	f000 fec9 	bl	8002388 <LSM303DLHC_Read>
		        																   // i XYZ-registerblokka i kretsen
			 // Sett saman akselerometerdata
                a   = (buffer[1] << 8) | buffer[0]; //Buffer 1 er MSByte i flg. databladet.
 80015f6:	4b5f      	ldr	r3, [pc, #380]	@ (8001774 <main+0x22c>)
 80015f8:	785b      	ldrb	r3, [r3, #1]
 80015fa:	021b      	lsls	r3, r3, #8
 80015fc:	b21a      	sxth	r2, r3
 80015fe:	4b5d      	ldr	r3, [pc, #372]	@ (8001774 <main+0x22c>)
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	b21b      	sxth	r3, r3
 8001604:	4313      	orrs	r3, r2
 8001606:	b21b      	sxth	r3, r3
 8001608:	80bb      	strh	r3, [r7, #4]
		        a_x = ((int16_t)(a)) >> 4;          //Gjer om til int der bare dei 12 teljande bitane er med
 800160a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800160e:	111b      	asrs	r3, r3, #4
 8001610:	b21a      	sxth	r2, r3
 8001612:	4b59      	ldr	r3, [pc, #356]	@ (8001778 <main+0x230>)
 8001614:	801a      	strh	r2, [r3, #0]
				a   = (buffer[3] << 8) | buffer[2];	//Dette gir omr�det -2048 til 2047. Oppl�ysinga er
 8001616:	4b57      	ldr	r3, [pc, #348]	@ (8001774 <main+0x22c>)
 8001618:	78db      	ldrb	r3, [r3, #3]
 800161a:	021b      	lsls	r3, r3, #8
 800161c:	b21a      	sxth	r2, r3
 800161e:	4b55      	ldr	r3, [pc, #340]	@ (8001774 <main+0x22c>)
 8001620:	789b      	ldrb	r3, [r3, #2]
 8001622:	b21b      	sxth	r3, r3
 8001624:	4313      	orrs	r3, r2
 8001626:	b21b      	sxth	r3, r3
 8001628:	80bb      	strh	r3, [r7, #4]
				a_y = ((int16_t)(a)) >> 4;			// 1mg pr. LSb ved +/-2g omr�de i flg. databladet.
 800162a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800162e:	111b      	asrs	r3, r3, #4
 8001630:	b21a      	sxth	r2, r3
 8001632:	4b52      	ldr	r3, [pc, #328]	@ (800177c <main+0x234>)
 8001634:	801a      	strh	r2, [r3, #0]
				a   = (buffer[5] << 8) | buffer[4];	// Verdien 1000 gir d� 1 g.
 8001636:	4b4f      	ldr	r3, [pc, #316]	@ (8001774 <main+0x22c>)
 8001638:	795b      	ldrb	r3, [r3, #5]
 800163a:	021b      	lsls	r3, r3, #8
 800163c:	b21a      	sxth	r2, r3
 800163e:	4b4d      	ldr	r3, [pc, #308]	@ (8001774 <main+0x22c>)
 8001640:	791b      	ldrb	r3, [r3, #4]
 8001642:	b21b      	sxth	r3, r3
 8001644:	4313      	orrs	r3, r2
 8001646:	b21b      	sxth	r3, r3
 8001648:	80bb      	strh	r3, [r7, #4]
				a_z = ((int16_t)(a)) >> 4;
 800164a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800164e:	111b      	asrs	r3, r3, #4
 8001650:	b21a      	sxth	r2, r3
 8001652:	4b4b      	ldr	r3, [pc, #300]	@ (8001780 <main+0x238>)
 8001654:	801a      	strh	r2, [r3, #0]

			 // Filtrer m�lingane
				a_xf_k = (a1*a_xf_k_1 + b1*a_x)/100; //Nedsamplingsfilter, sj� deklarasjonsfila
 8001656:	4b4b      	ldr	r3, [pc, #300]	@ (8001784 <main+0x23c>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a4b      	ldr	r2, [pc, #300]	@ (8001788 <main+0x240>)
 800165c:	6812      	ldr	r2, [r2, #0]
 800165e:	fb03 f202 	mul.w	r2, r3, r2
 8001662:	4b45      	ldr	r3, [pc, #276]	@ (8001778 <main+0x230>)
 8001664:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001668:	4619      	mov	r1, r3
 800166a:	4b48      	ldr	r3, [pc, #288]	@ (800178c <main+0x244>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	fb01 f303 	mul.w	r3, r1, r3
 8001672:	4413      	add	r3, r2
 8001674:	4a46      	ldr	r2, [pc, #280]	@ (8001790 <main+0x248>)
 8001676:	fb82 1203 	smull	r1, r2, r2, r3
 800167a:	1152      	asrs	r2, r2, #5
 800167c:	17db      	asrs	r3, r3, #31
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	4a44      	ldr	r2, [pc, #272]	@ (8001794 <main+0x24c>)
 8001682:	6013      	str	r3, [r2, #0]
				a_xf_k_1 = a_xf_k;
 8001684:	4b43      	ldr	r3, [pc, #268]	@ (8001794 <main+0x24c>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a3f      	ldr	r2, [pc, #252]	@ (8001788 <main+0x240>)
 800168a:	6013      	str	r3, [r2, #0]

				a_yf_k = (a1*a_yf_k_1 + b1*a_y)/100; //Nedsamplingsfilter, sj� deklarasjonsfila
 800168c:	4b3d      	ldr	r3, [pc, #244]	@ (8001784 <main+0x23c>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a41      	ldr	r2, [pc, #260]	@ (8001798 <main+0x250>)
 8001692:	6812      	ldr	r2, [r2, #0]
 8001694:	fb03 f202 	mul.w	r2, r3, r2
 8001698:	4b38      	ldr	r3, [pc, #224]	@ (800177c <main+0x234>)
 800169a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800169e:	4619      	mov	r1, r3
 80016a0:	4b3a      	ldr	r3, [pc, #232]	@ (800178c <main+0x244>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	fb01 f303 	mul.w	r3, r1, r3
 80016a8:	4413      	add	r3, r2
 80016aa:	4a39      	ldr	r2, [pc, #228]	@ (8001790 <main+0x248>)
 80016ac:	fb82 1203 	smull	r1, r2, r2, r3
 80016b0:	1152      	asrs	r2, r2, #5
 80016b2:	17db      	asrs	r3, r3, #31
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	4a39      	ldr	r2, [pc, #228]	@ (800179c <main+0x254>)
 80016b8:	6013      	str	r3, [r2, #0]
				a_yf_k_1 = a_yf_k;
 80016ba:	4b38      	ldr	r3, [pc, #224]	@ (800179c <main+0x254>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a36      	ldr	r2, [pc, #216]	@ (8001798 <main+0x250>)
 80016c0:	6013      	str	r3, [r2, #0]

				a_zf_k = (a1*a_zf_k_1 + b1*a_z)/100; //Nedsamplingsfilter, sj� deklarasjonsfila
 80016c2:	4b30      	ldr	r3, [pc, #192]	@ (8001784 <main+0x23c>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a36      	ldr	r2, [pc, #216]	@ (80017a0 <main+0x258>)
 80016c8:	6812      	ldr	r2, [r2, #0]
 80016ca:	fb03 f202 	mul.w	r2, r3, r2
 80016ce:	4b2c      	ldr	r3, [pc, #176]	@ (8001780 <main+0x238>)
 80016d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016d4:	4619      	mov	r1, r3
 80016d6:	4b2d      	ldr	r3, [pc, #180]	@ (800178c <main+0x244>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	fb01 f303 	mul.w	r3, r1, r3
 80016de:	4413      	add	r3, r2
 80016e0:	4a2b      	ldr	r2, [pc, #172]	@ (8001790 <main+0x248>)
 80016e2:	fb82 1203 	smull	r1, r2, r2, r3
 80016e6:	1152      	asrs	r2, r2, #5
 80016e8:	17db      	asrs	r3, r3, #31
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	4a2d      	ldr	r2, [pc, #180]	@ (80017a4 <main+0x25c>)
 80016ee:	6013      	str	r3, [r2, #0]
				a_zf_k_1 = a_zf_k;
 80016f0:	4b2c      	ldr	r3, [pc, #176]	@ (80017a4 <main+0x25c>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a2a      	ldr	r2, [pc, #168]	@ (80017a0 <main+0x258>)
 80016f6:	6013      	str	r3, [r2, #0]

			 // Send kvar tiande m�ling
				if(send_maaling) {
 80016f8:	4b2b      	ldr	r3, [pc, #172]	@ (80017a8 <main+0x260>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d015      	beq.n	800172c <main+0x1e4>

                	samplenr++;                      // Oppdatering av tidsreferanse
 8001700:	4b2a      	ldr	r3, [pc, #168]	@ (80017ac <main+0x264>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	3301      	adds	r3, #1
 8001706:	b2da      	uxtb	r2, r3
 8001708:	4b28      	ldr	r3, [pc, #160]	@ (80017ac <main+0x264>)
 800170a:	701a      	strb	r2, [r3, #0]

    		        USART2_send_tid8_og_data16x3(samplenr, (int16_t) a_xf_k, (int16_t) a_yf_k, (int16_t) a_zf_k);
 800170c:	4b27      	ldr	r3, [pc, #156]	@ (80017ac <main+0x264>)
 800170e:	7818      	ldrb	r0, [r3, #0]
 8001710:	4b20      	ldr	r3, [pc, #128]	@ (8001794 <main+0x24c>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	b219      	sxth	r1, r3
 8001716:	4b21      	ldr	r3, [pc, #132]	@ (800179c <main+0x254>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	b21a      	sxth	r2, r3
 800171c:	4b21      	ldr	r3, [pc, #132]	@ (80017a4 <main+0x25c>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	b21b      	sxth	r3, r3
 8001722:	f000 fb41 	bl	8001da8 <USART2_send_tid8_og_data16x3>

    		        send_maaling = 0; // Sendinga er n� utf�rt.
 8001726:	4b20      	ldr	r3, [pc, #128]	@ (80017a8 <main+0x260>)
 8001728:	2200      	movs	r2, #0
 800172a:	701a      	strb	r2, [r3, #0]
                }

    		    ny_maaling = 0; // M�linga er n� utf�rt
 800172c:	4b10      	ldr	r3, [pc, #64]	@ (8001770 <main+0x228>)
 800172e:	2200      	movs	r2, #0
 8001730:	701a      	strb	r2, [r3, #0]
 8001732:	e70e      	b.n	8001552 <main+0xa>
			 }

        }
		else if(!send_maalingar_til_loggar) { // Her har brukaren trykt ein 's' på tastaturet, eller
 8001734:	4b0c      	ldr	r3, [pc, #48]	@ (8001768 <main+0x220>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	2b00      	cmp	r3, #0
 800173a:	f47f af0a 	bne.w	8001552 <main+0xa>
											  // logginga har aldri blitt starta.
			if(legg_til_meldingshale)  {
 800173e:	4b1c      	ldr	r3, [pc, #112]	@ (80017b0 <main+0x268>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	2b00      	cmp	r3, #0
 8001744:	f43f af05 	beq.w	8001552 <main+0xa>
			     USART2_skriv((uint8_t) ETX); // Meldingshale for å avslutta loggemeldingane etter stopping.
 8001748:	2003      	movs	r0, #3
 800174a:	f000 fafd 	bl	8001d48 <USART2_skriv>
			     legg_til_meldingshale = 0;
 800174e:	4b18      	ldr	r3, [pc, #96]	@ (80017b0 <main+0x268>)
 8001750:	2200      	movs	r2, #0
 8001752:	701a      	strb	r2, [r3, #0]
		if(oppdater_diodar) {  // Blir gjort kvart 200. msek, sjå fila avbrotsmetodar
 8001754:	e6fd      	b.n	8001552 <main+0xa>
 8001756:	bf00      	nop
 8001758:	20000070 	.word	0x20000070
 800175c:	20000078 	.word	0x20000078
 8001760:	2000006c 	.word	0x2000006c
 8001764:	2000002c 	.word	0x2000002c
 8001768:	2000009c 	.word	0x2000009c
 800176c:	2000009e 	.word	0x2000009e
 8001770:	20000077 	.word	0x20000077
 8001774:	2000007c 	.word	0x2000007c
 8001778:	20000082 	.word	0x20000082
 800177c:	20000084 	.word	0x20000084
 8001780:	20000086 	.word	0x20000086
 8001784:	20000040 	.word	0x20000040
 8001788:	2000008c 	.word	0x2000008c
 800178c:	20000044 	.word	0x20000044
 8001790:	51eb851f 	.word	0x51eb851f
 8001794:	20000088 	.word	0x20000088
 8001798:	20000094 	.word	0x20000094
 800179c:	20000090 	.word	0x20000090
 80017a0:	20000048 	.word	0x20000048
 80017a4:	20000098 	.word	0x20000098
 80017a8:	2000009d 	.word	0x2000009d
 80017ac:	20000076 	.word	0x20000076
 80017b0:	2000009f 	.word	0x2000009f

080017b4 <GPIO_oppstart>:
//{
//  GPIO_OType_PP = 0x00,
//  GPIO_OType_OD = 0x01
//}GPIOOType_TypeDef;

void GPIO_oppstart(void)  {
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef   GPIO_InitStructure;

//GPIO-pinne PA0 som er kobla til USER-brytaren
//---------------------------------------------
  //Slepp foerst til klokka paa GPIOA-modulen
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 80017ba:	2101      	movs	r1, #1
 80017bc:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80017c0:	f7ff fa26 	bl	8000c10 <RCC_AHBPeriphClockCmd>

  //Konfigurer brytarpinnen
	GPIO_InitStructure.GPIO_Pin  = GPIO_Pin_0;
 80017c4:	2301      	movs	r3, #1
 80017c6:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 80017c8:	2300      	movs	r3, #0
 80017ca:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 80017cc:	2300      	movs	r3, #0
 80017ce:	71fb      	strb	r3, [r7, #7]

  //Initialiser, dvs. last ned konfigurasjonen i modulen
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 80017d0:	463b      	mov	r3, r7
 80017d2:	4619      	mov	r1, r3
 80017d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017d8:	f7fe fe02 	bl	80003e0 <GPIO_Init>
  //Slepp f�rst til klokka paa GPIO-portE.
    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOE, ENABLE);
 80017dc:	2101      	movs	r1, #1
 80017de:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80017e2:	f7ff fa15 	bl	8000c10 <RCC_AHBPeriphClockCmd>

  //Konfigurer GPIO_pinnane PE8 - 15 som er kobla til LED-ar.
  //Konfigurer ogsaa pinnen PE7 som er brukt til testing.
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7|GPIO_Pin_8|GPIO_Pin_9|GPIO_Pin_10|GPIO_Pin_11|GPIO_Pin_12|GPIO_Pin_13|GPIO_Pin_14|GPIO_Pin_15;
 80017e6:	f64f 7380 	movw	r3, #65408	@ 0xff80
 80017ea:	603b      	str	r3, [r7, #0]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80017ec:	2301      	movs	r3, #1
 80017ee:	713b      	strb	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_Level_1;
 80017f0:	2301      	movs	r3, #1
 80017f2:	717b      	strb	r3, [r7, #5]
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80017f4:	2300      	movs	r3, #0
 80017f6:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 80017f8:	2300      	movs	r3, #0
 80017fa:	71fb      	strb	r3, [r7, #7]


  //Initialiser, dvs. last ned konfigurasjonen i modulen
    GPIO_Init(GPIOE, &GPIO_InitStructure);
 80017fc:	463b      	mov	r3, r7
 80017fe:	4619      	mov	r1, r3
 8001800:	480d      	ldr	r0, [pc, #52]	@ (8001838 <GPIO_oppstart+0x84>)
 8001802:	f7fe fded 	bl	80003e0 <GPIO_Init>


  //Slepp s� til klokka paa GPIO-portC.
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, ENABLE);
 8001806:	2101      	movs	r1, #1
 8001808:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800180c:	f7ff fa00 	bl	8000c10 <RCC_AHBPeriphClockCmd>

  //Konfigurer GPIO_pinnen PC6 som er brukt til testing av avbrotsmetoden for SysTick.
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;
 8001810:	2340      	movs	r3, #64	@ 0x40
 8001812:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8001814:	2301      	movs	r3, #1
 8001816:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_Level_1;
 8001818:	2301      	movs	r3, #1
 800181a:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800181c:	2300      	movs	r3, #0
 800181e:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8001820:	2300      	movs	r3, #0
 8001822:	71fb      	strb	r3, [r7, #7]

  //Initialiser, dvs. last ned konfigurasjonen i modulen
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001824:	463b      	mov	r3, r7
 8001826:	4619      	mov	r1, r3
 8001828:	4804      	ldr	r0, [pc, #16]	@ (800183c <GPIO_oppstart+0x88>)
 800182a:	f7fe fdd9 	bl	80003e0 <GPIO_Init>

}
 800182e:	bf00      	nop
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	48001000 	.word	0x48001000
 800183c:	48000800 	.word	0x48000800

08001840 <GPIO_sett_kompassmoenster>:
  //Pause
  //   for(i=0;i<0x100000;i++);

}

void GPIO_sett_kompassmoenster(int8_t verdi)  {
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	71fb      	strb	r3, [r7, #7]



  //Legg verdi ut p� pinnane PE8-15
    GPIOE->ODR = verdi << 8;  //;
 800184a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184e:	b29b      	uxth	r3, r3
 8001850:	4a04      	ldr	r2, [pc, #16]	@ (8001864 <GPIO_sett_kompassmoenster+0x24>)
 8001852:	021b      	lsls	r3, r3, #8
 8001854:	b29b      	uxth	r3, r3
 8001856:	8293      	strh	r3, [r2, #20]
}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	48001000 	.word	0x48001000

08001868 <GPIO_sjekk_brytar>:
    GPIOC->ODR = GPIOC->ODR | (GPIO_Pin_8 | GPIO_Pin_9);
//  __enable_irq();

}

void GPIO_sjekk_brytar(void) {
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0

	if (GPIOA->IDR & GPIO_Pin_0 ) { //Er brytaren er trykt inn?
 800186c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001870:	8a1b      	ldrh	r3, [r3, #16]
 8001872:	b29b      	uxth	r3, r3
 8001874:	f003 0301 	and.w	r3, r3, #1
 8001878:	2b00      	cmp	r3, #0
 800187a:	d00a      	beq.n	8001892 <GPIO_sjekk_brytar+0x2a>
       if(brytar_var_nettopp_slept) { //I s� fall:Var brytaren slept ved f�rre lesing?
 800187c:	4b09      	ldr	r3, [pc, #36]	@ (80018a4 <GPIO_sjekk_brytar+0x3c>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d009      	beq.n	8001898 <GPIO_sjekk_brytar+0x30>

    	   brytar_var_nettopp_slept = 0;
 8001884:	4b07      	ldr	r3, [pc, #28]	@ (80018a4 <GPIO_sjekk_brytar+0x3c>)
 8001886:	2200      	movs	r2, #0
 8001888:	701a      	strb	r2, [r3, #0]
    	   gyldig_trykk_av_USERbrytar = 1;      //D� godkjennest dette som eit nytt trykk
 800188a:	4b07      	ldr	r3, [pc, #28]	@ (80018a8 <GPIO_sjekk_brytar+0x40>)
 800188c:	2201      	movs	r2, #1
 800188e:	701a      	strb	r2, [r3, #0]
	}

    else {                 // Viss ikkje brytaren er trykt inn,
    	 brytar_var_nettopp_slept = 1; // s� er brytaren slept.
    }
}
 8001890:	e002      	b.n	8001898 <GPIO_sjekk_brytar+0x30>
    	 brytar_var_nettopp_slept = 1; // s� er brytaren slept.
 8001892:	4b04      	ldr	r3, [pc, #16]	@ (80018a4 <GPIO_sjekk_brytar+0x3c>)
 8001894:	2201      	movs	r2, #1
 8001896:	701a      	strb	r2, [r3, #0]
}
 8001898:	bf00      	nop
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	2000002a 	.word	0x2000002a
 80018a8:	2000006c 	.word	0x2000006c

080018ac <aks_oppstart>:

//---------------------------------------
// Funksjonsdeklarasjonar
//---------------------------------------

void aks_oppstart(void)  {
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0

	LSM303DLHCMag_InitTypeDef magnetoMeter;
	magnetoMeter.MagFull_Scale = LSM303DLHC_FS_8_1_GA;
 80018b2:	23e0      	movs	r3, #224	@ 0xe0
 80018b4:	73fb      	strb	r3, [r7, #15]
	magnetoMeter.MagOutput_DataRate = LSM303DLHC_ODR_15_HZ;
 80018b6:	2310      	movs	r3, #16
 80018b8:	737b      	strb	r3, [r7, #13]
	magnetoMeter.Temperature_Sensor = LSM303DLHC_TEMPSENSOR_DISABLE;
 80018ba:	2300      	movs	r3, #0
 80018bc:	733b      	strb	r3, [r7, #12]
	magnetoMeter.Working_Mode = LSM303DLHC_CONTINUOS_CONVERSION;
 80018be:	2300      	movs	r3, #0
 80018c0:	73bb      	strb	r3, [r7, #14]
	LSM303DLHC_MagInit(&magnetoMeter);
 80018c2:	f107 030c 	add.w	r3, r7, #12
 80018c6:	4618      	mov	r0, r3
 80018c8:	f000 fc74 	bl	80021b4 <LSM303DLHC_MagInit>


	LSM303DLHCAcc_InitTypeDef acc;
	acc.AccFull_Scale = LSM303DLHC_FULLSCALE_2G;
 80018cc:	2300      	movs	r3, #0
 80018ce:	72bb      	strb	r3, [r7, #10]
	acc.AccOutput_DataRate = LSM303DLHC_ODR_100_HZ;
 80018d0:	2350      	movs	r3, #80	@ 0x50
 80018d2:	717b      	strb	r3, [r7, #5]
	acc.Axes_Enable = LSM303DLHC_AXES_ENABLE;
 80018d4:	2307      	movs	r3, #7
 80018d6:	71bb      	strb	r3, [r7, #6]
	acc.BlockData_Update = LSM303DLHC_BlockUpdate_Continous;
 80018d8:	2300      	movs	r3, #0
 80018da:	723b      	strb	r3, [r7, #8]
	acc.Endianness = LSM303DLHC_BLE_LSB;
 80018dc:	2300      	movs	r3, #0
 80018de:	727b      	strb	r3, [r7, #9]
	acc.High_Resolution = LSM303DLHC_HR_ENABLE;  //12bit oppløysing
 80018e0:	2308      	movs	r3, #8
 80018e2:	71fb      	strb	r3, [r7, #7]
	acc.Power_Mode = LSM303DLHC_NORMAL_MODE;     //Dvs. ikkje lågeffektsmodus
 80018e4:	2300      	movs	r3, #0
 80018e6:	713b      	strb	r3, [r7, #4]
	LSM303DLHC_AccInit(&acc);  // Denne funksjonen utfører først "Low level Init", som
 80018e8:	1d3b      	adds	r3, r7, #4
 80018ea:	4618      	mov	r0, r3
 80018ec:	f000 fc26 	bl	800213c <LSM303DLHC_AccInit>
							   // set opp I2C-modulen. Innhaldet i denne er vist under:
}
 80018f0:	bf00      	nop
 80018f2:	3710      	adds	r7, #16
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <SPI1_oppstart>:
//void Exp_click_sokkel1_skriv_til_AB(int8_t moenster_A,int8_t moenster_B);
//---------------------------------------
// Funksjonsdeklarasjonar
//---------------------------------------

void SPI1_oppstart(void)  {
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b08a      	sub	sp, #40	@ 0x28
 80018fc:	af00      	add	r7, sp, #0
//------------------------------------------
  //Deklarasjon av initialiseringsstrukturen.
    SPI_InitTypeDef   SPI_InitStructure;

  //Slepp f�rst til klokka paa SPI1.
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE); // SPI1 og 2 er p� to ulike bussar.
 80018fe:	2101      	movs	r1, #1
 8001900:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001904:	f7ff f9a4 	bl	8000c50 <RCC_APB2PeriphClockCmd>


  //Oppsett av SPI2
	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;           /*!< Specifies the SPI unidirectional or bidirectional data mode.
 8001908:	2300      	movs	r3, #0
 800190a:	82bb      	strh	r3, [r7, #20]
                                         This parameter can be a value of @ref SPI_data_direction */
	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;                /*!< Specifies the SPI mode (Master/Slave).
 800190c:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8001910:	82fb      	strh	r3, [r7, #22]
                                         This parameter can be a value of @ref SPI_mode */
	SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;            /*!< Specifies the SPI data size.
 8001912:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001916:	833b      	strh	r3, [r7, #24]
                                         This parameter can be a value of @ref SPI_data_size */
	SPI_InitStructure.SPI_CPOL = SPI_CPOL_High;                /*!< Specifies the serial clock steady state.
 8001918:	2302      	movs	r3, #2
 800191a:	837b      	strh	r3, [r7, #26]
                                         This parameter can be a value of @ref SPI_Clock_Polarity */
	SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge;                /*!< Specifies the clock active edge for the bit capture.
 800191c:	2301      	movs	r3, #1
 800191e:	83bb      	strh	r3, [r7, #28]
                                         Pos flanke blir 2. flanke n�r clk er aktiv l�g */
	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;                 /*!< Specifies whether the NSS signal is managed by
 8001920:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001924:	83fb      	strh	r3, [r7, #30]
                                         hardware (NSS pin) or by software using the SSI bit.
                                         This parameter can be a value of @ref SPI_Slave_Select_management */
	SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_16;   /*!< Specifies the Baud Rate prescaler value
 8001926:	2318      	movs	r3, #24
 8001928:	843b      	strh	r3, [r7, #32]
                                         f_sclk = (f_sysklk)/preskalering = 4.5MHz*/
	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;            /*!< Specifies whether data transfers start from MSB or LSB bit.
 800192a:	2300      	movs	r3, #0
 800192c:	847b      	strh	r3, [r7, #34]	@ 0x22
                                         This parameter can be a value of @ref SPI_MSB_LSB_transmission */

//	SPI_InitStructure.SPI_CRCPolynomial;       /*!< Specifies the polynomial used for the CRC calculation. */

  //Initialiser, dvs. last ned konfigurasjonen i modulen
	SPI_Init(SPI1, &SPI_InitStructure);
 800192e:	f107 0314 	add.w	r3, r7, #20
 8001932:	4619      	mov	r1, r3
 8001934:	4826      	ldr	r0, [pc, #152]	@ (80019d0 <SPI1_oppstart+0xd8>)
 8001936:	f7ff f9cb 	bl	8000cd0 <SPI_Init>
//------------------------------------------
//Deklarasjon av initialiseringsstrukturen.
	GPIO_InitTypeDef GPIO_InitStructure_SPI1;

  //Slepp til klokka paa GPIO-portA.
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 800193a:	2101      	movs	r1, #1
 800193c:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8001940:	f7ff f966 	bl	8000c10 <RCC_AHBPeriphClockCmd>

  //Konfigurer PA5-7.
	GPIO_InitStructure_SPI1.GPIO_Pin = GPIO_Pin_5 | GPIO_Pin_6 | GPIO_Pin_7;
 8001944:	23e0      	movs	r3, #224	@ 0xe0
 8001946:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructure_SPI1.GPIO_Mode = GPIO_Mode_AF;
 8001948:	2302      	movs	r3, #2
 800194a:	743b      	strb	r3, [r7, #16]
	GPIO_InitStructure_SPI1.GPIO_Speed = GPIO_Speed_Level_1;
 800194c:	2301      	movs	r3, #1
 800194e:	747b      	strb	r3, [r7, #17]
	GPIO_InitStructure_SPI1.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8001950:	2300      	movs	r3, #0
 8001952:	74fb      	strb	r3, [r7, #19]

  //Initialiser, dvs. last ned konfigurasjonen i modulen
	GPIO_Init(GPIOA, &GPIO_InitStructure_SPI1);
 8001954:	f107 030c 	add.w	r3, r7, #12
 8001958:	4619      	mov	r1, r3
 800195a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800195e:	f7fe fd3f 	bl	80003e0 <GPIO_Init>

  //Knytt SPI1-pinnane til AF */
    GPIO_PinAFConfig(GPIOA, GPIO_PinSource5, GPIO_AF_5);
 8001962:	2205      	movs	r2, #5
 8001964:	2105      	movs	r1, #5
 8001966:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800196a:	f7fe fdcf 	bl	800050c <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOA, GPIO_PinSource6, GPIO_AF_5);
 800196e:	2205      	movs	r2, #5
 8001970:	2106      	movs	r1, #6
 8001972:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001976:	f7fe fdc9 	bl	800050c <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOA, GPIO_PinSource7, GPIO_AF_5);
 800197a:	2205      	movs	r2, #5
 800197c:	2107      	movs	r1, #7
 800197e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001982:	f7fe fdc3 	bl	800050c <GPIO_PinAFConfig>
//------------------------------------------
    //Deklarasjon av initialiseringsstrukturen.
    GPIO_InitTypeDef   GPIO_InitStructure;

    //Slepp til klokka paa GPIO-portE.
   	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOE, ENABLE);
 8001986:	2101      	movs	r1, #1
 8001988:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800198c:	f7ff f940 	bl	8000c10 <RCC_AHBPeriphClockCmd>

    //Konfigurer som ein vanleg GPIO_pinne.
   	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
 8001990:	2308      	movs	r3, #8
 8001992:	607b      	str	r3, [r7, #4]
   	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8001994:	2301      	movs	r3, #1
 8001996:	723b      	strb	r3, [r7, #8]
   	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_Level_1;
 8001998:	2301      	movs	r3, #1
 800199a:	727b      	strb	r3, [r7, #9]
   	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800199c:	2300      	movs	r3, #0
 800199e:	72bb      	strb	r3, [r7, #10]
   	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 80019a0:	2300      	movs	r3, #0
 80019a2:	72fb      	strb	r3, [r7, #11]

     //Initialiser, dvs. last ned konfigurasjonen i modulen
   	GPIO_Init(GPIOE, &GPIO_InitStructure);
 80019a4:	1d3b      	adds	r3, r7, #4
 80019a6:	4619      	mov	r1, r3
 80019a8:	480a      	ldr	r0, [pc, #40]	@ (80019d4 <SPI1_oppstart+0xdc>)
 80019aa:	f7fe fd19 	bl	80003e0 <GPIO_Init>

   	//Sett CS = 1 (aktiv l�g)
    GPIOE->ODR = GPIOE->ODR | GPIO_Pin_3;
 80019ae:	4b09      	ldr	r3, [pc, #36]	@ (80019d4 <SPI1_oppstart+0xdc>)
 80019b0:	8a9b      	ldrh	r3, [r3, #20]
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	4a07      	ldr	r2, [pc, #28]	@ (80019d4 <SPI1_oppstart+0xdc>)
 80019b6:	f043 0308 	orr.w	r3, r3, #8
 80019ba:	b29b      	uxth	r3, r3
 80019bc:	8293      	strh	r3, [r2, #20]

// Aktiver SPI1
	SPI_Cmd(SPI1, ENABLE);
 80019be:	2101      	movs	r1, #1
 80019c0:	4803      	ldr	r0, [pc, #12]	@ (80019d0 <SPI1_oppstart+0xd8>)
 80019c2:	f7ff fa10 	bl	8000de6 <SPI_Cmd>
}
 80019c6:	bf00      	nop
 80019c8:	3728      	adds	r7, #40	@ 0x28
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	40013000 	.word	0x40013000
 80019d4:	48001000 	.word	0x48001000

080019d8 <gyro_oppstart>:
		while(SPI1->SR & SPI_SR_BSY);
	    GPIOE->ODR = GPIOE->ODR | GPIO_Pin_3;
return  SPI_ReceiveData8(SPI1); //SPI2->DR;
}

void gyro_oppstart(void) {  // Skriving til kontrollregister
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
	volatile uint8_t j;
    GPIOE->ODR = GPIOE->ODR & (~(GPIO_Pin_3));
 80019de:	4b1d      	ldr	r3, [pc, #116]	@ (8001a54 <gyro_oppstart+0x7c>)
 80019e0:	8a9b      	ldrh	r3, [r3, #20]
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	4a1b      	ldr	r2, [pc, #108]	@ (8001a54 <gyro_oppstart+0x7c>)
 80019e6:	f023 0308 	bic.w	r3, r3, #8
 80019ea:	b29b      	uxth	r3, r3
 80019ec:	8293      	strh	r3, [r2, #20]
//        SPI2->DR = data;
	SPI_SendData8(SPI1, 0x20);//0x8F); //WR, MS, adr_ctrlreg
 80019ee:	2120      	movs	r1, #32
 80019f0:	4819      	ldr	r0, [pc, #100]	@ (8001a58 <gyro_oppstart+0x80>)
 80019f2:	f7ff fa18 	bl	8000e26 <SPI_SendData8>
	SPI_SendData8(SPI1, 0x0F); //PD=1 og X,Y,Z p� (1)
 80019f6:	210f      	movs	r1, #15
 80019f8:	4817      	ldr	r0, [pc, #92]	@ (8001a58 <gyro_oppstart+0x80>)
 80019fa:	f7ff fa14 	bl	8000e26 <SPI_SendData8>
	while(SPI1->SR & SPI_SR_FTLVL);
 80019fe:	bf00      	nop
 8001a00:	4b15      	ldr	r3, [pc, #84]	@ (8001a58 <gyro_oppstart+0x80>)
 8001a02:	891b      	ldrh	r3, [r3, #8]
 8001a04:	b29b      	uxth	r3, r3
 8001a06:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d1f8      	bne.n	8001a00 <gyro_oppstart+0x28>
	while(SPI1->SR & SPI_SR_BSY);
 8001a0e:	bf00      	nop
 8001a10:	4b11      	ldr	r3, [pc, #68]	@ (8001a58 <gyro_oppstart+0x80>)
 8001a12:	891b      	ldrh	r3, [r3, #8]
 8001a14:	b29b      	uxth	r3, r3
 8001a16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d1f8      	bne.n	8001a10 <gyro_oppstart+0x38>
    GPIOE->ODR = GPIOE->ODR | GPIO_Pin_3;
 8001a1e:	4b0d      	ldr	r3, [pc, #52]	@ (8001a54 <gyro_oppstart+0x7c>)
 8001a20:	8a9b      	ldrh	r3, [r3, #20]
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	4a0b      	ldr	r2, [pc, #44]	@ (8001a54 <gyro_oppstart+0x7c>)
 8001a26:	f043 0308 	orr.w	r3, r3, #8
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	8293      	strh	r3, [r2, #20]

    while(SPI1->SR & SPI_SR_RXNE) {  //T�m mottaksbuffer
 8001a2e:	e004      	b.n	8001a3a <gyro_oppstart+0x62>

       j = SPI_ReceiveData8(SPI1);
 8001a30:	4809      	ldr	r0, [pc, #36]	@ (8001a58 <gyro_oppstart+0x80>)
 8001a32:	f7ff fa0e 	bl	8000e52 <SPI_ReceiveData8>
 8001a36:	4603      	mov	r3, r0
 8001a38:	71fb      	strb	r3, [r7, #7]
    while(SPI1->SR & SPI_SR_RXNE) {  //T�m mottaksbuffer
 8001a3a:	4b07      	ldr	r3, [pc, #28]	@ (8001a58 <gyro_oppstart+0x80>)
 8001a3c:	891b      	ldrh	r3, [r3, #8]
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	f003 0301 	and.w	r3, r3, #1
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d1f3      	bne.n	8001a30 <gyro_oppstart+0x58>
    }
//    return (int8_t)SPI_ReceiveData8(SPI1); //SPI2->DR;
}
 8001a48:	bf00      	nop
 8001a4a:	bf00      	nop
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	48001000 	.word	0x48001000
 8001a58:	40013000 	.word	0x40013000

08001a5c <SPI2_oppstart>:
void Exp_click_sokkel1_skriv_til_AB(int8_t moenster_A,int8_t moenster_B);
//---------------------------------------
// Funksjonsdeklarasjonar
//---------------------------------------

void SPI2_oppstart(void)  {
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b08a      	sub	sp, #40	@ 0x28
 8001a60:	af00      	add	r7, sp, #0
//------------------------------------------
  //Deklarasjon av initialiseringsstrukturen.
    SPI_InitTypeDef   SPI_InitStructure;

  //Slepp f�rst til klokka paa SPI2.
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE);
 8001a62:	2101      	movs	r1, #1
 8001a64:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001a68:	f7ff f912 	bl	8000c90 <RCC_APB1PeriphClockCmd>


  //Oppsett av SPI2
	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;           /*!< Specifies the SPI unidirectional or bidirectional data mode.
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	82bb      	strh	r3, [r7, #20]
                                         This parameter can be a value of @ref SPI_data_direction */
	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;                /*!< Specifies the SPI mode (Master/Slave).
 8001a70:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8001a74:	82fb      	strh	r3, [r7, #22]
                                         This parameter can be a value of @ref SPI_mode */
	SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;            /*!< Specifies the SPI data size.
 8001a76:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001a7a:	833b      	strh	r3, [r7, #24]
                                         This parameter can be a value of @ref SPI_data_size */
	SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;                /*!< Specifies the serial clock steady state.
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	837b      	strh	r3, [r7, #26]
                                         This parameter can be a value of @ref SPI_Clock_Polarity */
	SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;                /*!< Specifies the clock active edge for the bit capture.
 8001a80:	2300      	movs	r3, #0
 8001a82:	83bb      	strh	r3, [r7, #28]
                                         This parameter can be a value of @ref SPI_Clock_Phase */
	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;                 /*!< Specifies whether the NSS signal is managed by
 8001a84:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a88:	83fb      	strh	r3, [r7, #30]
                                         hardware (NSS pin) or by software using the SSI bit.
                                         This parameter can be a value of @ref SPI_Slave_Select_management */
	SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_8;   /*!< Specifies the Baud Rate prescaler
 8001a8a:	2310      	movs	r3, #16
 8001a8c:	843b      	strh	r3, [r7, #32]
                                         f_sclk = (f_sysklk/2)/preskalering = 4.5MHz */
	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;            /*!< Specifies whether data transfers start from MSB or LSB bit.
 8001a8e:	2300      	movs	r3, #0
 8001a90:	847b      	strh	r3, [r7, #34]	@ 0x22
                                         This parameter can be a value of @ref SPI_MSB_LSB_transmission */

//	SPI_InitStructure.SPI_CRCPolynomial;       /*!< Specifies the polynomial used for the CRC calculation. */

  //Initialiser, dvs. last ned konfigurasjonen i modulen
	SPI_Init(SPI2, &SPI_InitStructure);
 8001a92:	f107 0314 	add.w	r3, r7, #20
 8001a96:	4619      	mov	r1, r3
 8001a98:	4822      	ldr	r0, [pc, #136]	@ (8001b24 <SPI2_oppstart+0xc8>)
 8001a9a:	f7ff f919 	bl	8000cd0 <SPI_Init>
//------------------------------------------
//Deklarasjon av initialiseringsstrukturen.
	GPIO_InitTypeDef GPIO_InitStructure_SPI2;

  //Slepp til klokka paa GPIO-portB.
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 8001a9e:	2101      	movs	r1, #1
 8001aa0:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8001aa4:	f7ff f8b4 	bl	8000c10 <RCC_AHBPeriphClockCmd>

  //Konfigurer PB13 - 15.
	GPIO_InitStructure_SPI2.GPIO_Pin = GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
 8001aa8:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001aac:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructure_SPI2.GPIO_Mode = GPIO_Mode_AF;
 8001aae:	2302      	movs	r3, #2
 8001ab0:	743b      	strb	r3, [r7, #16]
	GPIO_InitStructure_SPI2.GPIO_Speed = GPIO_Speed_Level_3;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	747b      	strb	r3, [r7, #17]
	GPIO_InitStructure_SPI2.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	74fb      	strb	r3, [r7, #19]

  //Initialiser, dvs. last ned konfigurasjonen i modulen
	GPIO_Init(GPIOB, &GPIO_InitStructure_SPI2);
 8001aba:	f107 030c 	add.w	r3, r7, #12
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4819      	ldr	r0, [pc, #100]	@ (8001b28 <SPI2_oppstart+0xcc>)
 8001ac2:	f7fe fc8d 	bl	80003e0 <GPIO_Init>

  //Knytt SPI2-pinnane til AF */
    GPIO_PinAFConfig(GPIOB, GPIO_PinSource13, GPIO_AF_5);
 8001ac6:	2205      	movs	r2, #5
 8001ac8:	210d      	movs	r1, #13
 8001aca:	4817      	ldr	r0, [pc, #92]	@ (8001b28 <SPI2_oppstart+0xcc>)
 8001acc:	f7fe fd1e 	bl	800050c <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOB, GPIO_PinSource14, GPIO_AF_5);
 8001ad0:	2205      	movs	r2, #5
 8001ad2:	210e      	movs	r1, #14
 8001ad4:	4814      	ldr	r0, [pc, #80]	@ (8001b28 <SPI2_oppstart+0xcc>)
 8001ad6:	f7fe fd19 	bl	800050c <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOB, GPIO_PinSource15, GPIO_AF_5);
 8001ada:	2205      	movs	r2, #5
 8001adc:	210f      	movs	r1, #15
 8001ade:	4812      	ldr	r0, [pc, #72]	@ (8001b28 <SPI2_oppstart+0xcc>)
 8001ae0:	f7fe fd14 	bl	800050c <GPIO_PinAFConfig>
//S� oppsett av GPIO-pinnen PB12 (CS) som blir brukt av SPI2-modulen
//------------------------------------------
    //Deklarasjon av initialiseringsstrukturen.
    GPIO_InitTypeDef   GPIO_InitStructure;
    //Konfigurer som ein vanleg GPIO_pinne.
   	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
 8001ae4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ae8:	607b      	str	r3, [r7, #4]
   	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8001aea:	2301      	movs	r3, #1
 8001aec:	723b      	strb	r3, [r7, #8]
   	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_Level_3;
 8001aee:	2303      	movs	r3, #3
 8001af0:	727b      	strb	r3, [r7, #9]
   	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001af2:	2300      	movs	r3, #0
 8001af4:	72bb      	strb	r3, [r7, #10]
   	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8001af6:	2300      	movs	r3, #0
 8001af8:	72fb      	strb	r3, [r7, #11]

     //Initialiser, dvs. last ned konfigurasjonen i modulen
   	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001afa:	1d3b      	adds	r3, r7, #4
 8001afc:	4619      	mov	r1, r3
 8001afe:	480a      	ldr	r0, [pc, #40]	@ (8001b28 <SPI2_oppstart+0xcc>)
 8001b00:	f7fe fc6e 	bl	80003e0 <GPIO_Init>

   	//Sett CS = 1 (aktiv l�g)
    GPIOB->ODR = GPIOB->ODR | GPIO_Pin_12;
 8001b04:	4b08      	ldr	r3, [pc, #32]	@ (8001b28 <SPI2_oppstart+0xcc>)
 8001b06:	8a9b      	ldrh	r3, [r3, #20]
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	4a07      	ldr	r2, [pc, #28]	@ (8001b28 <SPI2_oppstart+0xcc>)
 8001b0c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	8293      	strh	r3, [r2, #20]

// Aktiver SPI2
	SPI_Cmd(SPI2, ENABLE);
 8001b14:	2101      	movs	r1, #1
 8001b16:	4803      	ldr	r0, [pc, #12]	@ (8001b24 <SPI2_oppstart+0xc8>)
 8001b18:	f7ff f965 	bl	8000de6 <SPI_Cmd>


}
 8001b1c:	bf00      	nop
 8001b1e:	3728      	adds	r7, #40	@ 0x28
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	40003800 	.word	0x40003800
 8001b28:	48000400 	.word	0x48000400

08001b2c <Exp_click_sokkel1_oppstart>:
		while(SPI2->SR & SPI_SR_BSY);
	    GPIOB->ODR = GPIOB->ODR | GPIO_Pin_12;
return  SPI_ReceiveData8(SPI2); //SPI2->DR;
}

void Exp_click_sokkel1_oppstart(void) {
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
// Sett retningsregistra i expansjonsmodulen i sokkel 1
	Exp_click_sokkel1_sett_retningAB(0x00, 0x00); // Alle er utgangar
 8001b30:	2100      	movs	r1, #0
 8001b32:	2000      	movs	r0, #0
 8001b34:	f000 f802 	bl	8001b3c <Exp_click_sokkel1_sett_retningAB>
}
 8001b38:	bf00      	nop
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <Exp_click_sokkel1_sett_retningAB>:

void Exp_click_sokkel1_sett_retningAB(int8_t moenster_A,int8_t moenster_B) {
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	4603      	mov	r3, r0
 8001b44:	460a      	mov	r2, r1
 8001b46:	71fb      	strb	r3, [r7, #7]
 8001b48:	4613      	mov	r3, r2
 8001b4a:	71bb      	strb	r3, [r7, #6]
    GPIOB->ODR = GPIOB->ODR & (~(GPIO_Pin_12)); // CS l�g
 8001b4c:	4b1a      	ldr	r3, [pc, #104]	@ (8001bb8 <Exp_click_sokkel1_sett_retningAB+0x7c>)
 8001b4e:	8a9b      	ldrh	r3, [r3, #20]
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	4a19      	ldr	r2, [pc, #100]	@ (8001bb8 <Exp_click_sokkel1_sett_retningAB+0x7c>)
 8001b54:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	8293      	strh	r3, [r2, #20]
//        SPI2->DR = data;
//	SPI_I2S_SendData16(SPI2, 0x4000);
	SPI_SendData8(SPI2, 0x40);
 8001b5c:	2140      	movs	r1, #64	@ 0x40
 8001b5e:	4817      	ldr	r0, [pc, #92]	@ (8001bbc <Exp_click_sokkel1_sett_retningAB+0x80>)
 8001b60:	f7ff f961 	bl	8000e26 <SPI_SendData8>
	SPI_SendData8(SPI2, 0x00);
 8001b64:	2100      	movs	r1, #0
 8001b66:	4815      	ldr	r0, [pc, #84]	@ (8001bbc <Exp_click_sokkel1_sett_retningAB+0x80>)
 8001b68:	f7ff f95d 	bl	8000e26 <SPI_SendData8>
	SPI_SendData8(SPI2, moenster_A);
 8001b6c:	79fb      	ldrb	r3, [r7, #7]
 8001b6e:	4619      	mov	r1, r3
 8001b70:	4812      	ldr	r0, [pc, #72]	@ (8001bbc <Exp_click_sokkel1_sett_retningAB+0x80>)
 8001b72:	f7ff f958 	bl	8000e26 <SPI_SendData8>
	SPI_SendData8(SPI2, moenster_B);
 8001b76:	79bb      	ldrb	r3, [r7, #6]
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4810      	ldr	r0, [pc, #64]	@ (8001bbc <Exp_click_sokkel1_sett_retningAB+0x80>)
 8001b7c:	f7ff f953 	bl	8000e26 <SPI_SendData8>
	while(SPI2->SR & SPI_SR_FTLVL);
 8001b80:	bf00      	nop
 8001b82:	4b0e      	ldr	r3, [pc, #56]	@ (8001bbc <Exp_click_sokkel1_sett_retningAB+0x80>)
 8001b84:	891b      	ldrh	r3, [r3, #8]
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d1f8      	bne.n	8001b82 <Exp_click_sokkel1_sett_retningAB+0x46>
	while(SPI2->SR & SPI_SR_BSY);
 8001b90:	bf00      	nop
 8001b92:	4b0a      	ldr	r3, [pc, #40]	@ (8001bbc <Exp_click_sokkel1_sett_retningAB+0x80>)
 8001b94:	891b      	ldrh	r3, [r3, #8]
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d1f8      	bne.n	8001b92 <Exp_click_sokkel1_sett_retningAB+0x56>

    GPIOB->ODR = GPIOB->ODR | GPIO_Pin_12;
 8001ba0:	4b05      	ldr	r3, [pc, #20]	@ (8001bb8 <Exp_click_sokkel1_sett_retningAB+0x7c>)
 8001ba2:	8a9b      	ldrh	r3, [r3, #20]
 8001ba4:	b29b      	uxth	r3, r3
 8001ba6:	4a04      	ldr	r2, [pc, #16]	@ (8001bb8 <Exp_click_sokkel1_sett_retningAB+0x7c>)
 8001ba8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	8293      	strh	r3, [r2, #20]
}
 8001bb0:	bf00      	nop
 8001bb2:	3708      	adds	r7, #8
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	48000400 	.word	0x48000400
 8001bbc:	40003800 	.word	0x40003800

08001bc0 <TIM_oppstart>:

//---------------------------------------
// Funksjonsdeklarasjonar
//---------------------------------------

void TIM_oppstart(void) {
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b08a      	sub	sp, #40	@ 0x28
 8001bc4:	af00      	add	r7, sp, #0
   TIM_OCInitTypeDef        TIM_OCInitStructure;

// Oppsett av TIM2 CH2 som PWM-utgang

 //Slepp f�rst til klokka paa TIM2.
   RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 8001bc6:	2101      	movs	r1, #1
 8001bc8:	2001      	movs	r0, #1
 8001bca:	f7ff f861 	bl	8000c90 <RCC_APB1PeriphClockCmd>


   /* Time base configuration */
   TIM_TimeBaseStructure.TIM_Period = PWM_periode; //
 8001bce:	4b21      	ldr	r3, [pc, #132]	@ (8001c54 <TIM_oppstart+0x94>)
 8001bd0:	881b      	ldrh	r3, [r3, #0]
 8001bd2:	623b      	str	r3, [r7, #32]
   TIM_TimeBaseStructure.TIM_Prescaler = PWM_preskalering; // 0
 8001bd4:	4b20      	ldr	r3, [pc, #128]	@ (8001c58 <TIM_oppstart+0x98>)
 8001bd6:	881b      	ldrh	r3, [r3, #0]
 8001bd8:	83bb      	strh	r3, [r7, #28]
   TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	84bb      	strh	r3, [r7, #36]	@ 0x24
   TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8001bde:	2300      	movs	r3, #0
 8001be0:	83fb      	strh	r3, [r7, #30]

   TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 8001be2:	f107 031c 	add.w	r3, r7, #28
 8001be6:	4619      	mov	r1, r3
 8001be8:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001bec:	f7ff f988 	bl	8000f00 <TIM_TimeBaseInit>

   /* PWM1 Mode configuration: Channel2 */
   TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8001bf0:	2360      	movs	r3, #96	@ 0x60
 8001bf2:	60bb      	str	r3, [r7, #8]
   TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	81bb      	strh	r3, [r7, #12]
   TIM_OCInitStructure.TIM_Pulse = PWM_vidde;
 8001bf8:	4b18      	ldr	r3, [pc, #96]	@ (8001c5c <TIM_oppstart+0x9c>)
 8001bfa:	881b      	ldrh	r3, [r3, #0]
 8001bfc:	613b      	str	r3, [r7, #16]
   TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	82bb      	strh	r3, [r7, #20]

   TIM_OC2Init(TIM2, &TIM_OCInitStructure);
 8001c02:	f107 0308 	add.w	r3, r7, #8
 8001c06:	4619      	mov	r1, r3
 8001c08:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001c0c:	f7ff fa10 	bl	8001030 <TIM_OC2Init>
//------------------------------------------
//Deklarasjon av initialiseringsstrukturen.
	GPIO_InitTypeDef GPIO_InitStructure_TIM2;

  //Slepp til klokka paa GPIO-portA.
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE); // | RCC_AHBPeriph_AFIO
 8001c10:	2101      	movs	r1, #1
 8001c12:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8001c16:	f7fe fffb 	bl	8000c10 <RCC_AHBPeriphClockCmd>

  //Konfigurer PA1.
	GPIO_InitStructure_TIM2.GPIO_Pin = GPIO_Pin_1;
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure_TIM2.GPIO_Mode = GPIO_Mode_AF;
 8001c1e:	2302      	movs	r3, #2
 8001c20:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure_TIM2.GPIO_Speed = GPIO_Speed_Level_1;
 8001c22:	2301      	movs	r3, #1
 8001c24:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure_TIM2.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8001c26:	2300      	movs	r3, #0
 8001c28:	71fb      	strb	r3, [r7, #7]

  //Initialiser, dvs. last ned konfigurasjonen i modulen
	GPIO_Init(GPIOA, &GPIO_InitStructure_TIM2);
 8001c2a:	463b      	mov	r3, r7
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c32:	f7fe fbd5 	bl	80003e0 <GPIO_Init>

  //Knytt TIM2-pinnane til AF */
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource1, GPIO_AF_1);
 8001c36:	2201      	movs	r2, #1
 8001c38:	2101      	movs	r1, #1
 8001c3a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c3e:	f7fe fc65 	bl	800050c <GPIO_PinAFConfig>



// Aktiver til slutt TIM2

    TIM_Cmd(TIM2, ENABLE);
 8001c42:	2101      	movs	r1, #1
 8001c44:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001c48:	f7ff f9d2 	bl	8000ff0 <TIM_Cmd>
}
 8001c4c:	bf00      	nop
 8001c4e:	3728      	adds	r7, #40	@ 0x28
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	2000003c 	.word	0x2000003c
 8001c58:	20000072 	.word	0x20000072
 8001c5c:	2000003e 	.word	0x2000003e

08001c60 <USART2_oppstart>:
// Funksjonsdeklarasjonar for USART2
// USART 2 brukes for kommunikasjon til PCen gjennom UART/USB FTDI-kretsen
// på skjoldkortet.
//----------------------------------------------------------------------------
void USART2_oppstart(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b08c      	sub	sp, #48	@ 0x30
 8001c64:	af00      	add	r7, sp, #0
    // der en bruker USART2 i staden for USART1 og med nye GPIO-pinnar, sj� manualen
    // p� stm32f3 disc. shield samt brukarmanualen p� f3-kortet.
    // Det kan ogs� vera at strukturdefinisjonane er noko endra, sj� stm32f30x_usart.h

    //Slepp til klokka
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 8001c66:	2101      	movs	r1, #1
 8001c68:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8001c6c:	f7ff f810 	bl	8000c90 <RCC_APB1PeriphClockCmd>

    USART_ClockStructInit(&USART2_ClockInitStructure);
 8001c70:	f107 0308 	add.w	r3, r7, #8
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7ff fb3e 	bl	80012f6 <USART_ClockStructInit>
    USART_ClockInit(USART2, &USART2_ClockInitStructure);
 8001c7a:	f107 0308 	add.w	r3, r7, #8
 8001c7e:	4619      	mov	r1, r3
 8001c80:	4825      	ldr	r0, [pc, #148]	@ (8001d18 <USART2_oppstart+0xb8>)
 8001c82:	f7ff fb13 	bl	80012ac <USART_ClockInit>

    USART2_InitStructure.USART_BaudRate = 115200; //19200;//57600;//19200; //9600;
 8001c86:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8001c8a:	61bb      	str	r3, [r7, #24]
    USART2_InitStructure.USART_WordLength = USART_WordLength_8b;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	61fb      	str	r3, [r7, #28]
    USART2_InitStructure.USART_StopBits = USART_StopBits_1;
 8001c90:	2300      	movs	r3, #0
 8001c92:	623b      	str	r3, [r7, #32]
    USART2_InitStructure.USART_Parity =  USART_Parity_No ; //USART_Parity_Odd;
 8001c94:	2300      	movs	r3, #0
 8001c96:	627b      	str	r3, [r7, #36]	@ 0x24
    USART2_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8001c98:	230c      	movs	r3, #12
 8001c9a:	62bb      	str	r3, [r7, #40]	@ 0x28
    USART2_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    //Legg inn konfigurasjonen i modulen
    USART_Init(USART2, &USART2_InitStructure);
 8001ca0:	f107 0318 	add.w	r3, r7, #24
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	481c      	ldr	r0, [pc, #112]	@ (8001d18 <USART2_oppstart+0xb8>)
 8001ca8:	f7ff fa44 	bl	8001134 <USART_Init>
   //------------------------------------------
  //Deklarasjon av initialiseringsstrukturen.
    GPIO_InitTypeDef GPIO_InitStructure_UART2;

  //Slepp foerst til klokka paa GPIOA-modulen
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8001cac:	2101      	movs	r1, #1
 8001cae:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8001cb2:	f7fe ffad 	bl	8000c10 <RCC_AHBPeriphClockCmd>

  //Sett USART2 Tx (PA2) som AlternativFunksjon og "push-pull" (vanleg totempaale)
    GPIO_InitStructure_UART2.GPIO_Pin = GPIO_Pin_2;
 8001cb6:	2304      	movs	r3, #4
 8001cb8:	603b      	str	r3, [r7, #0]
    GPIO_InitStructure_UART2.GPIO_Mode  = GPIO_Mode_AF;
 8001cba:	2302      	movs	r3, #2
 8001cbc:	713b      	strb	r3, [r7, #4]
    GPIO_InitStructure_UART2.GPIO_Speed = GPIO_Speed_Level_1;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	717b      	strb	r3, [r7, #5]
    GPIO_InitStructure_UART2.GPIO_OType = GPIO_OType_PP;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	71bb      	strb	r3, [r7, #6]

  //Initialiser, dvs. last ned konfigurasjonen i modulen
    GPIO_Init(GPIOA, &GPIO_InitStructure_UART2);
 8001cc6:	463b      	mov	r3, r7
 8001cc8:	4619      	mov	r1, r3
 8001cca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cce:	f7fe fb87 	bl	80003e0 <GPIO_Init>

  //Knytt pinnen til AF */
    GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_7);// Sj� stm32f30x_gpio.h
 8001cd2:	2207      	movs	r2, #7
 8001cd4:	2102      	movs	r1, #2
 8001cd6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cda:	f7fe fc17 	bl	800050c <GPIO_PinAFConfig>

  //Sett USART2 Rx (PA3) som flytande inngang ("input floating")
    GPIO_InitStructure_UART2.GPIO_Pin = GPIO_Pin_3;
 8001cde:	2308      	movs	r3, #8
 8001ce0:	603b      	str	r3, [r7, #0]
    GPIO_InitStructure_UART2.GPIO_Mode = GPIO_Mode_AF;
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	713b      	strb	r3, [r7, #4]
    GPIO_InitStructure_UART2.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	71fb      	strb	r3, [r7, #7]

  //Initialiser, dvs. last ned konfigurasjonen i modulen
    GPIO_Init(GPIOA, &GPIO_InitStructure_UART2);
 8001cea:	463b      	mov	r3, r7
 8001cec:	4619      	mov	r1, r3
 8001cee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cf2:	f7fe fb75 	bl	80003e0 <GPIO_Init>

  //Knytt pinnen til AF */
  	GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_7);
 8001cf6:	2207      	movs	r2, #7
 8001cf8:	2103      	movs	r1, #3
 8001cfa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cfe:	f7fe fc05 	bl	800050c <GPIO_PinAFConfig>

  //Aktiver s� USART1
    USART_Cmd(USART2, ENABLE);
 8001d02:	2101      	movs	r1, #1
 8001d04:	4804      	ldr	r0, [pc, #16]	@ (8001d18 <USART2_oppstart+0xb8>)
 8001d06:	f7ff fb0c 	bl	8001322 <USART_Cmd>

  //Send til slutt her velkomst via UART/USB-modul
	USART2_skriv_streng((uint8_t *)"--\nSTM32F3 er klar!\n\r");  // Ny linje og retur til linjestart etterp�.
 8001d0a:	4804      	ldr	r0, [pc, #16]	@ (8001d1c <USART2_oppstart+0xbc>)
 8001d0c:	f000 f836 	bl	8001d7c <USART2_skriv_streng>
}
 8001d10:	bf00      	nop
 8001d12:	3730      	adds	r7, #48	@ 0x30
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	40004400 	.word	0x40004400
 8001d1c:	08002720 	.word	0x08002720

08001d20 <USART2_les>:
    return (uint8_t)USART_ReceiveData(USART2);
}


uint8_t USART2_les(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
   if ( USART_GetFlagStatus(USART2, USART_FLAG_RXNE) != RESET)
 8001d24:	2120      	movs	r1, #32
 8001d26:	4807      	ldr	r0, [pc, #28]	@ (8001d44 <USART2_les+0x24>)
 8001d28:	f7ff fb39 	bl	800139e <USART_GetFlagStatus>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d005      	beq.n	8001d3e <USART2_les+0x1e>
        {
	   return (uint8_t)USART_ReceiveData(USART2);
 8001d32:	4804      	ldr	r0, [pc, #16]	@ (8001d44 <USART2_les+0x24>)
 8001d34:	f7ff fb23 	bl	800137e <USART_ReceiveData>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	e000      	b.n	8001d40 <USART2_les+0x20>
   }
   else {
       return (uint8_t)0x00;
 8001d3e:	2300      	movs	r3, #0
   }
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	40004400 	.word	0x40004400

08001d48 <USART2_skriv>:

void USART2_skriv(uint8_t data)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	4603      	mov	r3, r0
 8001d50:	71fb      	strb	r3, [r7, #7]
    USART_SendData(USART2, (uint8_t) data); //Loop until the end of transmission
 8001d52:	79fb      	ldrb	r3, [r7, #7]
 8001d54:	b29b      	uxth	r3, r3
 8001d56:	4619      	mov	r1, r3
 8001d58:	4807      	ldr	r0, [pc, #28]	@ (8001d78 <USART2_skriv+0x30>)
 8001d5a:	f7ff fafe 	bl	800135a <USART_SendData>
    while(USART_GetFlagStatus(USART2, USART_FLAG_TC) == RESET)
 8001d5e:	bf00      	nop
 8001d60:	2140      	movs	r1, #64	@ 0x40
 8001d62:	4805      	ldr	r0, [pc, #20]	@ (8001d78 <USART2_skriv+0x30>)
 8001d64:	f7ff fb1b 	bl	800139e <USART_GetFlagStatus>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d0f8      	beq.n	8001d60 <USART2_skriv+0x18>
        {
        ;
        }

}
 8001d6e:	bf00      	nop
 8001d70:	bf00      	nop
 8001d72:	3708      	adds	r7, #8
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	40004400 	.word	0x40004400

08001d7c <USART2_skriv_streng>:
void USART2_skriv_streng(uint8_t *streng)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
    while( *streng != 0) {   // Skriv ut ein 0-terminert tekststreng
 8001d84:	e007      	b.n	8001d96 <USART2_skriv_streng+0x1a>
    	USART2_skriv(*streng);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff ffdc 	bl	8001d48 <USART2_skriv>
    	streng++;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	3301      	adds	r3, #1
 8001d94:	607b      	str	r3, [r7, #4]
    while( *streng != 0) {   // Skriv ut ein 0-terminert tekststreng
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d1f3      	bne.n	8001d86 <USART2_skriv_streng+0xa>
    }
}
 8001d9e:	bf00      	nop
 8001da0:	bf00      	nop
 8001da2:	3708      	adds	r7, #8
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <USART2_send_tid8_og_data16x3>:
	USART2_skriv((uint8_t)(hex2ascii_tabell[(data2 & 0x000F)]));
	USART2_skriv((uint8_t)(hex2ascii_tabell[(data1 & 0x000F)]));
	USART2_skriv((uint8_t)(hex2ascii_tabell[(data0 & 0x000F)])); // Send LS Hex-siffer av dei 16 bitane
}

void USART2_send_tid8_og_data16x3(uint8_t tid, int16_t loggeverdi1, int16_t loggeverdi2, int16_t loggeverdi3)  {
 8001da8:	b590      	push	{r4, r7, lr}
 8001daa:	b087      	sub	sp, #28
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	4604      	mov	r4, r0
 8001db0:	4608      	mov	r0, r1
 8001db2:	4611      	mov	r1, r2
 8001db4:	461a      	mov	r2, r3
 8001db6:	4623      	mov	r3, r4
 8001db8:	71fb      	strb	r3, [r7, #7]
 8001dba:	4603      	mov	r3, r0
 8001dbc:	80bb      	strh	r3, [r7, #4]
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	807b      	strh	r3, [r7, #2]
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	803b      	strh	r3, [r7, #0]
	uint8_t tid0, tid1;
    int16_t data0, data1, data2, data3;

    tid0 = tid;
 8001dc6:	79fb      	ldrb	r3, [r7, #7]
 8001dc8:	75fb      	strb	r3, [r7, #23]
    tid1 = tid0 >> 4;
 8001dca:	7dfb      	ldrb	r3, [r7, #23]
 8001dcc:	091b      	lsrs	r3, r3, #4
 8001dce:	75bb      	strb	r3, [r7, #22]

	USART2_skriv('T');
 8001dd0:	2054      	movs	r0, #84	@ 0x54
 8001dd2:	f7ff ffb9 	bl	8001d48 <USART2_skriv>
	USART2_skriv((uint8_t)(hex2ascii_tabell[(tid1 & 0x0F)]));   // Send MS Hex-siffer av ein tidsbyten
 8001dd6:	7dbb      	ldrb	r3, [r7, #22]
 8001dd8:	f003 030f 	and.w	r3, r3, #15
 8001ddc:	4a51      	ldr	r2, [pc, #324]	@ (8001f24 <USART2_send_tid8_og_data16x3+0x17c>)
 8001dde:	5cd3      	ldrb	r3, [r2, r3]
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7ff ffb1 	bl	8001d48 <USART2_skriv>
	USART2_skriv((uint8_t)(hex2ascii_tabell[(tid0 & 0x0F)])); // Send LS Hex-siffer av ein tidsbyten
 8001de6:	7dfb      	ldrb	r3, [r7, #23]
 8001de8:	f003 030f 	and.w	r3, r3, #15
 8001dec:	4a4d      	ldr	r2, [pc, #308]	@ (8001f24 <USART2_send_tid8_og_data16x3+0x17c>)
 8001dee:	5cd3      	ldrb	r3, [r2, r3]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff ffa9 	bl	8001d48 <USART2_skriv>

	data0 = loggeverdi1; //
 8001df6:	88bb      	ldrh	r3, [r7, #4]
 8001df8:	82bb      	strh	r3, [r7, #20]
	data1 = data0 >> 4; // Under skifting er det viktig at forteiknet blir med, difor int.
 8001dfa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001dfe:	111b      	asrs	r3, r3, #4
 8001e00:	827b      	strh	r3, [r7, #18]
	data2 = data1 >> 4;
 8001e02:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001e06:	111b      	asrs	r3, r3, #4
 8001e08:	823b      	strh	r3, [r7, #16]
	data3 = data2 >> 4;
 8001e0a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001e0e:	111b      	asrs	r3, r3, #4
 8001e10:	81fb      	strh	r3, [r7, #14]

	USART2_skriv('X');            // L for loggedata
 8001e12:	2058      	movs	r0, #88	@ 0x58
 8001e14:	f7ff ff98 	bl	8001d48 <USART2_skriv>
	USART2_skriv((uint8_t)(hex2ascii_tabell[(data3 & 0x000F)])); // Send MS Hex-siffer av 16-bitsdata
 8001e18:	89fb      	ldrh	r3, [r7, #14]
 8001e1a:	f003 030f 	and.w	r3, r3, #15
 8001e1e:	4a41      	ldr	r2, [pc, #260]	@ (8001f24 <USART2_send_tid8_og_data16x3+0x17c>)
 8001e20:	5cd3      	ldrb	r3, [r2, r3]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7ff ff90 	bl	8001d48 <USART2_skriv>
	USART2_skriv((uint8_t)(hex2ascii_tabell[(data2 & 0x000F)]));
 8001e28:	8a3b      	ldrh	r3, [r7, #16]
 8001e2a:	f003 030f 	and.w	r3, r3, #15
 8001e2e:	4a3d      	ldr	r2, [pc, #244]	@ (8001f24 <USART2_send_tid8_og_data16x3+0x17c>)
 8001e30:	5cd3      	ldrb	r3, [r2, r3]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7ff ff88 	bl	8001d48 <USART2_skriv>
	USART2_skriv((uint8_t)(hex2ascii_tabell[(data1 & 0x000F)]));
 8001e38:	8a7b      	ldrh	r3, [r7, #18]
 8001e3a:	f003 030f 	and.w	r3, r3, #15
 8001e3e:	4a39      	ldr	r2, [pc, #228]	@ (8001f24 <USART2_send_tid8_og_data16x3+0x17c>)
 8001e40:	5cd3      	ldrb	r3, [r2, r3]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7ff ff80 	bl	8001d48 <USART2_skriv>
	USART2_skriv((uint8_t)(hex2ascii_tabell[(data0 & 0x000F)])); // Send LS Hex-siffer av dei 16 bitane
 8001e48:	8abb      	ldrh	r3, [r7, #20]
 8001e4a:	f003 030f 	and.w	r3, r3, #15
 8001e4e:	4a35      	ldr	r2, [pc, #212]	@ (8001f24 <USART2_send_tid8_og_data16x3+0x17c>)
 8001e50:	5cd3      	ldrb	r3, [r2, r3]
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7ff ff78 	bl	8001d48 <USART2_skriv>

	data0 = loggeverdi2; //
 8001e58:	887b      	ldrh	r3, [r7, #2]
 8001e5a:	82bb      	strh	r3, [r7, #20]
	data1 = data0 >> 4; // Under skifting er det viktig at forteiknet blir med, difor int.
 8001e5c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001e60:	111b      	asrs	r3, r3, #4
 8001e62:	827b      	strh	r3, [r7, #18]
	data2 = data1 >> 4;
 8001e64:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001e68:	111b      	asrs	r3, r3, #4
 8001e6a:	823b      	strh	r3, [r7, #16]
	data3 = data2 >> 4;
 8001e6c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001e70:	111b      	asrs	r3, r3, #4
 8001e72:	81fb      	strh	r3, [r7, #14]

	USART2_skriv('Y');            // L for loggedata
 8001e74:	2059      	movs	r0, #89	@ 0x59
 8001e76:	f7ff ff67 	bl	8001d48 <USART2_skriv>
	USART2_skriv((uint8_t)(hex2ascii_tabell[(data3 & 0x000F)])); // Send MS Hex-siffer av 16-bitsdata
 8001e7a:	89fb      	ldrh	r3, [r7, #14]
 8001e7c:	f003 030f 	and.w	r3, r3, #15
 8001e80:	4a28      	ldr	r2, [pc, #160]	@ (8001f24 <USART2_send_tid8_og_data16x3+0x17c>)
 8001e82:	5cd3      	ldrb	r3, [r2, r3]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff ff5f 	bl	8001d48 <USART2_skriv>
	USART2_skriv((uint8_t)(hex2ascii_tabell[(data2 & 0x000F)]));
 8001e8a:	8a3b      	ldrh	r3, [r7, #16]
 8001e8c:	f003 030f 	and.w	r3, r3, #15
 8001e90:	4a24      	ldr	r2, [pc, #144]	@ (8001f24 <USART2_send_tid8_og_data16x3+0x17c>)
 8001e92:	5cd3      	ldrb	r3, [r2, r3]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7ff ff57 	bl	8001d48 <USART2_skriv>
	USART2_skriv((uint8_t)(hex2ascii_tabell[(data1 & 0x000F)]));
 8001e9a:	8a7b      	ldrh	r3, [r7, #18]
 8001e9c:	f003 030f 	and.w	r3, r3, #15
 8001ea0:	4a20      	ldr	r2, [pc, #128]	@ (8001f24 <USART2_send_tid8_og_data16x3+0x17c>)
 8001ea2:	5cd3      	ldrb	r3, [r2, r3]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7ff ff4f 	bl	8001d48 <USART2_skriv>
	USART2_skriv((uint8_t)(hex2ascii_tabell[(data0 & 0x000F)])); // Send LS Hex-siffer av dei 16 bitane
 8001eaa:	8abb      	ldrh	r3, [r7, #20]
 8001eac:	f003 030f 	and.w	r3, r3, #15
 8001eb0:	4a1c      	ldr	r2, [pc, #112]	@ (8001f24 <USART2_send_tid8_og_data16x3+0x17c>)
 8001eb2:	5cd3      	ldrb	r3, [r2, r3]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7ff ff47 	bl	8001d48 <USART2_skriv>

	data0 = loggeverdi3; //
 8001eba:	883b      	ldrh	r3, [r7, #0]
 8001ebc:	82bb      	strh	r3, [r7, #20]
	data1 = data0 >> 4; // Under skifting er det viktig at forteiknet blir med, difor int.
 8001ebe:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001ec2:	111b      	asrs	r3, r3, #4
 8001ec4:	827b      	strh	r3, [r7, #18]
	data2 = data1 >> 4;
 8001ec6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001eca:	111b      	asrs	r3, r3, #4
 8001ecc:	823b      	strh	r3, [r7, #16]
	data3 = data2 >> 4;
 8001ece:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001ed2:	111b      	asrs	r3, r3, #4
 8001ed4:	81fb      	strh	r3, [r7, #14]

	USART2_skriv('Z');            // L for loggedata
 8001ed6:	205a      	movs	r0, #90	@ 0x5a
 8001ed8:	f7ff ff36 	bl	8001d48 <USART2_skriv>
	USART2_skriv((uint8_t)(hex2ascii_tabell[(data3 & 0x000F)])); // Send MS Hex-siffer av 16-bitsdata
 8001edc:	89fb      	ldrh	r3, [r7, #14]
 8001ede:	f003 030f 	and.w	r3, r3, #15
 8001ee2:	4a10      	ldr	r2, [pc, #64]	@ (8001f24 <USART2_send_tid8_og_data16x3+0x17c>)
 8001ee4:	5cd3      	ldrb	r3, [r2, r3]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7ff ff2e 	bl	8001d48 <USART2_skriv>
	USART2_skriv((uint8_t)(hex2ascii_tabell[(data2 & 0x000F)]));
 8001eec:	8a3b      	ldrh	r3, [r7, #16]
 8001eee:	f003 030f 	and.w	r3, r3, #15
 8001ef2:	4a0c      	ldr	r2, [pc, #48]	@ (8001f24 <USART2_send_tid8_og_data16x3+0x17c>)
 8001ef4:	5cd3      	ldrb	r3, [r2, r3]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7ff ff26 	bl	8001d48 <USART2_skriv>
	USART2_skriv((uint8_t)(hex2ascii_tabell[(data1 & 0x000F)]));
 8001efc:	8a7b      	ldrh	r3, [r7, #18]
 8001efe:	f003 030f 	and.w	r3, r3, #15
 8001f02:	4a08      	ldr	r2, [pc, #32]	@ (8001f24 <USART2_send_tid8_og_data16x3+0x17c>)
 8001f04:	5cd3      	ldrb	r3, [r2, r3]
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7ff ff1e 	bl	8001d48 <USART2_skriv>
	USART2_skriv((uint8_t)(hex2ascii_tabell[(data0 & 0x000F)])); // Send LS Hex-siffer av dei 16 bitane
 8001f0c:	8abb      	ldrh	r3, [r7, #20]
 8001f0e:	f003 030f 	and.w	r3, r3, #15
 8001f12:	4a04      	ldr	r2, [pc, #16]	@ (8001f24 <USART2_send_tid8_og_data16x3+0x17c>)
 8001f14:	5cd3      	ldrb	r3, [r2, r3]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7ff ff16 	bl	8001d48 <USART2_skriv>
}
 8001f1c:	bf00      	nop
 8001f1e:	371c      	adds	r7, #28
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd90      	pop	{r4, r7, pc}
 8001f24:	2000002c 	.word	0x2000002c

08001f28 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	4603      	mov	r3, r0
 8001f30:	6039      	str	r1, [r7, #0]
 8001f32:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8001f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	da0b      	bge.n	8001f54 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	b2da      	uxtb	r2, r3
 8001f40:	490c      	ldr	r1, [pc, #48]	@ (8001f74 <NVIC_SetPriority+0x4c>)
 8001f42:	79fb      	ldrb	r3, [r7, #7]
 8001f44:	f003 030f 	and.w	r3, r3, #15
 8001f48:	3b04      	subs	r3, #4
 8001f4a:	0112      	lsls	r2, r2, #4
 8001f4c:	b2d2      	uxtb	r2, r2
 8001f4e:	440b      	add	r3, r1
 8001f50:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8001f52:	e009      	b.n	8001f68 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	b2da      	uxtb	r2, r3
 8001f58:	4907      	ldr	r1, [pc, #28]	@ (8001f78 <NVIC_SetPriority+0x50>)
 8001f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5e:	0112      	lsls	r2, r2, #4
 8001f60:	b2d2      	uxtb	r2, r2
 8001f62:	440b      	add	r3, r1
 8001f64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001f68:	bf00      	nop
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr
 8001f74:	e000ed00 	.word	0xe000ed00
 8001f78:	e000e100 	.word	0xe000e100

08001f7c <avbrot_oppstart>:
// Funksjonsdeklarasjonar
//---------------------------------------

// Oppsett av avbrotssystemet
//-------------------------------------
void avbrot_oppstart(void) {
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	2320      	movs	r3, #32
 8001f84:	607b      	str	r3, [r7, #4]

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) static __INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) );
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f383 8811 	msr	BASEPRI, r3
}
 8001f8c:	bf00      	nop
//     __enable_irq(); // Ikkje nødvendig. Avbrota er ope etter Reset.(PRIMASK=0)
	                   // Funksjon for stenging: __disable_irq();
     __set_BASEPRI(0x20); // Alle avbrot med prioritetsverdi 2 el. høgare blir maskert vekk (dei 4 MSb gir pri-verdien).
                          // SysTick har fått avbrotsprioritet lik 1, sjå SysTick-fila.
//     __disable_irq();
}
 8001f8e:	bf00      	nop
 8001f90:	370c      	adds	r7, #12
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
	...

08001f9c <SysTick_oppstart>:


// Oppsett av SysTick-taimeren som realiserer fast tikk-intervall
//----------------------------------------------------------------
void SysTick_oppstart(void) {
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
 // Oppsett av SysTick
	count = 0;
 8001fa0:	4b0a      	ldr	r3, [pc, #40]	@ (8001fcc <SysTick_oppstart+0x30>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	801a      	strh	r2, [r3, #0]
  NVIC_SetPriority(SysTick_IRQn, 1); // 0-31 der 0 er h�gast
 8001fa6:	2101      	movs	r1, #1
 8001fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fac:	f7ff ffbc 	bl	8001f28 <NVIC_SetPriority>
  SysTick->CTRL = 0;  // Stopp teljaren
 8001fb0:	4b07      	ldr	r3, [pc, #28]	@ (8001fd0 <SysTick_oppstart+0x34>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	601a      	str	r2, [r3, #0]
  SysTick->LOAD = 72000;  // Startverdi gir 1 msek avbrotsintervall.
 8001fb6:	4b06      	ldr	r3, [pc, #24]	@ (8001fd0 <SysTick_oppstart+0x34>)
 8001fb8:	4a06      	ldr	r2, [pc, #24]	@ (8001fd4 <SysTick_oppstart+0x38>)
 8001fba:	605a      	str	r2, [r3, #4]
  SysTick->VAL = 0;  // Nullstill teljaren
 8001fbc:	4b04      	ldr	r3, [pc, #16]	@ (8001fd0 <SysTick_oppstart+0x34>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL = (SysTick_CTRL_ENABLE_Msk | SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_CLKSOURCE_Msk);
 8001fc2:	4b03      	ldr	r3, [pc, #12]	@ (8001fd0 <SysTick_oppstart+0x34>)
 8001fc4:	2207      	movs	r2, #7
 8001fc6:	601a      	str	r2, [r3, #0]
                                               // (0x7), Start teljaren, avbrot og intern klokke.
}
 8001fc8:	bf00      	nop
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	200000a2 	.word	0x200000a2
 8001fd0:	e000e010 	.word	0xe000e010
 8001fd4:	00011940 	.word	0x00011940

08001fd8 <SysTick_Handler>:

// Avbrotsmetode ("Interrupt Service Routine", ISR)
// for avbrot fraa SysTick-taimeren
//----------------------------------------------------------------
void SysTick_Handler(void) {
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
	uint8_t kommando = 0;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	71fb      	strb	r3, [r7, #7]

	tikkteljar_avprelling++;
 8001fe2:	4b3e      	ldr	r3, [pc, #248]	@ (80020dc <SysTick_Handler+0x104>)
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	b2da      	uxtb	r2, r3
 8001fea:	4b3c      	ldr	r3, [pc, #240]	@ (80020dc <SysTick_Handler+0x104>)
 8001fec:	701a      	strb	r2, [r3, #0]
	if(tikkteljar_avprelling >= 10) { //Har det gått 10 x 1 millisek sidan siste
 8001fee:	4b3b      	ldr	r3, [pc, #236]	@ (80020dc <SysTick_Handler+0x104>)
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	2b09      	cmp	r3, #9
 8001ff4:	d904      	bls.n	8002000 <SysTick_Handler+0x28>
		                              // brytaravlesing, så les brytarnivå og sjekk om
		GPIO_sjekk_brytar();          // det er eit nytt gyldig trykk.
 8001ff6:	f7ff fc37 	bl	8001868 <GPIO_sjekk_brytar>
		tikkteljar_avprelling = 0;
 8001ffa:	4b38      	ldr	r3, [pc, #224]	@ (80020dc <SysTick_Handler+0x104>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	701a      	strb	r2, [r3, #0]
	}

	tikkteljar_sampling++;
 8002000:	4b37      	ldr	r3, [pc, #220]	@ (80020e0 <SysTick_Handler+0x108>)
 8002002:	881b      	ldrh	r3, [r3, #0]
 8002004:	3301      	adds	r3, #1
 8002006:	b29a      	uxth	r2, r3
 8002008:	4b35      	ldr	r3, [pc, #212]	@ (80020e0 <SysTick_Handler+0x108>)
 800200a:	801a      	strh	r2, [r3, #0]
	if(tikkteljar_sampling >= 10) { //Har det gått 10 millisek sidan sist, skal det utførast ny måling.
 800200c:	4b34      	ldr	r3, [pc, #208]	@ (80020e0 <SysTick_Handler+0x108>)
 800200e:	881b      	ldrh	r3, [r3, #0]
 8002010:	2b09      	cmp	r3, #9
 8002012:	d917      	bls.n	8002044 <SysTick_Handler+0x6c>

		ny_maaling = 1;
 8002014:	4b33      	ldr	r3, [pc, #204]	@ (80020e4 <SysTick_Handler+0x10c>)
 8002016:	2201      	movs	r2, #1
 8002018:	701a      	strb	r2, [r3, #0]
		tikkteljar_sampling = 0;
 800201a:	4b31      	ldr	r3, [pc, #196]	@ (80020e0 <SysTick_Handler+0x108>)
 800201c:	2200      	movs	r2, #0
 800201e:	801a      	strh	r2, [r3, #0]
		  //Når brukaren gir "køyr"-signal frå PC-sida, skal målingane sendast
												 //med tidsreferanse til UART/USB-grensesnittet.

		tikkteljar_uartkomm++;
 8002020:	4b31      	ldr	r3, [pc, #196]	@ (80020e8 <SysTick_Handler+0x110>)
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	b2db      	uxtb	r3, r3
 8002026:	3301      	adds	r3, #1
 8002028:	b2da      	uxtb	r2, r3
 800202a:	4b2f      	ldr	r3, [pc, #188]	@ (80020e8 <SysTick_Handler+0x110>)
 800202c:	701a      	strb	r2, [r3, #0]
		if(tikkteljar_uartkomm >= 10) { //Kvar tiande måling skal
 800202e:	4b2e      	ldr	r3, [pc, #184]	@ (80020e8 <SysTick_Handler+0x110>)
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	b2db      	uxtb	r3, r3
 8002034:	2b09      	cmp	r3, #9
 8002036:	d905      	bls.n	8002044 <SysTick_Handler+0x6c>
					                    // sendast med tidsreferanse til UART/USB, så gi melding til
			send_maaling = 1;          //hovudprogrammet om å køyra ny sending.
 8002038:	4b2c      	ldr	r3, [pc, #176]	@ (80020ec <SysTick_Handler+0x114>)
 800203a:	2201      	movs	r2, #1
 800203c:	701a      	strb	r2, [r3, #0]
			tikkteljar_uartkomm = 0;
 800203e:	4b2a      	ldr	r3, [pc, #168]	@ (80020e8 <SysTick_Handler+0x110>)
 8002040:	2200      	movs	r2, #0
 8002042:	701a      	strb	r2, [r3, #0]
		}

	}

	count++;
 8002044:	4b2a      	ldr	r3, [pc, #168]	@ (80020f0 <SysTick_Handler+0x118>)
 8002046:	f9b3 3000 	ldrsh.w	r3, [r3]
 800204a:	b29b      	uxth	r3, r3
 800204c:	3301      	adds	r3, #1
 800204e:	b29b      	uxth	r3, r3
 8002050:	b21a      	sxth	r2, r3
 8002052:	4b27      	ldr	r3, [pc, #156]	@ (80020f0 <SysTick_Handler+0x118>)
 8002054:	801a      	strh	r2, [r3, #0]
	USART2_skriv((uint8_t)(count & 0xFF)); // Send LSB
 8002056:	4b26      	ldr	r3, [pc, #152]	@ (80020f0 <SysTick_Handler+0x118>)
 8002058:	f9b3 3000 	ldrsh.w	r3, [r3]
 800205c:	b2db      	uxtb	r3, r3
 800205e:	4618      	mov	r0, r3
 8002060:	f7ff fe72 	bl	8001d48 <USART2_skriv>
	USART2_skriv((uint8_t)(count >> 8));   // Send MSB
 8002064:	4b22      	ldr	r3, [pc, #136]	@ (80020f0 <SysTick_Handler+0x118>)
 8002066:	f9b3 3000 	ldrsh.w	r3, [r3]
 800206a:	121b      	asrs	r3, r3, #8
 800206c:	b21b      	sxth	r3, r3
 800206e:	b2db      	uxtb	r3, r3
 8002070:	4618      	mov	r0, r3
 8002072:	f7ff fe69 	bl	8001d48 <USART2_skriv>

	tikkteljar_diodar++;
 8002076:	4b1f      	ldr	r3, [pc, #124]	@ (80020f4 <SysTick_Handler+0x11c>)
 8002078:	881b      	ldrh	r3, [r3, #0]
 800207a:	3301      	adds	r3, #1
 800207c:	b29a      	uxth	r2, r3
 800207e:	4b1d      	ldr	r3, [pc, #116]	@ (80020f4 <SysTick_Handler+0x11c>)
 8002080:	801a      	strh	r2, [r3, #0]
	if(tikkteljar_diodar >= 200) { //Har det gått 200 x 1 millisek sidan siste
 8002082:	4b1c      	ldr	r3, [pc, #112]	@ (80020f4 <SysTick_Handler+0x11c>)
 8002084:	881b      	ldrh	r3, [r3, #0]
 8002086:	2bc7      	cmp	r3, #199	@ 0xc7
 8002088:	d905      	bls.n	8002096 <SysTick_Handler+0xbe>
			                              // oppdatering av diodebitane), så gi melding til

		oppdater_diodar = 1;          //tilstandsmaskinsmetoden.
 800208a:	4b1b      	ldr	r3, [pc, #108]	@ (80020f8 <SysTick_Handler+0x120>)
 800208c:	2201      	movs	r2, #1
 800208e:	701a      	strb	r2, [r3, #0]
		tikkteljar_diodar = 0;
 8002090:	4b18      	ldr	r3, [pc, #96]	@ (80020f4 <SysTick_Handler+0x11c>)
 8002092:	2200      	movs	r2, #0
 8002094:	801a      	strh	r2, [r3, #0]
	}

	GPIOC->ODR = GPIOC->ODR ^ GPIO_Pin_6; // Blinkesignal ut paa testpinne (PC6).
 8002096:	4b19      	ldr	r3, [pc, #100]	@ (80020fc <SysTick_Handler+0x124>)
 8002098:	8a9b      	ldrh	r3, [r3, #20]
 800209a:	b29b      	uxth	r3, r3
 800209c:	4a17      	ldr	r2, [pc, #92]	@ (80020fc <SysTick_Handler+0x124>)
 800209e:	f083 0340 	eor.w	r3, r3, #64	@ 0x40
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	8293      	strh	r3, [r2, #20]

  //Sjekk om det er ny kommando fr� tastatur
	kommando = USART2_les();
 80020a6:	f7ff fe3b 	bl	8001d20 <USART2_les>
 80020aa:	4603      	mov	r3, r0
 80020ac:	71fb      	strb	r3, [r7, #7]
	if( kommando == 'k')  {  //Køyr i gong sending av målingane til loggaren
 80020ae:	79fb      	ldrb	r3, [r7, #7]
 80020b0:	2b6b      	cmp	r3, #107	@ 0x6b
 80020b2:	d105      	bne.n	80020c0 <SysTick_Handler+0xe8>
		send_maalingar_til_loggar = 1;
 80020b4:	4b12      	ldr	r3, [pc, #72]	@ (8002100 <SysTick_Handler+0x128>)
 80020b6:	2201      	movs	r2, #1
 80020b8:	701a      	strb	r2, [r3, #0]
		legg_til_meldingshovud = 1; //Aller først skal hovudprogrammet leggja til STX
 80020ba:	4b12      	ldr	r3, [pc, #72]	@ (8002104 <SysTick_Handler+0x12c>)
 80020bc:	2201      	movs	r2, #1
 80020be:	701a      	strb	r2, [r3, #0]

	}
	if( kommando == 's')  {  //Stopp sending av målingane til loggaren
 80020c0:	79fb      	ldrb	r3, [r7, #7]
 80020c2:	2b73      	cmp	r3, #115	@ 0x73
 80020c4:	d105      	bne.n	80020d2 <SysTick_Handler+0xfa>
		send_maalingar_til_loggar = 0;
 80020c6:	4b0e      	ldr	r3, [pc, #56]	@ (8002100 <SysTick_Handler+0x128>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	701a      	strb	r2, [r3, #0]
		legg_til_meldingshale = 1;
 80020cc:	4b0e      	ldr	r3, [pc, #56]	@ (8002108 <SysTick_Handler+0x130>)
 80020ce:	2201      	movs	r2, #1
 80020d0:	701a      	strb	r2, [r3, #0]

	}


}
 80020d2:	bf00      	nop
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	2000006d 	.word	0x2000006d
 80020e0:	20000074 	.word	0x20000074
 80020e4:	20000077 	.word	0x20000077
 80020e8:	200000a0 	.word	0x200000a0
 80020ec:	2000009d 	.word	0x2000009d
 80020f0:	200000a2 	.word	0x200000a2
 80020f4:	2000006e 	.word	0x2000006e
 80020f8:	20000070 	.word	0x20000070
 80020fc:	48000800 	.word	0x48000800
 8002100:	2000009c 	.word	0x2000009c
 8002104:	2000009e 	.word	0x2000009e
 8002108:	2000009f 	.word	0x2000009f

0800210c <maskinvare_init>:

//---------------------------------------
// Funksjonsdeklarasjonar
//---------------------------------------

void maskinvare_init(void) {
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
	GPIO_oppstart();
 8002110:	f7ff fb50 	bl	80017b4 <GPIO_oppstart>
	SPI1_oppstart();
 8002114:	f7ff fbf0 	bl	80018f8 <SPI1_oppstart>
	SPI2_oppstart();
 8002118:	f7ff fca0 	bl	8001a5c <SPI2_oppstart>
	Exp_click_sokkel1_oppstart();
 800211c:	f7ff fd06 	bl	8001b2c <Exp_click_sokkel1_oppstart>
	aks_oppstart();
 8002120:	f7ff fbc4 	bl	80018ac <aks_oppstart>
	gyro_oppstart();
 8002124:	f7ff fc58 	bl	80019d8 <gyro_oppstart>
 	USART2_oppstart();
 8002128:	f7ff fd9a 	bl	8001c60 <USART2_oppstart>
	TIM_oppstart();
 800212c:	f7ff fd48 	bl	8001bc0 <TIM_oppstart>
	SysTick_oppstart();
 8002130:	f7ff ff34 	bl	8001f9c <SysTick_oppstart>
	avbrot_oppstart();
 8002134:	f7ff ff22 	bl	8001f7c <avbrot_oppstart>

}
 8002138:	bf00      	nop
 800213a:	bd80      	pop	{r7, pc}

0800213c <LSM303DLHC_AccInit>:
  * @param  LSM303DLHC_InitStruct: pointer to a LSM303DLHC_InitTypeDef structure 
  *         that contains the configuration setting for the LSM303DLHC.
  * @retval None
  */
void LSM303DLHC_AccInit(LSM303DLHCAcc_InitTypeDef *LSM303DLHC_InitStruct)
{  
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  uint8_t ctrl1 = 0x00, ctrl4 = 0x00;
 8002144:	2300      	movs	r3, #0
 8002146:	73fb      	strb	r3, [r7, #15]
 8002148:	2300      	movs	r3, #0
 800214a:	73bb      	strb	r3, [r7, #14]
  
  /* Configure the low level interface ---------------------------------------*/
  LSM303DLHC_LowLevel_Init();
 800214c:	f000 f9e0 	bl	8002510 <LSM303DLHC_LowLevel_Init>
  
  /* Configure MEMS: data rate, power mode, full scale and axes */
  ctrl1 |= (uint8_t) (LSM303DLHC_InitStruct->Power_Mode | LSM303DLHC_InitStruct->AccOutput_DataRate | \
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	781a      	ldrb	r2, [r3, #0]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	785b      	ldrb	r3, [r3, #1]
 8002158:	4313      	orrs	r3, r2
 800215a:	b2da      	uxtb	r2, r3
                    LSM303DLHC_InitStruct->Axes_Enable);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	789b      	ldrb	r3, [r3, #2]
  ctrl1 |= (uint8_t) (LSM303DLHC_InitStruct->Power_Mode | LSM303DLHC_InitStruct->AccOutput_DataRate | \
 8002160:	4313      	orrs	r3, r2
 8002162:	b2da      	uxtb	r2, r3
 8002164:	7bfb      	ldrb	r3, [r7, #15]
 8002166:	4313      	orrs	r3, r2
 8002168:	b2db      	uxtb	r3, r3
 800216a:	73fb      	strb	r3, [r7, #15]
  
  ctrl4 |= (uint8_t) (LSM303DLHC_InitStruct->BlockData_Update | LSM303DLHC_InitStruct->Endianness | \
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	791a      	ldrb	r2, [r3, #4]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	795b      	ldrb	r3, [r3, #5]
 8002174:	4313      	orrs	r3, r2
 8002176:	b2da      	uxtb	r2, r3
                    LSM303DLHC_InitStruct->AccFull_Scale|LSM303DLHC_InitStruct->High_Resolution);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	799b      	ldrb	r3, [r3, #6]
  ctrl4 |= (uint8_t) (LSM303DLHC_InitStruct->BlockData_Update | LSM303DLHC_InitStruct->Endianness | \
 800217c:	4313      	orrs	r3, r2
 800217e:	b2da      	uxtb	r2, r3
                    LSM303DLHC_InitStruct->AccFull_Scale|LSM303DLHC_InitStruct->High_Resolution);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	78db      	ldrb	r3, [r3, #3]
  ctrl4 |= (uint8_t) (LSM303DLHC_InitStruct->BlockData_Update | LSM303DLHC_InitStruct->Endianness | \
 8002184:	4313      	orrs	r3, r2
 8002186:	b2da      	uxtb	r2, r3
 8002188:	7bbb      	ldrb	r3, [r7, #14]
 800218a:	4313      	orrs	r3, r2
 800218c:	b2db      	uxtb	r3, r3
 800218e:	73bb      	strb	r3, [r7, #14]
                    
  /* Write value to ACC MEMS CTRL_REG1 regsister */
  LSM303DLHC_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG1_A, &ctrl1);
 8002190:	f107 030f 	add.w	r3, r7, #15
 8002194:	461a      	mov	r2, r3
 8002196:	2120      	movs	r1, #32
 8002198:	2032      	movs	r0, #50	@ 0x32
 800219a:	f000 f847 	bl	800222c <LSM303DLHC_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 regsister */
  LSM303DLHC_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A, &ctrl4);
 800219e:	f107 030e 	add.w	r3, r7, #14
 80021a2:	461a      	mov	r2, r3
 80021a4:	2123      	movs	r1, #35	@ 0x23
 80021a6:	2032      	movs	r0, #50	@ 0x32
 80021a8:	f000 f840 	bl	800222c <LSM303DLHC_Write>
}
 80021ac:	bf00      	nop
 80021ae:	3710      	adds	r7, #16
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <LSM303DLHC_MagInit>:
  * @param  LSM303DLHC_InitStruct: pointer to a LSM303DLHC_MagInitTypeDef structure 
  *         that contains the configuration setting for the LSM303DLHC.
  * @retval None
  */
void LSM303DLHC_MagInit(LSM303DLHCMag_InitTypeDef *LSM303DLHC_InitStruct)
{  
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  uint8_t cra_regm = 0x00, crb_regm = 0x00, mr_regm = 0x00;
 80021bc:	2300      	movs	r3, #0
 80021be:	73fb      	strb	r3, [r7, #15]
 80021c0:	2300      	movs	r3, #0
 80021c2:	73bb      	strb	r3, [r7, #14]
 80021c4:	2300      	movs	r3, #0
 80021c6:	737b      	strb	r3, [r7, #13]
  
  /* Configure the low level interface ---------------------------------------*/
  LSM303DLHC_LowLevel_Init();
 80021c8:	f000 f9a2 	bl	8002510 <LSM303DLHC_LowLevel_Init>
  
  /* Configure MEMS: temp and Data rate */
  cra_regm |= (uint8_t) (LSM303DLHC_InitStruct->Temperature_Sensor | LSM303DLHC_InitStruct->MagOutput_DataRate);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	781a      	ldrb	r2, [r3, #0]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	785b      	ldrb	r3, [r3, #1]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	b2da      	uxtb	r2, r3
 80021d8:	7bfb      	ldrb	r3, [r7, #15]
 80021da:	4313      	orrs	r3, r2
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	73fb      	strb	r3, [r7, #15]
    
  /* Configure MEMS: full Scale */
  crb_regm |= (uint8_t) (LSM303DLHC_InitStruct->MagFull_Scale);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	78da      	ldrb	r2, [r3, #3]
 80021e4:	7bbb      	ldrb	r3, [r7, #14]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	73bb      	strb	r3, [r7, #14]
      
  /* Configure MEMS: working mode */
  mr_regm |= (uint8_t) (LSM303DLHC_InitStruct->Working_Mode);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	789a      	ldrb	r2, [r3, #2]
 80021f0:	7b7b      	ldrb	r3, [r7, #13]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	737b      	strb	r3, [r7, #13]
                    
  /* Write value to Mag MEMS CRA_REG regsister */
  LSM303DLHC_Write(MAG_I2C_ADDRESS, LSM303DLHC_CRA_REG_M, &cra_regm);
 80021f8:	f107 030f 	add.w	r3, r7, #15
 80021fc:	461a      	mov	r2, r3
 80021fe:	2100      	movs	r1, #0
 8002200:	203c      	movs	r0, #60	@ 0x3c
 8002202:	f000 f813 	bl	800222c <LSM303DLHC_Write>
  
  /* Write value to Mag MEMS CRB_REG regsister */
  LSM303DLHC_Write(MAG_I2C_ADDRESS, LSM303DLHC_CRB_REG_M, &crb_regm);
 8002206:	f107 030e 	add.w	r3, r7, #14
 800220a:	461a      	mov	r2, r3
 800220c:	2101      	movs	r1, #1
 800220e:	203c      	movs	r0, #60	@ 0x3c
 8002210:	f000 f80c 	bl	800222c <LSM303DLHC_Write>

  /* Write value to Mag MEMS MR_REG regsister */
  LSM303DLHC_Write(MAG_I2C_ADDRESS, LSM303DLHC_MR_REG_M, &mr_regm);
 8002214:	f107 030d 	add.w	r3, r7, #13
 8002218:	461a      	mov	r2, r3
 800221a:	2102      	movs	r1, #2
 800221c:	203c      	movs	r0, #60	@ 0x3c
 800221e:	f000 f805 	bl	800222c <LSM303DLHC_Write>
}
 8002222:	bf00      	nop
 8002224:	3710      	adds	r7, #16
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
	...

0800222c <LSM303DLHC_Write>:
  * @param  RegAddr : specifies the LSM303DLHC register to be written.
  * @param  pBuffer : pointer to the buffer  containing the data to be written to the LSM303DLH.
  * @retval LSM303DLHC Status
  */
uint16_t LSM303DLHC_Write(uint8_t DeviceAddr, uint8_t RegAddr, uint8_t* pBuffer)
{  
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af02      	add	r7, sp, #8
 8002232:	4603      	mov	r3, r0
 8002234:	603a      	str	r2, [r7, #0]
 8002236:	71fb      	strb	r3, [r7, #7]
 8002238:	460b      	mov	r3, r1
 800223a:	71bb      	strb	r3, [r7, #6]
  /* Test on BUSY Flag */
  LSM303DLHC_Timeout = LSM303DLHC_LONG_TIMEOUT;
 800223c:	4b50      	ldr	r3, [pc, #320]	@ (8002380 <LSM303DLHC_Write+0x154>)
 800223e:	f44f 4220 	mov.w	r2, #40960	@ 0xa000
 8002242:	601a      	str	r2, [r3, #0]
  while(I2C_GetFlagStatus(LSM303DLHC_I2C, I2C_ISR_BUSY) != RESET)
 8002244:	e00b      	b.n	800225e <LSM303DLHC_Write+0x32>
  {
    if((LSM303DLHC_Timeout--) == 0) return LSM303DLHC_TIMEOUT_UserCallback();
 8002246:	4b4e      	ldr	r3, [pc, #312]	@ (8002380 <LSM303DLHC_Write+0x154>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	1e5a      	subs	r2, r3, #1
 800224c:	494c      	ldr	r1, [pc, #304]	@ (8002380 <LSM303DLHC_Write+0x154>)
 800224e:	600a      	str	r2, [r1, #0]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d104      	bne.n	800225e <LSM303DLHC_Write+0x32>
 8002254:	f000 fa06 	bl	8002664 <LSM303DLHC_TIMEOUT_UserCallback>
 8002258:	4603      	mov	r3, r0
 800225a:	b29b      	uxth	r3, r3
 800225c:	e08c      	b.n	8002378 <LSM303DLHC_Write+0x14c>
  while(I2C_GetFlagStatus(LSM303DLHC_I2C, I2C_ISR_BUSY) != RESET)
 800225e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002262:	4848      	ldr	r0, [pc, #288]	@ (8002384 <LSM303DLHC_Write+0x158>)
 8002264:	f7fe fa66 	bl	8000734 <I2C_GetFlagStatus>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d1eb      	bne.n	8002246 <LSM303DLHC_Write+0x1a>
  }
  
  /* Configure slave address, nbytes, reload, end mode and start or stop generation */
  I2C_TransferHandling(LSM303DLHC_I2C, DeviceAddr, 1, I2C_Reload_Mode, I2C_Generate_Start_Write);
 800226e:	79fb      	ldrb	r3, [r7, #7]
 8002270:	b299      	uxth	r1, r3
 8002272:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002276:	9300      	str	r3, [sp, #0]
 8002278:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800227c:	2201      	movs	r2, #1
 800227e:	4841      	ldr	r0, [pc, #260]	@ (8002384 <LSM303DLHC_Write+0x158>)
 8002280:	f7fe fa10 	bl	80006a4 <I2C_TransferHandling>
  
  /* Wait until TXIS flag is set */
  LSM303DLHC_Timeout = LSM303DLHC_LONG_TIMEOUT;  
 8002284:	4b3e      	ldr	r3, [pc, #248]	@ (8002380 <LSM303DLHC_Write+0x154>)
 8002286:	f44f 4220 	mov.w	r2, #40960	@ 0xa000
 800228a:	601a      	str	r2, [r3, #0]
  while(I2C_GetFlagStatus(LSM303DLHC_I2C, I2C_ISR_TXIS) == RESET)   
 800228c:	e00b      	b.n	80022a6 <LSM303DLHC_Write+0x7a>
  {
    if((LSM303DLHC_Timeout--) == 0) return LSM303DLHC_TIMEOUT_UserCallback();
 800228e:	4b3c      	ldr	r3, [pc, #240]	@ (8002380 <LSM303DLHC_Write+0x154>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	1e5a      	subs	r2, r3, #1
 8002294:	493a      	ldr	r1, [pc, #232]	@ (8002380 <LSM303DLHC_Write+0x154>)
 8002296:	600a      	str	r2, [r1, #0]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d104      	bne.n	80022a6 <LSM303DLHC_Write+0x7a>
 800229c:	f000 f9e2 	bl	8002664 <LSM303DLHC_TIMEOUT_UserCallback>
 80022a0:	4603      	mov	r3, r0
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	e068      	b.n	8002378 <LSM303DLHC_Write+0x14c>
  while(I2C_GetFlagStatus(LSM303DLHC_I2C, I2C_ISR_TXIS) == RESET)   
 80022a6:	2102      	movs	r1, #2
 80022a8:	4836      	ldr	r0, [pc, #216]	@ (8002384 <LSM303DLHC_Write+0x158>)
 80022aa:	f7fe fa43 	bl	8000734 <I2C_GetFlagStatus>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d0ec      	beq.n	800228e <LSM303DLHC_Write+0x62>
  }
  
  /* Send Register address */
  I2C_SendData(LSM303DLHC_I2C, (uint8_t) RegAddr);
 80022b4:	79bb      	ldrb	r3, [r7, #6]
 80022b6:	4619      	mov	r1, r3
 80022b8:	4832      	ldr	r0, [pc, #200]	@ (8002384 <LSM303DLHC_Write+0x158>)
 80022ba:	f7fe fa1f 	bl	80006fc <I2C_SendData>
  
  /* Wait until TCR flag is set */
  LSM303DLHC_Timeout = LSM303DLHC_LONG_TIMEOUT;
 80022be:	4b30      	ldr	r3, [pc, #192]	@ (8002380 <LSM303DLHC_Write+0x154>)
 80022c0:	f44f 4220 	mov.w	r2, #40960	@ 0xa000
 80022c4:	601a      	str	r2, [r3, #0]
  while(I2C_GetFlagStatus(LSM303DLHC_I2C, I2C_ISR_TCR) == RESET)
 80022c6:	e00b      	b.n	80022e0 <LSM303DLHC_Write+0xb4>
  {
    if((LSM303DLHC_Timeout--) == 0) return LSM303DLHC_TIMEOUT_UserCallback();
 80022c8:	4b2d      	ldr	r3, [pc, #180]	@ (8002380 <LSM303DLHC_Write+0x154>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	1e5a      	subs	r2, r3, #1
 80022ce:	492c      	ldr	r1, [pc, #176]	@ (8002380 <LSM303DLHC_Write+0x154>)
 80022d0:	600a      	str	r2, [r1, #0]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d104      	bne.n	80022e0 <LSM303DLHC_Write+0xb4>
 80022d6:	f000 f9c5 	bl	8002664 <LSM303DLHC_TIMEOUT_UserCallback>
 80022da:	4603      	mov	r3, r0
 80022dc:	b29b      	uxth	r3, r3
 80022de:	e04b      	b.n	8002378 <LSM303DLHC_Write+0x14c>
  while(I2C_GetFlagStatus(LSM303DLHC_I2C, I2C_ISR_TCR) == RESET)
 80022e0:	2180      	movs	r1, #128	@ 0x80
 80022e2:	4828      	ldr	r0, [pc, #160]	@ (8002384 <LSM303DLHC_Write+0x158>)
 80022e4:	f7fe fa26 	bl	8000734 <I2C_GetFlagStatus>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d0ec      	beq.n	80022c8 <LSM303DLHC_Write+0x9c>
  }
  
  /* Configure slave address, nbytes, reload, end mode and start or stop generation */
  I2C_TransferHandling(LSM303DLHC_I2C, DeviceAddr, 1, I2C_AutoEnd_Mode, I2C_No_StartStop);
 80022ee:	79fb      	ldrb	r3, [r7, #7]
 80022f0:	b299      	uxth	r1, r3
 80022f2:	2300      	movs	r3, #0
 80022f4:	9300      	str	r3, [sp, #0]
 80022f6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80022fa:	2201      	movs	r2, #1
 80022fc:	4821      	ldr	r0, [pc, #132]	@ (8002384 <LSM303DLHC_Write+0x158>)
 80022fe:	f7fe f9d1 	bl	80006a4 <I2C_TransferHandling>
       
  /* Wait until TXIS flag is set */
  LSM303DLHC_Timeout = LSM303DLHC_LONG_TIMEOUT;
 8002302:	4b1f      	ldr	r3, [pc, #124]	@ (8002380 <LSM303DLHC_Write+0x154>)
 8002304:	f44f 4220 	mov.w	r2, #40960	@ 0xa000
 8002308:	601a      	str	r2, [r3, #0]
  while(I2C_GetFlagStatus(LSM303DLHC_I2C, I2C_ISR_TXIS) == RESET)
 800230a:	e00b      	b.n	8002324 <LSM303DLHC_Write+0xf8>
  {
    if((LSM303DLHC_Timeout--) == 0) return LSM303DLHC_TIMEOUT_UserCallback();
 800230c:	4b1c      	ldr	r3, [pc, #112]	@ (8002380 <LSM303DLHC_Write+0x154>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	1e5a      	subs	r2, r3, #1
 8002312:	491b      	ldr	r1, [pc, #108]	@ (8002380 <LSM303DLHC_Write+0x154>)
 8002314:	600a      	str	r2, [r1, #0]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d104      	bne.n	8002324 <LSM303DLHC_Write+0xf8>
 800231a:	f000 f9a3 	bl	8002664 <LSM303DLHC_TIMEOUT_UserCallback>
 800231e:	4603      	mov	r3, r0
 8002320:	b29b      	uxth	r3, r3
 8002322:	e029      	b.n	8002378 <LSM303DLHC_Write+0x14c>
  while(I2C_GetFlagStatus(LSM303DLHC_I2C, I2C_ISR_TXIS) == RESET)
 8002324:	2102      	movs	r1, #2
 8002326:	4817      	ldr	r0, [pc, #92]	@ (8002384 <LSM303DLHC_Write+0x158>)
 8002328:	f7fe fa04 	bl	8000734 <I2C_GetFlagStatus>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d0ec      	beq.n	800230c <LSM303DLHC_Write+0xe0>
  }  
    
  /* Write data to TXDR */
  I2C_SendData(LSM303DLHC_I2C, *pBuffer);
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	4619      	mov	r1, r3
 8002338:	4812      	ldr	r0, [pc, #72]	@ (8002384 <LSM303DLHC_Write+0x158>)
 800233a:	f7fe f9df 	bl	80006fc <I2C_SendData>
      
  /* Wait until STOPF flag is set */
  LSM303DLHC_Timeout = LSM303DLHC_LONG_TIMEOUT;
 800233e:	4b10      	ldr	r3, [pc, #64]	@ (8002380 <LSM303DLHC_Write+0x154>)
 8002340:	f44f 4220 	mov.w	r2, #40960	@ 0xa000
 8002344:	601a      	str	r2, [r3, #0]
  while(I2C_GetFlagStatus(LSM303DLHC_I2C, I2C_ISR_STOPF) == RESET)
 8002346:	e00b      	b.n	8002360 <LSM303DLHC_Write+0x134>
  {
    if((LSM303DLHC_Timeout--) == 0) return LSM303DLHC_TIMEOUT_UserCallback();
 8002348:	4b0d      	ldr	r3, [pc, #52]	@ (8002380 <LSM303DLHC_Write+0x154>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	1e5a      	subs	r2, r3, #1
 800234e:	490c      	ldr	r1, [pc, #48]	@ (8002380 <LSM303DLHC_Write+0x154>)
 8002350:	600a      	str	r2, [r1, #0]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d104      	bne.n	8002360 <LSM303DLHC_Write+0x134>
 8002356:	f000 f985 	bl	8002664 <LSM303DLHC_TIMEOUT_UserCallback>
 800235a:	4603      	mov	r3, r0
 800235c:	b29b      	uxth	r3, r3
 800235e:	e00b      	b.n	8002378 <LSM303DLHC_Write+0x14c>
  while(I2C_GetFlagStatus(LSM303DLHC_I2C, I2C_ISR_STOPF) == RESET)
 8002360:	2120      	movs	r1, #32
 8002362:	4808      	ldr	r0, [pc, #32]	@ (8002384 <LSM303DLHC_Write+0x158>)
 8002364:	f7fe f9e6 	bl	8000734 <I2C_GetFlagStatus>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d0ec      	beq.n	8002348 <LSM303DLHC_Write+0x11c>
  }   
  
  /* Clear STOPF flag */
  I2C_ClearFlag(LSM303DLHC_I2C, I2C_ICR_STOPCF);
 800236e:	2120      	movs	r1, #32
 8002370:	4804      	ldr	r0, [pc, #16]	@ (8002384 <LSM303DLHC_Write+0x158>)
 8002372:	f7fe f9fe 	bl	8000772 <I2C_ClearFlag>
  
  return LSM303DLHC_OK;
 8002376:	2300      	movs	r3, #0
}
 8002378:	4618      	mov	r0, r3
 800237a:	3708      	adds	r7, #8
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	2000004c 	.word	0x2000004c
 8002384:	40005400 	.word	0x40005400

08002388 <LSM303DLHC_Read>:
  * @param  pBuffer : pointer to the buffer that receives the data read from the LSM303DLH.
  * @param  NumByteToRead : number of bytes to read from the LSM303DLH ( NumByteToRead >1  only for the Mgnetometer readinf).
  * @retval LSM303DLHC register value
  */
uint16_t LSM303DLHC_Read(uint8_t DeviceAddr, uint8_t RegAddr, uint8_t* pBuffer, uint16_t NumByteToRead)
{    
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af02      	add	r7, sp, #8
 800238e:	603a      	str	r2, [r7, #0]
 8002390:	461a      	mov	r2, r3
 8002392:	4603      	mov	r3, r0
 8002394:	71fb      	strb	r3, [r7, #7]
 8002396:	460b      	mov	r3, r1
 8002398:	71bb      	strb	r3, [r7, #6]
 800239a:	4613      	mov	r3, r2
 800239c:	80bb      	strh	r3, [r7, #4]
  /* Test on BUSY Flag */
  LSM303DLHC_Timeout = LSM303DLHC_LONG_TIMEOUT;
 800239e:	4b5a      	ldr	r3, [pc, #360]	@ (8002508 <LSM303DLHC_Read+0x180>)
 80023a0:	f44f 4220 	mov.w	r2, #40960	@ 0xa000
 80023a4:	601a      	str	r2, [r3, #0]
  while(I2C_GetFlagStatus(LSM303DLHC_I2C, I2C_ISR_BUSY) != RESET)
 80023a6:	e00b      	b.n	80023c0 <LSM303DLHC_Read+0x38>
  {
    if((LSM303DLHC_Timeout--) == 0) return LSM303DLHC_TIMEOUT_UserCallback();
 80023a8:	4b57      	ldr	r3, [pc, #348]	@ (8002508 <LSM303DLHC_Read+0x180>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	1e5a      	subs	r2, r3, #1
 80023ae:	4956      	ldr	r1, [pc, #344]	@ (8002508 <LSM303DLHC_Read+0x180>)
 80023b0:	600a      	str	r2, [r1, #0]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d104      	bne.n	80023c0 <LSM303DLHC_Read+0x38>
 80023b6:	f000 f955 	bl	8002664 <LSM303DLHC_TIMEOUT_UserCallback>
 80023ba:	4603      	mov	r3, r0
 80023bc:	b29b      	uxth	r3, r3
 80023be:	e09f      	b.n	8002500 <LSM303DLHC_Read+0x178>
  while(I2C_GetFlagStatus(LSM303DLHC_I2C, I2C_ISR_BUSY) != RESET)
 80023c0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80023c4:	4851      	ldr	r0, [pc, #324]	@ (800250c <LSM303DLHC_Read+0x184>)
 80023c6:	f7fe f9b5 	bl	8000734 <I2C_GetFlagStatus>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d1eb      	bne.n	80023a8 <LSM303DLHC_Read+0x20>
  }
  
  /* Configure slave address, nbytes, reload, end mode and start or stop generation */
  I2C_TransferHandling(LSM303DLHC_I2C, DeviceAddr, 1, I2C_SoftEnd_Mode, I2C_Generate_Start_Write);
 80023d0:	79fb      	ldrb	r3, [r7, #7]
 80023d2:	b299      	uxth	r1, r3
 80023d4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80023d8:	9300      	str	r3, [sp, #0]
 80023da:	2300      	movs	r3, #0
 80023dc:	2201      	movs	r2, #1
 80023de:	484b      	ldr	r0, [pc, #300]	@ (800250c <LSM303DLHC_Read+0x184>)
 80023e0:	f7fe f960 	bl	80006a4 <I2C_TransferHandling>
  
  /* Wait until TXIS flag is set */
  LSM303DLHC_Timeout = LSM303DLHC_LONG_TIMEOUT;
 80023e4:	4b48      	ldr	r3, [pc, #288]	@ (8002508 <LSM303DLHC_Read+0x180>)
 80023e6:	f44f 4220 	mov.w	r2, #40960	@ 0xa000
 80023ea:	601a      	str	r2, [r3, #0]
  while(I2C_GetFlagStatus(LSM303DLHC_I2C, I2C_ISR_TXIS) == RESET)
 80023ec:	e00b      	b.n	8002406 <LSM303DLHC_Read+0x7e>
  {
    if((LSM303DLHC_Timeout--) == 0) return LSM303DLHC_TIMEOUT_UserCallback();
 80023ee:	4b46      	ldr	r3, [pc, #280]	@ (8002508 <LSM303DLHC_Read+0x180>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	1e5a      	subs	r2, r3, #1
 80023f4:	4944      	ldr	r1, [pc, #272]	@ (8002508 <LSM303DLHC_Read+0x180>)
 80023f6:	600a      	str	r2, [r1, #0]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d104      	bne.n	8002406 <LSM303DLHC_Read+0x7e>
 80023fc:	f000 f932 	bl	8002664 <LSM303DLHC_TIMEOUT_UserCallback>
 8002400:	4603      	mov	r3, r0
 8002402:	b29b      	uxth	r3, r3
 8002404:	e07c      	b.n	8002500 <LSM303DLHC_Read+0x178>
  while(I2C_GetFlagStatus(LSM303DLHC_I2C, I2C_ISR_TXIS) == RESET)
 8002406:	2102      	movs	r1, #2
 8002408:	4840      	ldr	r0, [pc, #256]	@ (800250c <LSM303DLHC_Read+0x184>)
 800240a:	f7fe f993 	bl	8000734 <I2C_GetFlagStatus>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d0ec      	beq.n	80023ee <LSM303DLHC_Read+0x66>
  }
  
  if(NumByteToRead>1)
 8002414:	88bb      	ldrh	r3, [r7, #4]
 8002416:	2b01      	cmp	r3, #1
 8002418:	d903      	bls.n	8002422 <LSM303DLHC_Read+0x9a>
      RegAddr |= 0x80;
 800241a:	79bb      	ldrb	r3, [r7, #6]
 800241c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002420:	71bb      	strb	r3, [r7, #6]

  
  /* Send Register address */
  I2C_SendData(LSM303DLHC_I2C, (uint8_t)RegAddr);
 8002422:	79bb      	ldrb	r3, [r7, #6]
 8002424:	4619      	mov	r1, r3
 8002426:	4839      	ldr	r0, [pc, #228]	@ (800250c <LSM303DLHC_Read+0x184>)
 8002428:	f7fe f968 	bl	80006fc <I2C_SendData>
  
  /* Wait until TC flag is set */
  LSM303DLHC_Timeout = LSM303DLHC_LONG_TIMEOUT;
 800242c:	4b36      	ldr	r3, [pc, #216]	@ (8002508 <LSM303DLHC_Read+0x180>)
 800242e:	f44f 4220 	mov.w	r2, #40960	@ 0xa000
 8002432:	601a      	str	r2, [r3, #0]
  while(I2C_GetFlagStatus(LSM303DLHC_I2C, I2C_ISR_TC) == RESET)
 8002434:	e00b      	b.n	800244e <LSM303DLHC_Read+0xc6>
  {
    if((LSM303DLHC_Timeout--) == 0) return LSM303DLHC_TIMEOUT_UserCallback();
 8002436:	4b34      	ldr	r3, [pc, #208]	@ (8002508 <LSM303DLHC_Read+0x180>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	1e5a      	subs	r2, r3, #1
 800243c:	4932      	ldr	r1, [pc, #200]	@ (8002508 <LSM303DLHC_Read+0x180>)
 800243e:	600a      	str	r2, [r1, #0]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d104      	bne.n	800244e <LSM303DLHC_Read+0xc6>
 8002444:	f000 f90e 	bl	8002664 <LSM303DLHC_TIMEOUT_UserCallback>
 8002448:	4603      	mov	r3, r0
 800244a:	b29b      	uxth	r3, r3
 800244c:	e058      	b.n	8002500 <LSM303DLHC_Read+0x178>
  while(I2C_GetFlagStatus(LSM303DLHC_I2C, I2C_ISR_TC) == RESET)
 800244e:	2140      	movs	r1, #64	@ 0x40
 8002450:	482e      	ldr	r0, [pc, #184]	@ (800250c <LSM303DLHC_Read+0x184>)
 8002452:	f7fe f96f 	bl	8000734 <I2C_GetFlagStatus>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d0ec      	beq.n	8002436 <LSM303DLHC_Read+0xae>
  }  
  
  /* Configure slave address, nbytes, reload, end mode and start or stop generation */
  I2C_TransferHandling(LSM303DLHC_I2C, DeviceAddr, NumByteToRead, I2C_AutoEnd_Mode, I2C_Generate_Start_Read);
 800245c:	79fb      	ldrb	r3, [r7, #7]
 800245e:	b299      	uxth	r1, r3
 8002460:	88bb      	ldrh	r3, [r7, #4]
 8002462:	b2da      	uxtb	r2, r3
 8002464:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 8002468:	9300      	str	r3, [sp, #0]
 800246a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800246e:	4827      	ldr	r0, [pc, #156]	@ (800250c <LSM303DLHC_Read+0x184>)
 8002470:	f7fe f918 	bl	80006a4 <I2C_TransferHandling>
  
  /* Wait until all data are received */
  while (NumByteToRead)
 8002474:	e024      	b.n	80024c0 <LSM303DLHC_Read+0x138>
  {   
    /* Wait until RXNE flag is set */
    LSM303DLHC_Timeout = LSM303DLHC_LONG_TIMEOUT;
 8002476:	4b24      	ldr	r3, [pc, #144]	@ (8002508 <LSM303DLHC_Read+0x180>)
 8002478:	f44f 4220 	mov.w	r2, #40960	@ 0xa000
 800247c:	601a      	str	r2, [r3, #0]
    while(I2C_GetFlagStatus(LSM303DLHC_I2C, I2C_ISR_RXNE) == RESET)    
 800247e:	e00b      	b.n	8002498 <LSM303DLHC_Read+0x110>
    {
      if((LSM303DLHC_Timeout--) == 0) return LSM303DLHC_TIMEOUT_UserCallback();
 8002480:	4b21      	ldr	r3, [pc, #132]	@ (8002508 <LSM303DLHC_Read+0x180>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	1e5a      	subs	r2, r3, #1
 8002486:	4920      	ldr	r1, [pc, #128]	@ (8002508 <LSM303DLHC_Read+0x180>)
 8002488:	600a      	str	r2, [r1, #0]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d104      	bne.n	8002498 <LSM303DLHC_Read+0x110>
 800248e:	f000 f8e9 	bl	8002664 <LSM303DLHC_TIMEOUT_UserCallback>
 8002492:	4603      	mov	r3, r0
 8002494:	b29b      	uxth	r3, r3
 8002496:	e033      	b.n	8002500 <LSM303DLHC_Read+0x178>
    while(I2C_GetFlagStatus(LSM303DLHC_I2C, I2C_ISR_RXNE) == RESET)    
 8002498:	2104      	movs	r1, #4
 800249a:	481c      	ldr	r0, [pc, #112]	@ (800250c <LSM303DLHC_Read+0x184>)
 800249c:	f7fe f94a 	bl	8000734 <I2C_GetFlagStatus>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d0ec      	beq.n	8002480 <LSM303DLHC_Read+0xf8>
    }
    
    /* Read data from RXDR */
    *pBuffer = I2C_ReceiveData(LSM303DLHC_I2C);
 80024a6:	4819      	ldr	r0, [pc, #100]	@ (800250c <LSM303DLHC_Read+0x184>)
 80024a8:	f7fe f937 	bl	800071a <I2C_ReceiveData>
 80024ac:	4603      	mov	r3, r0
 80024ae:	461a      	mov	r2, r3
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	701a      	strb	r2, [r3, #0]
    /* Point to the next location where the byte read will be saved */
    pBuffer++;
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	3301      	adds	r3, #1
 80024b8:	603b      	str	r3, [r7, #0]
    
    /* Decrement the read bytes counter */
    NumByteToRead--;
 80024ba:	88bb      	ldrh	r3, [r7, #4]
 80024bc:	3b01      	subs	r3, #1
 80024be:	80bb      	strh	r3, [r7, #4]
  while (NumByteToRead)
 80024c0:	88bb      	ldrh	r3, [r7, #4]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1d7      	bne.n	8002476 <LSM303DLHC_Read+0xee>
  } 
  
  /* Wait until STOPF flag is set */
  LSM303DLHC_Timeout = LSM303DLHC_LONG_TIMEOUT;
 80024c6:	4b10      	ldr	r3, [pc, #64]	@ (8002508 <LSM303DLHC_Read+0x180>)
 80024c8:	f44f 4220 	mov.w	r2, #40960	@ 0xa000
 80024cc:	601a      	str	r2, [r3, #0]
  while(I2C_GetFlagStatus(LSM303DLHC_I2C, I2C_ISR_STOPF) == RESET)   
 80024ce:	e00b      	b.n	80024e8 <LSM303DLHC_Read+0x160>
  {
    if((LSM303DLHC_Timeout--) == 0) return LSM303DLHC_TIMEOUT_UserCallback();
 80024d0:	4b0d      	ldr	r3, [pc, #52]	@ (8002508 <LSM303DLHC_Read+0x180>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	1e5a      	subs	r2, r3, #1
 80024d6:	490c      	ldr	r1, [pc, #48]	@ (8002508 <LSM303DLHC_Read+0x180>)
 80024d8:	600a      	str	r2, [r1, #0]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d104      	bne.n	80024e8 <LSM303DLHC_Read+0x160>
 80024de:	f000 f8c1 	bl	8002664 <LSM303DLHC_TIMEOUT_UserCallback>
 80024e2:	4603      	mov	r3, r0
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	e00b      	b.n	8002500 <LSM303DLHC_Read+0x178>
  while(I2C_GetFlagStatus(LSM303DLHC_I2C, I2C_ISR_STOPF) == RESET)   
 80024e8:	2120      	movs	r1, #32
 80024ea:	4808      	ldr	r0, [pc, #32]	@ (800250c <LSM303DLHC_Read+0x184>)
 80024ec:	f7fe f922 	bl	8000734 <I2C_GetFlagStatus>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d0ec      	beq.n	80024d0 <LSM303DLHC_Read+0x148>
  }
  
  /* Clear STOPF flag */
  I2C_ClearFlag(LSM303DLHC_I2C, I2C_ICR_STOPCF);
 80024f6:	2120      	movs	r1, #32
 80024f8:	4804      	ldr	r0, [pc, #16]	@ (800250c <LSM303DLHC_Read+0x184>)
 80024fa:	f7fe f93a 	bl	8000772 <I2C_ClearFlag>
  
  /* If all operations OK */
  return LSM303DLHC_OK;  
 80024fe:	2300      	movs	r3, #0
}  
 8002500:	4618      	mov	r0, r3
 8002502:	3708      	adds	r7, #8
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	2000004c 	.word	0x2000004c
 800250c:	40005400 	.word	0x40005400

08002510 <LSM303DLHC_LowLevel_Init>:
* @brief  Initializes the low level interface used to drive the LSM303DLHC
* @param  None
* @retval None
*/
static void LSM303DLHC_LowLevel_Init(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b08c      	sub	sp, #48	@ 0x30
 8002514:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  EXTI_InitTypeDef EXTI_InitStructure;
  I2C_InitTypeDef  I2C_InitStructure;
  
  /* Enable the I2C periph */
  RCC_APB1PeriphClockCmd(LSM303DLHC_I2C_CLK, ENABLE);
 8002516:	2101      	movs	r1, #1
 8002518:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800251c:	f7fe fbb8 	bl	8000c90 <RCC_APB1PeriphClockCmd>
  
  /* Enable SCK and SDA GPIO clocks */
  RCC_AHBPeriphClockCmd(LSM303DLHC_I2C_SCK_GPIO_CLK | LSM303DLHC_I2C_SDA_GPIO_CLK , ENABLE);
 8002520:	2101      	movs	r1, #1
 8002522:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8002526:	f7fe fb73 	bl	8000c10 <RCC_AHBPeriphClockCmd>
  
  /* Enable INT1 GPIO clock */
  RCC_AHBPeriphClockCmd(LSM303DLHC_I2C_INT1_GPIO_CLK, ENABLE);
 800252a:	2101      	movs	r1, #1
 800252c:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8002530:	f7fe fb6e 	bl	8000c10 <RCC_AHBPeriphClockCmd>
  
  /* Enable INT2 GPIO clock */
  RCC_AHBPeriphClockCmd(LSM303DLHC_I2C_INT2_GPIO_CLK, ENABLE);
 8002534:	2101      	movs	r1, #1
 8002536:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800253a:	f7fe fb69 	bl	8000c10 <RCC_AHBPeriphClockCmd>
  
  /* Enable DRDY clock */
  RCC_AHBPeriphClockCmd(LSM303DLHC_DRDY_GPIO_CLK, ENABLE);
 800253e:	2101      	movs	r1, #1
 8002540:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8002544:	f7fe fb64 	bl	8000c10 <RCC_AHBPeriphClockCmd>
  
  GPIO_PinAFConfig(LSM303DLHC_I2C_SCK_GPIO_PORT, LSM303DLHC_I2C_SCK_SOURCE, LSM303DLHC_I2C_SCK_AF);
 8002548:	2204      	movs	r2, #4
 800254a:	2106      	movs	r1, #6
 800254c:	4841      	ldr	r0, [pc, #260]	@ (8002654 <LSM303DLHC_LowLevel_Init+0x144>)
 800254e:	f7fd ffdd 	bl	800050c <GPIO_PinAFConfig>
  GPIO_PinAFConfig(LSM303DLHC_I2C_SDA_GPIO_PORT, LSM303DLHC_I2C_SDA_SOURCE, LSM303DLHC_I2C_SDA_AF);
 8002552:	2204      	movs	r2, #4
 8002554:	2107      	movs	r1, #7
 8002556:	483f      	ldr	r0, [pc, #252]	@ (8002654 <LSM303DLHC_LowLevel_Init+0x144>)
 8002558:	f7fd ffd8 	bl	800050c <GPIO_PinAFConfig>
  
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 800255c:	2302      	movs	r3, #2
 800255e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002562:	2300      	movs	r3, #0
 8002564:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_DOWN;
 8002568:	2302      	movs	r3, #2
 800256a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;  //Opprinneleg 50MHz
 800256e:	2302      	movs	r3, #2
 8002570:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  
  /* I2C SCK pin configuration */
  GPIO_InitStructure.GPIO_Pin = LSM303DLHC_I2C_SCK_PIN;
 8002574:	2340      	movs	r3, #64	@ 0x40
 8002576:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_Init(LSM303DLHC_I2C_SCK_GPIO_PORT, &GPIO_InitStructure);
 8002578:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800257c:	4619      	mov	r1, r3
 800257e:	4835      	ldr	r0, [pc, #212]	@ (8002654 <LSM303DLHC_LowLevel_Init+0x144>)
 8002580:	f7fd ff2e 	bl	80003e0 <GPIO_Init>
  
  /* I2C SDA pin configuration */
  GPIO_InitStructure.GPIO_Pin =  LSM303DLHC_I2C_SDA_PIN;
 8002584:	2380      	movs	r3, #128	@ 0x80
 8002586:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_Init(LSM303DLHC_I2C_SDA_GPIO_PORT, &GPIO_InitStructure);
 8002588:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800258c:	4619      	mov	r1, r3
 800258e:	4831      	ldr	r0, [pc, #196]	@ (8002654 <LSM303DLHC_LowLevel_Init+0x144>)
 8002590:	f7fd ff26 	bl	80003e0 <GPIO_Init>
  
  /* Mems DRDY */
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8002594:	2300      	movs	r3, #0
 8002596:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800259a:	2300      	movs	r3, #0
 800259c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 80025a0:	2300      	movs	r3, #0
 80025a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;  //Opprinneleg 50MHz
 80025a6:	2302      	movs	r3, #2
 80025a8:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  
  /* Mems DRDY pin configuration */
  GPIO_InitStructure.GPIO_Pin = LSM303DLHC_DRDY_PIN;
 80025ac:	2304      	movs	r3, #4
 80025ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_Init(LSM303DLHC_DRDY_GPIO_PORT, &GPIO_InitStructure);
 80025b0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80025b4:	4619      	mov	r1, r3
 80025b6:	4828      	ldr	r0, [pc, #160]	@ (8002658 <LSM303DLHC_LowLevel_Init+0x148>)
 80025b8:	f7fd ff12 	bl	80003e0 <GPIO_Init>
  
  /* Connect EXTI Line to Mems DRDY Pin */
  SYSCFG_EXTILineConfig(LSM303DLHC_DRDY_EXTI_PORT_SOURCE, LSM303DLHC_DRDY_EXTI_PIN_SOURCE);
 80025bc:	2102      	movs	r1, #2
 80025be:	2004      	movs	r0, #4
 80025c0:	f7fe fc5c 	bl	8000e7c <SYSCFG_EXTILineConfig>
  
  EXTI_InitStructure.EXTI_Line = LSM303DLHC_DRDY_EXTI_LINE;
 80025c4:	2302      	movs	r3, #2
 80025c6:	623b      	str	r3, [r7, #32]
  EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 80025c8:	2300      	movs	r3, #0
 80025ca:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
 80025ce:	2308      	movs	r3, #8
 80025d0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 80025d4:	2301      	movs	r3, #1
 80025d6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  
  EXTI_Init(&EXTI_InitStructure);
 80025da:	f107 0320 	add.w	r3, r7, #32
 80025de:	4618      	mov	r0, r3
 80025e0:	f7fd fdf8 	bl	80001d4 <EXTI_Init>
  
  /* I2C configuration -------------------------------------------------------*/
  I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 80025e4:	2300      	movs	r3, #0
 80025e6:	613b      	str	r3, [r7, #16]
  I2C_InitStructure.I2C_AnalogFilter = I2C_AnalogFilter_Enable;
 80025e8:	2300      	movs	r3, #0
 80025ea:	60bb      	str	r3, [r7, #8]
  I2C_InitStructure.I2C_DigitalFilter = 0x00;
 80025ec:	2300      	movs	r3, #0
 80025ee:	60fb      	str	r3, [r7, #12]
  I2C_InitStructure.I2C_OwnAddress1 = 0x00;
 80025f0:	2300      	movs	r3, #0
 80025f2:	617b      	str	r3, [r7, #20]
  I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 80025f4:	2300      	movs	r3, #0
 80025f6:	61bb      	str	r3, [r7, #24]
  I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 80025f8:	2300      	movs	r3, #0
 80025fa:	61fb      	str	r3, [r7, #28]
  I2C_InitStructure.I2C_Timing = 0x00902025;
 80025fc:	4b17      	ldr	r3, [pc, #92]	@ (800265c <LSM303DLHC_LowLevel_Init+0x14c>)
 80025fe:	607b      	str	r3, [r7, #4]
  
  /* Apply LSM303DLHC_I2C configuration after enabling it */
  I2C_Init(LSM303DLHC_I2C, &I2C_InitStructure);
 8002600:	1d3b      	adds	r3, r7, #4
 8002602:	4619      	mov	r1, r3
 8002604:	4816      	ldr	r0, [pc, #88]	@ (8002660 <LSM303DLHC_LowLevel_Init+0x150>)
 8002606:	f7fd ffcb 	bl	80005a0 <I2C_Init>
  
  /* LSM303DLHC_I2C Peripheral Enable */
  I2C_Cmd(LSM303DLHC_I2C, ENABLE);
 800260a:	2101      	movs	r1, #1
 800260c:	4814      	ldr	r0, [pc, #80]	@ (8002660 <LSM303DLHC_LowLevel_Init+0x150>)
 800260e:	f7fe f82d 	bl	800066c <I2C_Cmd>
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.GPIO_Pin = LSM303DLHC_I2C_INT1_PIN;
 8002612:	2310      	movs	r3, #16
 8002614:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8002616:	2300      	movs	r3, #0
 8002618:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800261c:	2300      	movs	r3, #0
 800261e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;  //Opprinneleg 50MHz
 8002622:	2302      	movs	r3, #2
 8002624:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8002628:	2300      	movs	r3, #0
 800262a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  GPIO_Init(LSM303DLHC_I2C_INT1_GPIO_PORT, &GPIO_InitStructure);
 800262e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002632:	4619      	mov	r1, r3
 8002634:	4808      	ldr	r0, [pc, #32]	@ (8002658 <LSM303DLHC_LowLevel_Init+0x148>)
 8002636:	f7fd fed3 	bl	80003e0 <GPIO_Init>
  
  GPIO_InitStructure.GPIO_Pin = LSM303DLHC_I2C_INT2_PIN;
 800263a:	2320      	movs	r3, #32
 800263c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_Init(LSM303DLHC_I2C_INT2_GPIO_PORT, &GPIO_InitStructure);
 800263e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002642:	4619      	mov	r1, r3
 8002644:	4804      	ldr	r0, [pc, #16]	@ (8002658 <LSM303DLHC_LowLevel_Init+0x148>)
 8002646:	f7fd fecb 	bl	80003e0 <GPIO_Init>
}  
 800264a:	bf00      	nop
 800264c:	3730      	adds	r7, #48	@ 0x30
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	48000400 	.word	0x48000400
 8002658:	48001000 	.word	0x48001000
 800265c:	00902025 	.word	0x00902025
 8002660:	40005400 	.word	0x40005400

08002664 <LSM303DLHC_TIMEOUT_UserCallback>:
  * @brief  Basic management of the timeout situation.
  * @param  None.
  * @retval None.
  */
uint32_t LSM303DLHC_TIMEOUT_UserCallback(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
  /* Block communication and all processes */
  while (1)
 8002668:	bf00      	nop
 800266a:	e7fd      	b.n	8002668 <LSM303DLHC_TIMEOUT_UserCallback+0x4>

0800266c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800266c:	480d      	ldr	r0, [pc, #52]	@ (80026a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800266e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002670:	480d      	ldr	r0, [pc, #52]	@ (80026a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002672:	490e      	ldr	r1, [pc, #56]	@ (80026ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8002674:	4a0e      	ldr	r2, [pc, #56]	@ (80026b0 <LoopForever+0xe>)
  movs r3, #0
 8002676:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002678:	e002      	b.n	8002680 <LoopCopyDataInit>

0800267a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800267a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800267c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800267e:	3304      	adds	r3, #4

08002680 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002680:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002682:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002684:	d3f9      	bcc.n	800267a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002686:	4a0b      	ldr	r2, [pc, #44]	@ (80026b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002688:	4c0b      	ldr	r4, [pc, #44]	@ (80026b8 <LoopForever+0x16>)
  movs r3, #0
 800268a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800268c:	e001      	b.n	8002692 <LoopFillZerobss>

0800268e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800268e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002690:	3204      	adds	r2, #4

08002692 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002692:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002694:	d3fb      	bcc.n	800268e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002696:	f7fe fe9b 	bl	80013d0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800269a:	f000 f811 	bl	80026c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800269e:	f7fe ff53 	bl	8001548 <main>

080026a2 <LoopForever>:

LoopForever:
    b LoopForever
 80026a2:	e7fe      	b.n	80026a2 <LoopForever>
  ldr   r0, =_estack
 80026a4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80026a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026ac:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 80026b0:	08002750 	.word	0x08002750
  ldr r2, =_sbss
 80026b4:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 80026b8:	200000a4 	.word	0x200000a4

080026bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80026bc:	e7fe      	b.n	80026bc <ADC1_2_IRQHandler>
	...

080026c0 <__libc_init_array>:
 80026c0:	b570      	push	{r4, r5, r6, lr}
 80026c2:	4d0d      	ldr	r5, [pc, #52]	@ (80026f8 <__libc_init_array+0x38>)
 80026c4:	4c0d      	ldr	r4, [pc, #52]	@ (80026fc <__libc_init_array+0x3c>)
 80026c6:	1b64      	subs	r4, r4, r5
 80026c8:	10a4      	asrs	r4, r4, #2
 80026ca:	2600      	movs	r6, #0
 80026cc:	42a6      	cmp	r6, r4
 80026ce:	d109      	bne.n	80026e4 <__libc_init_array+0x24>
 80026d0:	4d0b      	ldr	r5, [pc, #44]	@ (8002700 <__libc_init_array+0x40>)
 80026d2:	4c0c      	ldr	r4, [pc, #48]	@ (8002704 <__libc_init_array+0x44>)
 80026d4:	f000 f818 	bl	8002708 <_init>
 80026d8:	1b64      	subs	r4, r4, r5
 80026da:	10a4      	asrs	r4, r4, #2
 80026dc:	2600      	movs	r6, #0
 80026de:	42a6      	cmp	r6, r4
 80026e0:	d105      	bne.n	80026ee <__libc_init_array+0x2e>
 80026e2:	bd70      	pop	{r4, r5, r6, pc}
 80026e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80026e8:	4798      	blx	r3
 80026ea:	3601      	adds	r6, #1
 80026ec:	e7ee      	b.n	80026cc <__libc_init_array+0xc>
 80026ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80026f2:	4798      	blx	r3
 80026f4:	3601      	adds	r6, #1
 80026f6:	e7f2      	b.n	80026de <__libc_init_array+0x1e>
 80026f8:	08002748 	.word	0x08002748
 80026fc:	08002748 	.word	0x08002748
 8002700:	08002748 	.word	0x08002748
 8002704:	0800274c 	.word	0x0800274c

08002708 <_init>:
 8002708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800270a:	bf00      	nop
 800270c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800270e:	bc08      	pop	{r3}
 8002710:	469e      	mov	lr, r3
 8002712:	4770      	bx	lr

08002714 <_fini>:
 8002714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002716:	bf00      	nop
 8002718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800271a:	bc08      	pop	{r3}
 800271c:	469e      	mov	lr, r3
 800271e:	4770      	bx	lr
