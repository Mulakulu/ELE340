
sensornode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c78  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08006e08  08006e08  00007e08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e84  08006e84  00008098  2**0
                  CONTENTS
  4 .ARM          00000008  08006e84  08006e84  00007e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e8c  08006e8c  00008098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e8c  08006e8c  00007e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006e90  08006e90  00007e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000098  20000000  08006e94  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008098  2**0
                  CONTENTS
 10 .bss          000006bc  20000098  20000098  00008098  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000754  20000754  00008098  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017e4f  00000000  00000000  000080c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002bae  00000000  00000000  0001ff17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001548  00000000  00000000  00022ac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010c9  00000000  00000000  00024010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020f19  00000000  00000000  000250d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bf4f  00000000  00000000  00045ff2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c8bf8  00000000  00000000  00061f41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012ab39  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006368  00000000  00000000  0012ab7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  00130ee4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000098 	.word	0x20000098
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006df0 	.word	0x08006df0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	08006df0 	.word	0x08006df0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <valToMilli>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint16_t valToMilli(uint16_t value)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b086      	sub	sp, #24
 8000274:	af00      	add	r7, sp, #0
 8000276:	4603      	mov	r3, r0
 8000278:	80fb      	strh	r3, [r7, #6]

	//Value is too large. Likely too close to the sensor.
	if (value > conversion[0]) return 200;
 800027a:	4b2b      	ldr	r3, [pc, #172]	@ (8000328 <valToMilli+0xb8>)
 800027c:	881b      	ldrh	r3, [r3, #0]
 800027e:	88fa      	ldrh	r2, [r7, #6]
 8000280:	429a      	cmp	r2, r3
 8000282:	d901      	bls.n	8000288 <valToMilli+0x18>
 8000284:	23c8      	movs	r3, #200	@ 0xc8
 8000286:	e04b      	b.n	8000320 <valToMilli+0xb0>

	//Loop through all tests to see how far away the value is
	for (uint16_t i = 1;i < 22;i++)
 8000288:	2301      	movs	r3, #1
 800028a:	82fb      	strh	r3, [r7, #22]
 800028c:	e043      	b.n	8000316 <valToMilli+0xa6>
	{
		if (value > conversion[i])
 800028e:	8afb      	ldrh	r3, [r7, #22]
 8000290:	4a25      	ldr	r2, [pc, #148]	@ (8000328 <valToMilli+0xb8>)
 8000292:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000296:	88fa      	ldrh	r2, [r7, #6]
 8000298:	429a      	cmp	r2, r3
 800029a:	d939      	bls.n	8000310 <valToMilli+0xa0>
		{
			uint16_t minVal = conversion[i];
 800029c:	8afb      	ldrh	r3, [r7, #22]
 800029e:	4a22      	ldr	r2, [pc, #136]	@ (8000328 <valToMilli+0xb8>)
 80002a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80002a4:	82bb      	strh	r3, [r7, #20]
			uint16_t maxVal = conversion[i-1];
 80002a6:	8afb      	ldrh	r3, [r7, #22]
 80002a8:	3b01      	subs	r3, #1
 80002aa:	4a1f      	ldr	r2, [pc, #124]	@ (8000328 <valToMilli+0xb8>)
 80002ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80002b0:	827b      	strh	r3, [r7, #18]
			float fracBetween = (float)(value-minVal)/(maxVal-minVal);
 80002b2:	88fa      	ldrh	r2, [r7, #6]
 80002b4:	8abb      	ldrh	r3, [r7, #20]
 80002b6:	1ad3      	subs	r3, r2, r3
 80002b8:	ee07 3a90 	vmov	s15, r3
 80002bc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80002c0:	8a7a      	ldrh	r2, [r7, #18]
 80002c2:	8abb      	ldrh	r3, [r7, #20]
 80002c4:	1ad3      	subs	r3, r2, r3
 80002c6:	ee07 3a90 	vmov	s15, r3
 80002ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80002ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80002d2:	edc7 7a03 	vstr	s15, [r7, #12]
			return (uint16_t)roundf(200+i*50-fracBetween*50);
 80002d6:	8afb      	ldrh	r3, [r7, #22]
 80002d8:	2232      	movs	r2, #50	@ 0x32
 80002da:	fb02 f303 	mul.w	r3, r2, r3
 80002de:	33c8      	adds	r3, #200	@ 0xc8
 80002e0:	ee07 3a90 	vmov	s15, r3
 80002e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80002e8:	edd7 7a03 	vldr	s15, [r7, #12]
 80002ec:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 800032c <valToMilli+0xbc>
 80002f0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80002f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80002f8:	eeb0 0a67 	vmov.f32	s0, s15
 80002fc:	f006 fd54 	bl	8006da8 <roundf>
 8000300:	eef0 7a40 	vmov.f32	s15, s0
 8000304:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000308:	ee17 3a90 	vmov	r3, s15
 800030c:	b29b      	uxth	r3, r3
 800030e:	e007      	b.n	8000320 <valToMilli+0xb0>
	for (uint16_t i = 1;i < 22;i++)
 8000310:	8afb      	ldrh	r3, [r7, #22]
 8000312:	3301      	adds	r3, #1
 8000314:	82fb      	strh	r3, [r7, #22]
 8000316:	8afb      	ldrh	r3, [r7, #22]
 8000318:	2b15      	cmp	r3, #21
 800031a:	d9b8      	bls.n	800028e <valToMilli+0x1e>
		};
	};

	//Value is too small, meaning the distance is too high
	return 1200;
 800031c:	f44f 6396 	mov.w	r3, #1200	@ 0x4b0
}
 8000320:	4618      	mov	r0, r3
 8000322:	3718      	adds	r7, #24
 8000324:	46bd      	mov	sp, r7
 8000326:	bd80      	pop	{r7, pc}
 8000328:	20000004 	.word	0x20000004
 800032c:	42480000 	.word	0x42480000

08000330 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000334:	f000 fe82 	bl	800103c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000338:	f000 f898 	bl	800046c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800033c:	f000 fae4 	bl	8000908 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000340:	f000 f96c 	bl	800061c <MX_I2C1_Init>
  MX_SPI1_Init();
 8000344:	f000 f9aa 	bl	800069c <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000348:	f000 fabc 	bl	80008c4 <MX_USB_PCD_Init>
  MX_ADC3_Init();
 800034c:	f000 f8f6 	bl	800053c <MX_ADC3_Init>
  MX_TIM4_Init();
 8000350:	f000 f9e2 	bl	8000718 <MX_TIM4_Init>
  MX_USART3_UART_Init();
 8000354:	f000 fa86 	bl	8000864 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8000358:	f000 fa54 	bl	8000804 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800035c:	2100      	movs	r1, #0
 800035e:	4838      	ldr	r0, [pc, #224]	@ (8000440 <main+0x110>)
 8000360:	f004 f962 	bl	8004628 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, htim4.Init.Period / 2);
 8000364:	4b36      	ldr	r3, [pc, #216]	@ (8000440 <main+0x110>)
 8000366:	68da      	ldr	r2, [r3, #12]
 8000368:	4b35      	ldr	r3, [pc, #212]	@ (8000440 <main+0x110>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	0852      	lsrs	r2, r2, #1
 800036e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  HAL_ADC_Start(&hadc3);
 8000370:	4834      	ldr	r0, [pc, #208]	@ (8000444 <main+0x114>)
 8000372:	f001 f8a9 	bl	80014c8 <HAL_ADC_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (HAL_ADC_PollForConversion(&hadc3, 1) != 0) {
 8000376:	2101      	movs	r1, #1
 8000378:	4832      	ldr	r0, [pc, #200]	@ (8000444 <main+0x114>)
 800037a:	f001 f9bb 	bl	80016f4 <HAL_ADC_PollForConversion>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	d0f8      	beq.n	8000376 <main+0x46>
		  //Gather distance data, and smooth it out
		  dist = HAL_ADC_GetValue(&hadc3);
 8000384:	482f      	ldr	r0, [pc, #188]	@ (8000444 <main+0x114>)
 8000386:	f001 fab7 	bl	80018f8 <HAL_ADC_GetValue>
 800038a:	4603      	mov	r3, r0
 800038c:	b29a      	uxth	r2, r3
 800038e:	4b2e      	ldr	r3, [pc, #184]	@ (8000448 <main+0x118>)
 8000390:	801a      	strh	r2, [r3, #0]
		  smoothDist = smoothDist*(1-smoothingFactor)+dist*smoothingFactor;
 8000392:	4b2e      	ldr	r3, [pc, #184]	@ (800044c <main+0x11c>)
 8000394:	edd3 7a00 	vldr	s15, [r3]
 8000398:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800039c:	ee37 7a67 	vsub.f32	s14, s14, s15
 80003a0:	4b2b      	ldr	r3, [pc, #172]	@ (8000450 <main+0x120>)
 80003a2:	edd3 7a00 	vldr	s15, [r3]
 80003a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80003aa:	4b27      	ldr	r3, [pc, #156]	@ (8000448 <main+0x118>)
 80003ac:	881b      	ldrh	r3, [r3, #0]
 80003ae:	ee07 3a90 	vmov	s15, r3
 80003b2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80003b6:	4b25      	ldr	r3, [pc, #148]	@ (800044c <main+0x11c>)
 80003b8:	edd3 7a00 	vldr	s15, [r3]
 80003bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80003c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80003c4:	4b22      	ldr	r3, [pc, #136]	@ (8000450 <main+0x120>)
 80003c6:	edc3 7a00 	vstr	s15, [r3]
		  counter++;
 80003ca:	4b22      	ldr	r3, [pc, #136]	@ (8000454 <main+0x124>)
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	3301      	adds	r3, #1
 80003d0:	4a20      	ldr	r2, [pc, #128]	@ (8000454 <main+0x124>)
 80003d2:	6013      	str	r3, [r2, #0]
		  HAL_ADC_Start(&hadc3);
 80003d4:	481b      	ldr	r0, [pc, #108]	@ (8000444 <main+0x114>)
 80003d6:	f001 f877 	bl	80014c8 <HAL_ADC_Start>

		  //Send the distance data
		  value_to_send = valToMilli((uint16_t)roundf(smoothDist));
 80003da:	4b1d      	ldr	r3, [pc, #116]	@ (8000450 <main+0x120>)
 80003dc:	edd3 7a00 	vldr	s15, [r3]
 80003e0:	eeb0 0a67 	vmov.f32	s0, s15
 80003e4:	f006 fce0 	bl	8006da8 <roundf>
 80003e8:	eef0 7a40 	vmov.f32	s15, s0
 80003ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80003f0:	ee17 3a90 	vmov	r3, s15
 80003f4:	b29b      	uxth	r3, r3
 80003f6:	4618      	mov	r0, r3
 80003f8:	f7ff ff3a 	bl	8000270 <valToMilli>
 80003fc:	4603      	mov	r3, r0
 80003fe:	461a      	mov	r2, r3
 8000400:	4b15      	ldr	r3, [pc, #84]	@ (8000458 <main+0x128>)
 8000402:	801a      	strh	r2, [r3, #0]
		  message[0] = (value_to_send >> 8) & 0xFF; // High byte
 8000404:	4b14      	ldr	r3, [pc, #80]	@ (8000458 <main+0x128>)
 8000406:	881b      	ldrh	r3, [r3, #0]
 8000408:	0a1b      	lsrs	r3, r3, #8
 800040a:	b29b      	uxth	r3, r3
 800040c:	b2da      	uxtb	r2, r3
 800040e:	4b13      	ldr	r3, [pc, #76]	@ (800045c <main+0x12c>)
 8000410:	701a      	strb	r2, [r3, #0]
		  message[1] = value_to_send & 0xFF;        // Low byte
 8000412:	4b11      	ldr	r3, [pc, #68]	@ (8000458 <main+0x128>)
 8000414:	881b      	ldrh	r3, [r3, #0]
 8000416:	b2da      	uxtb	r2, r3
 8000418:	4b10      	ldr	r3, [pc, #64]	@ (800045c <main+0x12c>)
 800041a:	705a      	strb	r2, [r3, #1]
		  HAL_UART_Transmit(&huart3, message, 2, HAL_MAX_DELAY);
 800041c:	f04f 33ff 	mov.w	r3, #4294967295
 8000420:	2202      	movs	r2, #2
 8000422:	490e      	ldr	r1, [pc, #56]	@ (800045c <main+0x12c>)
 8000424:	480e      	ldr	r0, [pc, #56]	@ (8000460 <main+0x130>)
 8000426:	f005 f8dd 	bl	80055e4 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart2, message, 2, HAL_MAX_DELAY);
 800042a:	f04f 33ff 	mov.w	r3, #4294967295
 800042e:	2202      	movs	r2, #2
 8000430:	490a      	ldr	r1, [pc, #40]	@ (800045c <main+0x12c>)
 8000432:	480c      	ldr	r0, [pc, #48]	@ (8000464 <main+0x134>)
 8000434:	f005 f8d6 	bl	80055e4 <HAL_UART_Transmit>
		  printf("Hello World\n\r");
 8000438:	480b      	ldr	r0, [pc, #44]	@ (8000468 <main+0x138>)
 800043a:	f005 fe47 	bl	80060cc <iprintf>
	  if (HAL_ADC_PollForConversion(&hadc3, 1) != 0) {
 800043e:	e79a      	b.n	8000376 <main+0x46>
 8000440:	200001bc 	.word	0x200001bc
 8000444:	200000b4 	.word	0x200000b4
 8000448:	200005ec 	.word	0x200005ec
 800044c:	20000000 	.word	0x20000000
 8000450:	200005f0 	.word	0x200005f0
 8000454:	200005f4 	.word	0x200005f4
 8000458:	200005f8 	.word	0x200005f8
 800045c:	200005fc 	.word	0x200005fc
 8000460:	20000290 	.word	0x20000290
 8000464:	20000208 	.word	0x20000208
 8000468:	08006e08 	.word	0x08006e08

0800046c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b09e      	sub	sp, #120	@ 0x78
 8000470:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000472:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000476:	2228      	movs	r2, #40	@ 0x28
 8000478:	2100      	movs	r1, #0
 800047a:	4618      	mov	r0, r3
 800047c:	f005 fe7b 	bl	8006176 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000480:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000484:	2200      	movs	r2, #0
 8000486:	601a      	str	r2, [r3, #0]
 8000488:	605a      	str	r2, [r3, #4]
 800048a:	609a      	str	r2, [r3, #8]
 800048c:	60da      	str	r2, [r3, #12]
 800048e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000490:	463b      	mov	r3, r7
 8000492:	223c      	movs	r2, #60	@ 0x3c
 8000494:	2100      	movs	r1, #0
 8000496:	4618      	mov	r0, r3
 8000498:	f005 fe6d 	bl	8006176 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800049c:	2303      	movs	r3, #3
 800049e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80004a0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80004a4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80004a6:	2300      	movs	r3, #0
 80004a8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004aa:	2301      	movs	r3, #1
 80004ac:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004ae:	2310      	movs	r3, #16
 80004b0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004b2:	2302      	movs	r3, #2
 80004b4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004b6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80004ba:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80004bc:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80004c0:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004c2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80004c6:	4618      	mov	r0, r3
 80004c8:	f002 fb3c 	bl	8002b44 <HAL_RCC_OscConfig>
 80004cc:	4603      	mov	r3, r0
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d001      	beq.n	80004d6 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80004d2:	f000 faa3 	bl	8000a1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004d6:	230f      	movs	r3, #15
 80004d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004da:	2302      	movs	r3, #2
 80004dc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004de:	2300      	movs	r3, #0
 80004e0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80004e6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004e8:	2300      	movs	r3, #0
 80004ea:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004ec:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80004f0:	2102      	movs	r1, #2
 80004f2:	4618      	mov	r0, r3
 80004f4:	f003 fb64 	bl	8003bc0 <HAL_RCC_ClockConfig>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d001      	beq.n	8000502 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80004fe:	f000 fa8d 	bl	8000a1c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART2
 8000502:	4b0d      	ldr	r3, [pc, #52]	@ (8000538 <SystemClock_Config+0xcc>)
 8000504:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_ADC34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000506:	2300      	movs	r3, #0
 8000508:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800050a:	2300      	movs	r3, #0
 800050c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 800050e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000512:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000514:	2300      	movs	r3, #0
 8000516:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000518:	2300      	movs	r3, #0
 800051a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800051c:	463b      	mov	r3, r7
 800051e:	4618      	mov	r0, r3
 8000520:	f003 fd6e 	bl	8004000 <HAL_RCCEx_PeriphCLKConfig>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d001      	beq.n	800052e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800052a:	f000 fa77 	bl	8000a1c <Error_Handler>
  }
}
 800052e:	bf00      	nop
 8000530:	3778      	adds	r7, #120	@ 0x78
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	00020126 	.word	0x00020126

0800053c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b08a      	sub	sp, #40	@ 0x28
 8000540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000542:	f107 031c 	add.w	r3, r7, #28
 8000546:	2200      	movs	r2, #0
 8000548:	601a      	str	r2, [r3, #0]
 800054a:	605a      	str	r2, [r3, #4]
 800054c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800054e:	1d3b      	adds	r3, r7, #4
 8000550:	2200      	movs	r2, #0
 8000552:	601a      	str	r2, [r3, #0]
 8000554:	605a      	str	r2, [r3, #4]
 8000556:	609a      	str	r2, [r3, #8]
 8000558:	60da      	str	r2, [r3, #12]
 800055a:	611a      	str	r2, [r3, #16]
 800055c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800055e:	4b2d      	ldr	r3, [pc, #180]	@ (8000614 <MX_ADC3_Init+0xd8>)
 8000560:	4a2d      	ldr	r2, [pc, #180]	@ (8000618 <MX_ADC3_Init+0xdc>)
 8000562:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000564:	4b2b      	ldr	r3, [pc, #172]	@ (8000614 <MX_ADC3_Init+0xd8>)
 8000566:	2200      	movs	r2, #0
 8000568:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800056a:	4b2a      	ldr	r3, [pc, #168]	@ (8000614 <MX_ADC3_Init+0xd8>)
 800056c:	2200      	movs	r2, #0
 800056e:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000570:	4b28      	ldr	r3, [pc, #160]	@ (8000614 <MX_ADC3_Init+0xd8>)
 8000572:	2200      	movs	r2, #0
 8000574:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000576:	4b27      	ldr	r3, [pc, #156]	@ (8000614 <MX_ADC3_Init+0xd8>)
 8000578:	2200      	movs	r2, #0
 800057a:	765a      	strb	r2, [r3, #25]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800057c:	4b25      	ldr	r3, [pc, #148]	@ (8000614 <MX_ADC3_Init+0xd8>)
 800057e:	2200      	movs	r2, #0
 8000580:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000584:	4b23      	ldr	r3, [pc, #140]	@ (8000614 <MX_ADC3_Init+0xd8>)
 8000586:	2200      	movs	r2, #0
 8000588:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800058a:	4b22      	ldr	r3, [pc, #136]	@ (8000614 <MX_ADC3_Init+0xd8>)
 800058c:	2201      	movs	r2, #1
 800058e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000590:	4b20      	ldr	r3, [pc, #128]	@ (8000614 <MX_ADC3_Init+0xd8>)
 8000592:	2200      	movs	r2, #0
 8000594:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000596:	4b1f      	ldr	r3, [pc, #124]	@ (8000614 <MX_ADC3_Init+0xd8>)
 8000598:	2201      	movs	r2, #1
 800059a:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800059c:	4b1d      	ldr	r3, [pc, #116]	@ (8000614 <MX_ADC3_Init+0xd8>)
 800059e:	2200      	movs	r2, #0
 80005a0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005a4:	4b1b      	ldr	r3, [pc, #108]	@ (8000614 <MX_ADC3_Init+0xd8>)
 80005a6:	2204      	movs	r2, #4
 80005a8:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80005aa:	4b1a      	ldr	r3, [pc, #104]	@ (8000614 <MX_ADC3_Init+0xd8>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	761a      	strb	r2, [r3, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80005b0:	4b18      	ldr	r3, [pc, #96]	@ (8000614 <MX_ADC3_Init+0xd8>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80005b6:	4817      	ldr	r0, [pc, #92]	@ (8000614 <MX_ADC3_Init+0xd8>)
 80005b8:	f000 fda6 	bl	8001108 <HAL_ADC_Init>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <MX_ADC3_Init+0x8a>
  {
    Error_Handler();
 80005c2:	f000 fa2b 	bl	8000a1c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80005c6:	2300      	movs	r3, #0
 80005c8:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80005ca:	f107 031c 	add.w	r3, r7, #28
 80005ce:	4619      	mov	r1, r3
 80005d0:	4810      	ldr	r0, [pc, #64]	@ (8000614 <MX_ADC3_Init+0xd8>)
 80005d2:	f001 fc89 	bl	8001ee8 <HAL_ADCEx_MultiModeConfigChannel>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <MX_ADC3_Init+0xa4>
  {
    Error_Handler();
 80005dc:	f000 fa1e 	bl	8000a1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80005e0:	2301      	movs	r3, #1
 80005e2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005e4:	2301      	movs	r3, #1
 80005e6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005e8:	2300      	movs	r3, #0
 80005ea:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80005ec:	2300      	movs	r3, #0
 80005ee:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005f0:	2300      	movs	r3, #0
 80005f2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80005f4:	2300      	movs	r3, #0
 80005f6:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80005f8:	1d3b      	adds	r3, r7, #4
 80005fa:	4619      	mov	r1, r3
 80005fc:	4805      	ldr	r0, [pc, #20]	@ (8000614 <MX_ADC3_Init+0xd8>)
 80005fe:	f001 f989 	bl	8001914 <HAL_ADC_ConfigChannel>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 8000608:	f000 fa08 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800060c:	bf00      	nop
 800060e:	3728      	adds	r7, #40	@ 0x28
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	200000b4 	.word	0x200000b4
 8000618:	50000400 	.word	0x50000400

0800061c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000620:	4b1b      	ldr	r3, [pc, #108]	@ (8000690 <MX_I2C1_Init+0x74>)
 8000622:	4a1c      	ldr	r2, [pc, #112]	@ (8000694 <MX_I2C1_Init+0x78>)
 8000624:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 8000626:	4b1a      	ldr	r3, [pc, #104]	@ (8000690 <MX_I2C1_Init+0x74>)
 8000628:	4a1b      	ldr	r2, [pc, #108]	@ (8000698 <MX_I2C1_Init+0x7c>)
 800062a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800062c:	4b18      	ldr	r3, [pc, #96]	@ (8000690 <MX_I2C1_Init+0x74>)
 800062e:	2200      	movs	r2, #0
 8000630:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000632:	4b17      	ldr	r3, [pc, #92]	@ (8000690 <MX_I2C1_Init+0x74>)
 8000634:	2201      	movs	r2, #1
 8000636:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000638:	4b15      	ldr	r3, [pc, #84]	@ (8000690 <MX_I2C1_Init+0x74>)
 800063a:	2200      	movs	r2, #0
 800063c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800063e:	4b14      	ldr	r3, [pc, #80]	@ (8000690 <MX_I2C1_Init+0x74>)
 8000640:	2200      	movs	r2, #0
 8000642:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000644:	4b12      	ldr	r3, [pc, #72]	@ (8000690 <MX_I2C1_Init+0x74>)
 8000646:	2200      	movs	r2, #0
 8000648:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800064a:	4b11      	ldr	r3, [pc, #68]	@ (8000690 <MX_I2C1_Init+0x74>)
 800064c:	2200      	movs	r2, #0
 800064e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000650:	4b0f      	ldr	r3, [pc, #60]	@ (8000690 <MX_I2C1_Init+0x74>)
 8000652:	2200      	movs	r2, #0
 8000654:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000656:	480e      	ldr	r0, [pc, #56]	@ (8000690 <MX_I2C1_Init+0x74>)
 8000658:	f002 f87a 	bl	8002750 <HAL_I2C_Init>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000662:	f000 f9db 	bl	8000a1c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000666:	2100      	movs	r1, #0
 8000668:	4809      	ldr	r0, [pc, #36]	@ (8000690 <MX_I2C1_Init+0x74>)
 800066a:	f002 f90c 	bl	8002886 <HAL_I2CEx_ConfigAnalogFilter>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000674:	f000 f9d2 	bl	8000a1c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000678:	2100      	movs	r1, #0
 800067a:	4805      	ldr	r0, [pc, #20]	@ (8000690 <MX_I2C1_Init+0x74>)
 800067c:	f002 f94e 	bl	800291c <HAL_I2CEx_ConfigDigitalFilter>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000686:	f000 f9c9 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800068a:	bf00      	nop
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	20000104 	.word	0x20000104
 8000694:	40005400 	.word	0x40005400
 8000698:	00201d2b 	.word	0x00201d2b

0800069c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000710 <MX_SPI1_Init+0x74>)
 80006a2:	4a1c      	ldr	r2, [pc, #112]	@ (8000714 <MX_SPI1_Init+0x78>)
 80006a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006a6:	4b1a      	ldr	r3, [pc, #104]	@ (8000710 <MX_SPI1_Init+0x74>)
 80006a8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80006ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006ae:	4b18      	ldr	r3, [pc, #96]	@ (8000710 <MX_SPI1_Init+0x74>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80006b4:	4b16      	ldr	r3, [pc, #88]	@ (8000710 <MX_SPI1_Init+0x74>)
 80006b6:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80006ba:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006bc:	4b14      	ldr	r3, [pc, #80]	@ (8000710 <MX_SPI1_Init+0x74>)
 80006be:	2200      	movs	r2, #0
 80006c0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006c2:	4b13      	ldr	r3, [pc, #76]	@ (8000710 <MX_SPI1_Init+0x74>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006c8:	4b11      	ldr	r3, [pc, #68]	@ (8000710 <MX_SPI1_Init+0x74>)
 80006ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006ce:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80006d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000710 <MX_SPI1_Init+0x74>)
 80006d2:	2208      	movs	r2, #8
 80006d4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000710 <MX_SPI1_Init+0x74>)
 80006d8:	2200      	movs	r2, #0
 80006da:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000710 <MX_SPI1_Init+0x74>)
 80006de:	2200      	movs	r2, #0
 80006e0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000710 <MX_SPI1_Init+0x74>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80006e8:	4b09      	ldr	r3, [pc, #36]	@ (8000710 <MX_SPI1_Init+0x74>)
 80006ea:	2207      	movs	r2, #7
 80006ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80006ee:	4b08      	ldr	r3, [pc, #32]	@ (8000710 <MX_SPI1_Init+0x74>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80006f4:	4b06      	ldr	r3, [pc, #24]	@ (8000710 <MX_SPI1_Init+0x74>)
 80006f6:	2208      	movs	r2, #8
 80006f8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006fa:	4805      	ldr	r0, [pc, #20]	@ (8000710 <MX_SPI1_Init+0x74>)
 80006fc:	f003 fe30 	bl	8004360 <HAL_SPI_Init>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000706:	f000 f989 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	20000158 	.word	0x20000158
 8000714:	40013000 	.word	0x40013000

08000718 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b08e      	sub	sp, #56	@ 0x38
 800071c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800071e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800072c:	f107 031c 	add.w	r3, r7, #28
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000738:	463b      	mov	r3, r7
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
 8000742:	60da      	str	r2, [r3, #12]
 8000744:	611a      	str	r2, [r3, #16]
 8000746:	615a      	str	r2, [r3, #20]
 8000748:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800074a:	4b2c      	ldr	r3, [pc, #176]	@ (80007fc <MX_TIM4_Init+0xe4>)
 800074c:	4a2c      	ldr	r2, [pc, #176]	@ (8000800 <MX_TIM4_Init+0xe8>)
 800074e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 8000750:	4b2a      	ldr	r3, [pc, #168]	@ (80007fc <MX_TIM4_Init+0xe4>)
 8000752:	2247      	movs	r2, #71	@ 0x47
 8000754:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000756:	4b29      	ldr	r3, [pc, #164]	@ (80007fc <MX_TIM4_Init+0xe4>)
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 249;
 800075c:	4b27      	ldr	r3, [pc, #156]	@ (80007fc <MX_TIM4_Init+0xe4>)
 800075e:	22f9      	movs	r2, #249	@ 0xf9
 8000760:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000762:	4b26      	ldr	r3, [pc, #152]	@ (80007fc <MX_TIM4_Init+0xe4>)
 8000764:	2200      	movs	r2, #0
 8000766:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000768:	4b24      	ldr	r3, [pc, #144]	@ (80007fc <MX_TIM4_Init+0xe4>)
 800076a:	2200      	movs	r2, #0
 800076c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800076e:	4823      	ldr	r0, [pc, #140]	@ (80007fc <MX_TIM4_Init+0xe4>)
 8000770:	f003 fea1 	bl	80044b6 <HAL_TIM_Base_Init>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800077a:	f000 f94f 	bl	8000a1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800077e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000782:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000784:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000788:	4619      	mov	r1, r3
 800078a:	481c      	ldr	r0, [pc, #112]	@ (80007fc <MX_TIM4_Init+0xe4>)
 800078c:	f004 f960 	bl	8004a50 <HAL_TIM_ConfigClockSource>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000796:	f000 f941 	bl	8000a1c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800079a:	4818      	ldr	r0, [pc, #96]	@ (80007fc <MX_TIM4_Init+0xe4>)
 800079c:	f003 fee2 	bl	8004564 <HAL_TIM_PWM_Init>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80007a6:	f000 f939 	bl	8000a1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007aa:	2300      	movs	r3, #0
 80007ac:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007ae:	2300      	movs	r3, #0
 80007b0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80007b2:	f107 031c 	add.w	r3, r7, #28
 80007b6:	4619      	mov	r1, r3
 80007b8:	4810      	ldr	r0, [pc, #64]	@ (80007fc <MX_TIM4_Init+0xe4>)
 80007ba:	f004 fe45 	bl	8005448 <HAL_TIMEx_MasterConfigSynchronization>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80007c4:	f000 f92a 	bl	8000a1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007c8:	2360      	movs	r3, #96	@ 0x60
 80007ca:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80007cc:	2300      	movs	r3, #0
 80007ce:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007d0:	2300      	movs	r3, #0
 80007d2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007d4:	2300      	movs	r3, #0
 80007d6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007d8:	463b      	mov	r3, r7
 80007da:	2200      	movs	r2, #0
 80007dc:	4619      	mov	r1, r3
 80007de:	4807      	ldr	r0, [pc, #28]	@ (80007fc <MX_TIM4_Init+0xe4>)
 80007e0:	f004 f822 	bl	8004828 <HAL_TIM_PWM_ConfigChannel>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80007ea:	f000 f917 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80007ee:	4803      	ldr	r0, [pc, #12]	@ (80007fc <MX_TIM4_Init+0xe4>)
 80007f0:	f000 fa24 	bl	8000c3c <HAL_TIM_MspPostInit>

}
 80007f4:	bf00      	nop
 80007f6:	3738      	adds	r7, #56	@ 0x38
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	200001bc 	.word	0x200001bc
 8000800:	40000800 	.word	0x40000800

08000804 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000808:	4b14      	ldr	r3, [pc, #80]	@ (800085c <MX_USART2_UART_Init+0x58>)
 800080a:	4a15      	ldr	r2, [pc, #84]	@ (8000860 <MX_USART2_UART_Init+0x5c>)
 800080c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800080e:	4b13      	ldr	r3, [pc, #76]	@ (800085c <MX_USART2_UART_Init+0x58>)
 8000810:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000814:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000816:	4b11      	ldr	r3, [pc, #68]	@ (800085c <MX_USART2_UART_Init+0x58>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800081c:	4b0f      	ldr	r3, [pc, #60]	@ (800085c <MX_USART2_UART_Init+0x58>)
 800081e:	2200      	movs	r2, #0
 8000820:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000822:	4b0e      	ldr	r3, [pc, #56]	@ (800085c <MX_USART2_UART_Init+0x58>)
 8000824:	2200      	movs	r2, #0
 8000826:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000828:	4b0c      	ldr	r3, [pc, #48]	@ (800085c <MX_USART2_UART_Init+0x58>)
 800082a:	220c      	movs	r2, #12
 800082c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800082e:	4b0b      	ldr	r3, [pc, #44]	@ (800085c <MX_USART2_UART_Init+0x58>)
 8000830:	2200      	movs	r2, #0
 8000832:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000834:	4b09      	ldr	r3, [pc, #36]	@ (800085c <MX_USART2_UART_Init+0x58>)
 8000836:	2200      	movs	r2, #0
 8000838:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800083a:	4b08      	ldr	r3, [pc, #32]	@ (800085c <MX_USART2_UART_Init+0x58>)
 800083c:	2200      	movs	r2, #0
 800083e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000840:	4b06      	ldr	r3, [pc, #24]	@ (800085c <MX_USART2_UART_Init+0x58>)
 8000842:	2200      	movs	r2, #0
 8000844:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000846:	4805      	ldr	r0, [pc, #20]	@ (800085c <MX_USART2_UART_Init+0x58>)
 8000848:	f004 fe7e 	bl	8005548 <HAL_UART_Init>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000852:	f000 f8e3 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	20000208 	.word	0x20000208
 8000860:	40004400 	.word	0x40004400

08000864 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000868:	4b14      	ldr	r3, [pc, #80]	@ (80008bc <MX_USART3_UART_Init+0x58>)
 800086a:	4a15      	ldr	r2, [pc, #84]	@ (80008c0 <MX_USART3_UART_Init+0x5c>)
 800086c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 800086e:	4b13      	ldr	r3, [pc, #76]	@ (80008bc <MX_USART3_UART_Init+0x58>)
 8000870:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000874:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000876:	4b11      	ldr	r3, [pc, #68]	@ (80008bc <MX_USART3_UART_Init+0x58>)
 8000878:	2200      	movs	r2, #0
 800087a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800087c:	4b0f      	ldr	r3, [pc, #60]	@ (80008bc <MX_USART3_UART_Init+0x58>)
 800087e:	2200      	movs	r2, #0
 8000880:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000882:	4b0e      	ldr	r3, [pc, #56]	@ (80008bc <MX_USART3_UART_Init+0x58>)
 8000884:	2200      	movs	r2, #0
 8000886:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000888:	4b0c      	ldr	r3, [pc, #48]	@ (80008bc <MX_USART3_UART_Init+0x58>)
 800088a:	220c      	movs	r2, #12
 800088c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800088e:	4b0b      	ldr	r3, [pc, #44]	@ (80008bc <MX_USART3_UART_Init+0x58>)
 8000890:	2200      	movs	r2, #0
 8000892:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000894:	4b09      	ldr	r3, [pc, #36]	@ (80008bc <MX_USART3_UART_Init+0x58>)
 8000896:	2200      	movs	r2, #0
 8000898:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800089a:	4b08      	ldr	r3, [pc, #32]	@ (80008bc <MX_USART3_UART_Init+0x58>)
 800089c:	2200      	movs	r2, #0
 800089e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008a0:	4b06      	ldr	r3, [pc, #24]	@ (80008bc <MX_USART3_UART_Init+0x58>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008a6:	4805      	ldr	r0, [pc, #20]	@ (80008bc <MX_USART3_UART_Init+0x58>)
 80008a8:	f004 fe4e 	bl	8005548 <HAL_UART_Init>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80008b2:	f000 f8b3 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	20000290 	.word	0x20000290
 80008c0:	40004800 	.word	0x40004800

080008c4 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80008c8:	4b0d      	ldr	r3, [pc, #52]	@ (8000900 <MX_USB_PCD_Init+0x3c>)
 80008ca:	4a0e      	ldr	r2, [pc, #56]	@ (8000904 <MX_USB_PCD_Init+0x40>)
 80008cc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80008ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000900 <MX_USB_PCD_Init+0x3c>)
 80008d0:	2208      	movs	r2, #8
 80008d2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80008d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000900 <MX_USB_PCD_Init+0x3c>)
 80008d6:	2202      	movs	r2, #2
 80008d8:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008da:	4b09      	ldr	r3, [pc, #36]	@ (8000900 <MX_USB_PCD_Init+0x3c>)
 80008dc:	2202      	movs	r2, #2
 80008de:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80008e0:	4b07      	ldr	r3, [pc, #28]	@ (8000900 <MX_USB_PCD_Init+0x3c>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80008e6:	4b06      	ldr	r3, [pc, #24]	@ (8000900 <MX_USB_PCD_Init+0x3c>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80008ec:	4804      	ldr	r0, [pc, #16]	@ (8000900 <MX_USB_PCD_Init+0x3c>)
 80008ee:	f002 f861 	bl	80029b4 <HAL_PCD_Init>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 80008f8:	f000 f890 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80008fc:	bf00      	nop
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	20000318 	.word	0x20000318
 8000904:	40005c00 	.word	0x40005c00

08000908 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b08c      	sub	sp, #48	@ 0x30
 800090c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090e:	f107 031c 	add.w	r3, r7, #28
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	605a      	str	r2, [r3, #4]
 8000918:	609a      	str	r2, [r3, #8]
 800091a:	60da      	str	r2, [r3, #12]
 800091c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800091e:	4b3d      	ldr	r3, [pc, #244]	@ (8000a14 <MX_GPIO_Init+0x10c>)
 8000920:	695b      	ldr	r3, [r3, #20]
 8000922:	4a3c      	ldr	r2, [pc, #240]	@ (8000a14 <MX_GPIO_Init+0x10c>)
 8000924:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000928:	6153      	str	r3, [r2, #20]
 800092a:	4b3a      	ldr	r3, [pc, #232]	@ (8000a14 <MX_GPIO_Init+0x10c>)
 800092c:	695b      	ldr	r3, [r3, #20]
 800092e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000932:	61bb      	str	r3, [r7, #24]
 8000934:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000936:	4b37      	ldr	r3, [pc, #220]	@ (8000a14 <MX_GPIO_Init+0x10c>)
 8000938:	695b      	ldr	r3, [r3, #20]
 800093a:	4a36      	ldr	r2, [pc, #216]	@ (8000a14 <MX_GPIO_Init+0x10c>)
 800093c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000940:	6153      	str	r3, [r2, #20]
 8000942:	4b34      	ldr	r3, [pc, #208]	@ (8000a14 <MX_GPIO_Init+0x10c>)
 8000944:	695b      	ldr	r3, [r3, #20]
 8000946:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800094a:	617b      	str	r3, [r7, #20]
 800094c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800094e:	4b31      	ldr	r3, [pc, #196]	@ (8000a14 <MX_GPIO_Init+0x10c>)
 8000950:	695b      	ldr	r3, [r3, #20]
 8000952:	4a30      	ldr	r2, [pc, #192]	@ (8000a14 <MX_GPIO_Init+0x10c>)
 8000954:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000958:	6153      	str	r3, [r2, #20]
 800095a:	4b2e      	ldr	r3, [pc, #184]	@ (8000a14 <MX_GPIO_Init+0x10c>)
 800095c:	695b      	ldr	r3, [r3, #20]
 800095e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000962:	613b      	str	r3, [r7, #16]
 8000964:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000966:	4b2b      	ldr	r3, [pc, #172]	@ (8000a14 <MX_GPIO_Init+0x10c>)
 8000968:	695b      	ldr	r3, [r3, #20]
 800096a:	4a2a      	ldr	r2, [pc, #168]	@ (8000a14 <MX_GPIO_Init+0x10c>)
 800096c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000970:	6153      	str	r3, [r2, #20]
 8000972:	4b28      	ldr	r3, [pc, #160]	@ (8000a14 <MX_GPIO_Init+0x10c>)
 8000974:	695b      	ldr	r3, [r3, #20]
 8000976:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800097e:	4b25      	ldr	r3, [pc, #148]	@ (8000a14 <MX_GPIO_Init+0x10c>)
 8000980:	695b      	ldr	r3, [r3, #20]
 8000982:	4a24      	ldr	r2, [pc, #144]	@ (8000a14 <MX_GPIO_Init+0x10c>)
 8000984:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000988:	6153      	str	r3, [r2, #20]
 800098a:	4b22      	ldr	r3, [pc, #136]	@ (8000a14 <MX_GPIO_Init+0x10c>)
 800098c:	695b      	ldr	r3, [r3, #20]
 800098e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000992:	60bb      	str	r3, [r7, #8]
 8000994:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000996:	4b1f      	ldr	r3, [pc, #124]	@ (8000a14 <MX_GPIO_Init+0x10c>)
 8000998:	695b      	ldr	r3, [r3, #20]
 800099a:	4a1e      	ldr	r2, [pc, #120]	@ (8000a14 <MX_GPIO_Init+0x10c>)
 800099c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80009a0:	6153      	str	r3, [r2, #20]
 80009a2:	4b1c      	ldr	r3, [pc, #112]	@ (8000a14 <MX_GPIO_Init+0x10c>)
 80009a4:	695b      	ldr	r3, [r3, #20]
 80009a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80009ae:	2200      	movs	r2, #0
 80009b0:	f64f 7108 	movw	r1, #65288	@ 0xff08
 80009b4:	4818      	ldr	r0, [pc, #96]	@ (8000a18 <MX_GPIO_Init+0x110>)
 80009b6:	f001 feb3 	bl	8002720 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 80009ba:	2337      	movs	r3, #55	@ 0x37
 80009bc:	61fb      	str	r3, [r7, #28]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009be:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80009c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	2300      	movs	r3, #0
 80009c6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009c8:	f107 031c 	add.w	r3, r7, #28
 80009cc:	4619      	mov	r1, r3
 80009ce:	4812      	ldr	r0, [pc, #72]	@ (8000a18 <MX_GPIO_Init+0x110>)
 80009d0:	f001 fd2c 	bl	800242c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80009d4:	f64f 7308 	movw	r3, #65288	@ 0xff08
 80009d8:	61fb      	str	r3, [r7, #28]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009da:	2301      	movs	r3, #1
 80009dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e2:	2300      	movs	r3, #0
 80009e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009e6:	f107 031c 	add.w	r3, r7, #28
 80009ea:	4619      	mov	r1, r3
 80009ec:	480a      	ldr	r0, [pc, #40]	@ (8000a18 <MX_GPIO_Init+0x110>)
 80009ee:	f001 fd1d 	bl	800242c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009f2:	2301      	movs	r3, #1
 80009f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f6:	2300      	movs	r3, #0
 80009f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009fe:	f107 031c 	add.w	r3, r7, #28
 8000a02:	4619      	mov	r1, r3
 8000a04:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a08:	f001 fd10 	bl	800242c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a0c:	bf00      	nop
 8000a0e:	3730      	adds	r7, #48	@ 0x30
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	40021000 	.word	0x40021000
 8000a18:	48001000 	.word	0x48001000

08000a1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a20:	b672      	cpsid	i
}
 8000a22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a24:	bf00      	nop
 8000a26:	e7fd      	b.n	8000a24 <Error_Handler+0x8>

08000a28 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a2e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a6c <HAL_MspInit+0x44>)
 8000a30:	699b      	ldr	r3, [r3, #24]
 8000a32:	4a0e      	ldr	r2, [pc, #56]	@ (8000a6c <HAL_MspInit+0x44>)
 8000a34:	f043 0301 	orr.w	r3, r3, #1
 8000a38:	6193      	str	r3, [r2, #24]
 8000a3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a6c <HAL_MspInit+0x44>)
 8000a3c:	699b      	ldr	r3, [r3, #24]
 8000a3e:	f003 0301 	and.w	r3, r3, #1
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a46:	4b09      	ldr	r3, [pc, #36]	@ (8000a6c <HAL_MspInit+0x44>)
 8000a48:	69db      	ldr	r3, [r3, #28]
 8000a4a:	4a08      	ldr	r2, [pc, #32]	@ (8000a6c <HAL_MspInit+0x44>)
 8000a4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a50:	61d3      	str	r3, [r2, #28]
 8000a52:	4b06      	ldr	r3, [pc, #24]	@ (8000a6c <HAL_MspInit+0x44>)
 8000a54:	69db      	ldr	r3, [r3, #28]
 8000a56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a5a:	603b      	str	r3, [r7, #0]
 8000a5c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a5e:	2007      	movs	r0, #7
 8000a60:	f001 fcb0 	bl	80023c4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a64:	bf00      	nop
 8000a66:	3708      	adds	r7, #8
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	40021000 	.word	0x40021000

08000a70 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b08a      	sub	sp, #40	@ 0x28
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a78:	f107 0314 	add.w	r3, r7, #20
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a15      	ldr	r2, [pc, #84]	@ (8000ae4 <HAL_ADC_MspInit+0x74>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d123      	bne.n	8000ada <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC34_CLK_ENABLE();
 8000a92:	4b15      	ldr	r3, [pc, #84]	@ (8000ae8 <HAL_ADC_MspInit+0x78>)
 8000a94:	695b      	ldr	r3, [r3, #20]
 8000a96:	4a14      	ldr	r2, [pc, #80]	@ (8000ae8 <HAL_ADC_MspInit+0x78>)
 8000a98:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000a9c:	6153      	str	r3, [r2, #20]
 8000a9e:	4b12      	ldr	r3, [pc, #72]	@ (8000ae8 <HAL_ADC_MspInit+0x78>)
 8000aa0:	695b      	ldr	r3, [r3, #20]
 8000aa2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000aa6:	613b      	str	r3, [r7, #16]
 8000aa8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aaa:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae8 <HAL_ADC_MspInit+0x78>)
 8000aac:	695b      	ldr	r3, [r3, #20]
 8000aae:	4a0e      	ldr	r2, [pc, #56]	@ (8000ae8 <HAL_ADC_MspInit+0x78>)
 8000ab0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ab4:	6153      	str	r3, [r2, #20]
 8000ab6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae8 <HAL_ADC_MspInit+0x78>)
 8000ab8:	695b      	ldr	r3, [r3, #20]
 8000aba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PB1     ------> ADC3_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ac6:	2303      	movs	r3, #3
 8000ac8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ace:	f107 0314 	add.w	r3, r7, #20
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4805      	ldr	r0, [pc, #20]	@ (8000aec <HAL_ADC_MspInit+0x7c>)
 8000ad6:	f001 fca9 	bl	800242c <HAL_GPIO_Init>

  /* USER CODE END ADC3_MspInit 1 */

  }

}
 8000ada:	bf00      	nop
 8000adc:	3728      	adds	r7, #40	@ 0x28
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	50000400 	.word	0x50000400
 8000ae8:	40021000 	.word	0x40021000
 8000aec:	48000400 	.word	0x48000400

08000af0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b08a      	sub	sp, #40	@ 0x28
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af8:	f107 0314 	add.w	r3, r7, #20
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
 8000b04:	60da      	str	r2, [r3, #12]
 8000b06:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a17      	ldr	r2, [pc, #92]	@ (8000b6c <HAL_I2C_MspInit+0x7c>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d127      	bne.n	8000b62 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b12:	4b17      	ldr	r3, [pc, #92]	@ (8000b70 <HAL_I2C_MspInit+0x80>)
 8000b14:	695b      	ldr	r3, [r3, #20]
 8000b16:	4a16      	ldr	r2, [pc, #88]	@ (8000b70 <HAL_I2C_MspInit+0x80>)
 8000b18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b1c:	6153      	str	r3, [r2, #20]
 8000b1e:	4b14      	ldr	r3, [pc, #80]	@ (8000b70 <HAL_I2C_MspInit+0x80>)
 8000b20:	695b      	ldr	r3, [r3, #20]
 8000b22:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000b26:	613b      	str	r3, [r7, #16]
 8000b28:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000b2a:	23c0      	movs	r3, #192	@ 0xc0
 8000b2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b2e:	2312      	movs	r3, #18
 8000b30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b32:	2301      	movs	r3, #1
 8000b34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b36:	2303      	movs	r3, #3
 8000b38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b3a:	2304      	movs	r3, #4
 8000b3c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b3e:	f107 0314 	add.w	r3, r7, #20
 8000b42:	4619      	mov	r1, r3
 8000b44:	480b      	ldr	r0, [pc, #44]	@ (8000b74 <HAL_I2C_MspInit+0x84>)
 8000b46:	f001 fc71 	bl	800242c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b4a:	4b09      	ldr	r3, [pc, #36]	@ (8000b70 <HAL_I2C_MspInit+0x80>)
 8000b4c:	69db      	ldr	r3, [r3, #28]
 8000b4e:	4a08      	ldr	r2, [pc, #32]	@ (8000b70 <HAL_I2C_MspInit+0x80>)
 8000b50:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b54:	61d3      	str	r3, [r2, #28]
 8000b56:	4b06      	ldr	r3, [pc, #24]	@ (8000b70 <HAL_I2C_MspInit+0x80>)
 8000b58:	69db      	ldr	r3, [r3, #28]
 8000b5a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b5e:	60fb      	str	r3, [r7, #12]
 8000b60:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000b62:	bf00      	nop
 8000b64:	3728      	adds	r7, #40	@ 0x28
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40005400 	.word	0x40005400
 8000b70:	40021000 	.word	0x40021000
 8000b74:	48000400 	.word	0x48000400

08000b78 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b08a      	sub	sp, #40	@ 0x28
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b80:	f107 0314 	add.w	r3, r7, #20
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	605a      	str	r2, [r3, #4]
 8000b8a:	609a      	str	r2, [r3, #8]
 8000b8c:	60da      	str	r2, [r3, #12]
 8000b8e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a17      	ldr	r2, [pc, #92]	@ (8000bf4 <HAL_SPI_MspInit+0x7c>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d128      	bne.n	8000bec <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b9a:	4b17      	ldr	r3, [pc, #92]	@ (8000bf8 <HAL_SPI_MspInit+0x80>)
 8000b9c:	699b      	ldr	r3, [r3, #24]
 8000b9e:	4a16      	ldr	r2, [pc, #88]	@ (8000bf8 <HAL_SPI_MspInit+0x80>)
 8000ba0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000ba4:	6193      	str	r3, [r2, #24]
 8000ba6:	4b14      	ldr	r3, [pc, #80]	@ (8000bf8 <HAL_SPI_MspInit+0x80>)
 8000ba8:	699b      	ldr	r3, [r3, #24]
 8000baa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000bae:	613b      	str	r3, [r7, #16]
 8000bb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb2:	4b11      	ldr	r3, [pc, #68]	@ (8000bf8 <HAL_SPI_MspInit+0x80>)
 8000bb4:	695b      	ldr	r3, [r3, #20]
 8000bb6:	4a10      	ldr	r2, [pc, #64]	@ (8000bf8 <HAL_SPI_MspInit+0x80>)
 8000bb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bbc:	6153      	str	r3, [r2, #20]
 8000bbe:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf8 <HAL_SPI_MspInit+0x80>)
 8000bc0:	695b      	ldr	r3, [r3, #20]
 8000bc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000bca:	23e0      	movs	r3, #224	@ 0xe0
 8000bcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bd6:	2303      	movs	r3, #3
 8000bd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bda:	2305      	movs	r3, #5
 8000bdc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bde:	f107 0314 	add.w	r3, r7, #20
 8000be2:	4619      	mov	r1, r3
 8000be4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000be8:	f001 fc20 	bl	800242c <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000bec:	bf00      	nop
 8000bee:	3728      	adds	r7, #40	@ 0x28
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	40013000 	.word	0x40013000
 8000bf8:	40021000 	.word	0x40021000

08000bfc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b085      	sub	sp, #20
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a0a      	ldr	r2, [pc, #40]	@ (8000c34 <HAL_TIM_Base_MspInit+0x38>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d10b      	bne.n	8000c26 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000c0e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c38 <HAL_TIM_Base_MspInit+0x3c>)
 8000c10:	69db      	ldr	r3, [r3, #28]
 8000c12:	4a09      	ldr	r2, [pc, #36]	@ (8000c38 <HAL_TIM_Base_MspInit+0x3c>)
 8000c14:	f043 0304 	orr.w	r3, r3, #4
 8000c18:	61d3      	str	r3, [r2, #28]
 8000c1a:	4b07      	ldr	r3, [pc, #28]	@ (8000c38 <HAL_TIM_Base_MspInit+0x3c>)
 8000c1c:	69db      	ldr	r3, [r3, #28]
 8000c1e:	f003 0304 	and.w	r3, r3, #4
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8000c26:	bf00      	nop
 8000c28:	3714      	adds	r7, #20
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	40000800 	.word	0x40000800
 8000c38:	40021000 	.word	0x40021000

08000c3c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b088      	sub	sp, #32
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c44:	f107 030c 	add.w	r3, r7, #12
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]
 8000c52:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a11      	ldr	r2, [pc, #68]	@ (8000ca0 <HAL_TIM_MspPostInit+0x64>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d11c      	bne.n	8000c98 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c5e:	4b11      	ldr	r3, [pc, #68]	@ (8000ca4 <HAL_TIM_MspPostInit+0x68>)
 8000c60:	695b      	ldr	r3, [r3, #20]
 8000c62:	4a10      	ldr	r2, [pc, #64]	@ (8000ca4 <HAL_TIM_MspPostInit+0x68>)
 8000c64:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000c68:	6153      	str	r3, [r2, #20]
 8000c6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ca4 <HAL_TIM_MspPostInit+0x68>)
 8000c6c:	695b      	ldr	r3, [r3, #20]
 8000c6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000c72:	60bb      	str	r3, [r7, #8]
 8000c74:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000c76:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c7a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c80:	2300      	movs	r3, #0
 8000c82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c84:	2300      	movs	r3, #0
 8000c86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c8c:	f107 030c 	add.w	r3, r7, #12
 8000c90:	4619      	mov	r1, r3
 8000c92:	4805      	ldr	r0, [pc, #20]	@ (8000ca8 <HAL_TIM_MspPostInit+0x6c>)
 8000c94:	f001 fbca 	bl	800242c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000c98:	bf00      	nop
 8000c9a:	3720      	adds	r7, #32
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	40000800 	.word	0x40000800
 8000ca4:	40021000 	.word	0x40021000
 8000ca8:	48000c00 	.word	0x48000c00

08000cac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b08c      	sub	sp, #48	@ 0x30
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb4:	f107 031c 	add.w	r3, r7, #28
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]
 8000cc0:	60da      	str	r2, [r3, #12]
 8000cc2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a2f      	ldr	r2, [pc, #188]	@ (8000d88 <HAL_UART_MspInit+0xdc>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d129      	bne.n	8000d22 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cce:	4b2f      	ldr	r3, [pc, #188]	@ (8000d8c <HAL_UART_MspInit+0xe0>)
 8000cd0:	69db      	ldr	r3, [r3, #28]
 8000cd2:	4a2e      	ldr	r2, [pc, #184]	@ (8000d8c <HAL_UART_MspInit+0xe0>)
 8000cd4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cd8:	61d3      	str	r3, [r2, #28]
 8000cda:	4b2c      	ldr	r3, [pc, #176]	@ (8000d8c <HAL_UART_MspInit+0xe0>)
 8000cdc:	69db      	ldr	r3, [r3, #28]
 8000cde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ce2:	61bb      	str	r3, [r7, #24]
 8000ce4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce6:	4b29      	ldr	r3, [pc, #164]	@ (8000d8c <HAL_UART_MspInit+0xe0>)
 8000ce8:	695b      	ldr	r3, [r3, #20]
 8000cea:	4a28      	ldr	r2, [pc, #160]	@ (8000d8c <HAL_UART_MspInit+0xe0>)
 8000cec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cf0:	6153      	str	r3, [r2, #20]
 8000cf2:	4b26      	ldr	r3, [pc, #152]	@ (8000d8c <HAL_UART_MspInit+0xe0>)
 8000cf4:	695b      	ldr	r3, [r3, #20]
 8000cf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cfa:	617b      	str	r3, [r7, #20]
 8000cfc:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000cfe:	230c      	movs	r3, #12
 8000d00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d02:	2302      	movs	r3, #2
 8000d04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d06:	2300      	movs	r3, #0
 8000d08:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d0a:	2303      	movs	r3, #3
 8000d0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d0e:	2307      	movs	r3, #7
 8000d10:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d12:	f107 031c 	add.w	r3, r7, #28
 8000d16:	4619      	mov	r1, r3
 8000d18:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d1c:	f001 fb86 	bl	800242c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d20:	e02d      	b.n	8000d7e <HAL_UART_MspInit+0xd2>
  else if(huart->Instance==USART3)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a1a      	ldr	r2, [pc, #104]	@ (8000d90 <HAL_UART_MspInit+0xe4>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d128      	bne.n	8000d7e <HAL_UART_MspInit+0xd2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d2c:	4b17      	ldr	r3, [pc, #92]	@ (8000d8c <HAL_UART_MspInit+0xe0>)
 8000d2e:	69db      	ldr	r3, [r3, #28]
 8000d30:	4a16      	ldr	r2, [pc, #88]	@ (8000d8c <HAL_UART_MspInit+0xe0>)
 8000d32:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d36:	61d3      	str	r3, [r2, #28]
 8000d38:	4b14      	ldr	r3, [pc, #80]	@ (8000d8c <HAL_UART_MspInit+0xe0>)
 8000d3a:	69db      	ldr	r3, [r3, #28]
 8000d3c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000d40:	613b      	str	r3, [r7, #16]
 8000d42:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d44:	4b11      	ldr	r3, [pc, #68]	@ (8000d8c <HAL_UART_MspInit+0xe0>)
 8000d46:	695b      	ldr	r3, [r3, #20]
 8000d48:	4a10      	ldr	r2, [pc, #64]	@ (8000d8c <HAL_UART_MspInit+0xe0>)
 8000d4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000d4e:	6153      	str	r3, [r2, #20]
 8000d50:	4b0e      	ldr	r3, [pc, #56]	@ (8000d8c <HAL_UART_MspInit+0xe0>)
 8000d52:	695b      	ldr	r3, [r3, #20]
 8000d54:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000d58:	60fb      	str	r3, [r7, #12]
 8000d5a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d5c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000d60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d62:	2302      	movs	r3, #2
 8000d64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d6a:	2303      	movs	r3, #3
 8000d6c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d6e:	2307      	movs	r3, #7
 8000d70:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d72:	f107 031c 	add.w	r3, r7, #28
 8000d76:	4619      	mov	r1, r3
 8000d78:	4806      	ldr	r0, [pc, #24]	@ (8000d94 <HAL_UART_MspInit+0xe8>)
 8000d7a:	f001 fb57 	bl	800242c <HAL_GPIO_Init>
}
 8000d7e:	bf00      	nop
 8000d80:	3730      	adds	r7, #48	@ 0x30
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40004400 	.word	0x40004400
 8000d8c:	40021000 	.word	0x40021000
 8000d90:	40004800 	.word	0x40004800
 8000d94:	48000c00 	.word	0x48000c00

08000d98 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b08a      	sub	sp, #40	@ 0x28
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da0:	f107 0314 	add.w	r3, r7, #20
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	609a      	str	r2, [r3, #8]
 8000dac:	60da      	str	r2, [r3, #12]
 8000dae:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a18      	ldr	r2, [pc, #96]	@ (8000e18 <HAL_PCD_MspInit+0x80>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d129      	bne.n	8000e0e <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dba:	4b18      	ldr	r3, [pc, #96]	@ (8000e1c <HAL_PCD_MspInit+0x84>)
 8000dbc:	695b      	ldr	r3, [r3, #20]
 8000dbe:	4a17      	ldr	r2, [pc, #92]	@ (8000e1c <HAL_PCD_MspInit+0x84>)
 8000dc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dc4:	6153      	str	r3, [r2, #20]
 8000dc6:	4b15      	ldr	r3, [pc, #84]	@ (8000e1c <HAL_PCD_MspInit+0x84>)
 8000dc8:	695b      	ldr	r3, [r3, #20]
 8000dca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dce:	613b      	str	r3, [r7, #16]
 8000dd0:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8000dd2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000dd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000de0:	2303      	movs	r3, #3
 8000de2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000de4:	230e      	movs	r3, #14
 8000de6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de8:	f107 0314 	add.w	r3, r7, #20
 8000dec:	4619      	mov	r1, r3
 8000dee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000df2:	f001 fb1b 	bl	800242c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000df6:	4b09      	ldr	r3, [pc, #36]	@ (8000e1c <HAL_PCD_MspInit+0x84>)
 8000df8:	69db      	ldr	r3, [r3, #28]
 8000dfa:	4a08      	ldr	r2, [pc, #32]	@ (8000e1c <HAL_PCD_MspInit+0x84>)
 8000dfc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000e00:	61d3      	str	r3, [r2, #28]
 8000e02:	4b06      	ldr	r3, [pc, #24]	@ (8000e1c <HAL_PCD_MspInit+0x84>)
 8000e04:	69db      	ldr	r3, [r3, #28]
 8000e06:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000e0a:	60fb      	str	r3, [r7, #12]
 8000e0c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END USB_MspInit 1 */

  }

}
 8000e0e:	bf00      	nop
 8000e10:	3728      	adds	r7, #40	@ 0x28
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	40005c00 	.word	0x40005c00
 8000e1c:	40021000 	.word	0x40021000

08000e20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e24:	bf00      	nop
 8000e26:	e7fd      	b.n	8000e24 <NMI_Handler+0x4>

08000e28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e2c:	bf00      	nop
 8000e2e:	e7fd      	b.n	8000e2c <HardFault_Handler+0x4>

08000e30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e34:	bf00      	nop
 8000e36:	e7fd      	b.n	8000e34 <MemManage_Handler+0x4>

08000e38 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e3c:	bf00      	nop
 8000e3e:	e7fd      	b.n	8000e3c <BusFault_Handler+0x4>

08000e40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e44:	bf00      	nop
 8000e46:	e7fd      	b.n	8000e44 <UsageFault_Handler+0x4>

08000e48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr

08000e56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e56:	b480      	push	{r7}
 8000e58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr

08000e64 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e68:	bf00      	nop
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr

08000e72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e76:	f000 f927 	bl	80010c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e7a:	bf00      	nop
 8000e7c:	bd80      	pop	{r7, pc}

08000e7e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	b086      	sub	sp, #24
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	60f8      	str	r0, [r7, #12]
 8000e86:	60b9      	str	r1, [r7, #8]
 8000e88:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	617b      	str	r3, [r7, #20]
 8000e8e:	e00a      	b.n	8000ea6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e90:	f3af 8000 	nop.w
 8000e94:	4601      	mov	r1, r0
 8000e96:	68bb      	ldr	r3, [r7, #8]
 8000e98:	1c5a      	adds	r2, r3, #1
 8000e9a:	60ba      	str	r2, [r7, #8]
 8000e9c:	b2ca      	uxtb	r2, r1
 8000e9e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	617b      	str	r3, [r7, #20]
 8000ea6:	697a      	ldr	r2, [r7, #20]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	429a      	cmp	r2, r3
 8000eac:	dbf0      	blt.n	8000e90 <_read+0x12>
  }

  return len;
 8000eae:	687b      	ldr	r3, [r7, #4]
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3718      	adds	r7, #24
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b086      	sub	sp, #24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	60f8      	str	r0, [r7, #12]
 8000ec0:	60b9      	str	r1, [r7, #8]
 8000ec2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	617b      	str	r3, [r7, #20]
 8000ec8:	e009      	b.n	8000ede <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000eca:	68bb      	ldr	r3, [r7, #8]
 8000ecc:	1c5a      	adds	r2, r3, #1
 8000ece:	60ba      	str	r2, [r7, #8]
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	3301      	adds	r3, #1
 8000edc:	617b      	str	r3, [r7, #20]
 8000ede:	697a      	ldr	r2, [r7, #20]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	429a      	cmp	r2, r3
 8000ee4:	dbf1      	blt.n	8000eca <_write+0x12>
  }
  return len;
 8000ee6:	687b      	ldr	r3, [r7, #4]
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3718      	adds	r7, #24
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <_close>:

int _close(int file)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ef8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr

08000f08 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f18:	605a      	str	r2, [r3, #4]
  return 0;
 8000f1a:	2300      	movs	r3, #0
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <_isatty>:

int _isatty(int file)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f30:	2301      	movs	r3, #1
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr

08000f3e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	b085      	sub	sp, #20
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	60f8      	str	r0, [r7, #12]
 8000f46:	60b9      	str	r1, [r7, #8]
 8000f48:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f4a:	2300      	movs	r3, #0
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3714      	adds	r7, #20
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b086      	sub	sp, #24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f60:	4a14      	ldr	r2, [pc, #80]	@ (8000fb4 <_sbrk+0x5c>)
 8000f62:	4b15      	ldr	r3, [pc, #84]	@ (8000fb8 <_sbrk+0x60>)
 8000f64:	1ad3      	subs	r3, r2, r3
 8000f66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f6c:	4b13      	ldr	r3, [pc, #76]	@ (8000fbc <_sbrk+0x64>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d102      	bne.n	8000f7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f74:	4b11      	ldr	r3, [pc, #68]	@ (8000fbc <_sbrk+0x64>)
 8000f76:	4a12      	ldr	r2, [pc, #72]	@ (8000fc0 <_sbrk+0x68>)
 8000f78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f7a:	4b10      	ldr	r3, [pc, #64]	@ (8000fbc <_sbrk+0x64>)
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4413      	add	r3, r2
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	d207      	bcs.n	8000f98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f88:	f005 f944 	bl	8006214 <__errno>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	220c      	movs	r2, #12
 8000f90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f92:	f04f 33ff 	mov.w	r3, #4294967295
 8000f96:	e009      	b.n	8000fac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f98:	4b08      	ldr	r3, [pc, #32]	@ (8000fbc <_sbrk+0x64>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f9e:	4b07      	ldr	r3, [pc, #28]	@ (8000fbc <_sbrk+0x64>)
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	4a05      	ldr	r2, [pc, #20]	@ (8000fbc <_sbrk+0x64>)
 8000fa8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000faa:	68fb      	ldr	r3, [r7, #12]
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3718      	adds	r7, #24
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	2000a000 	.word	0x2000a000
 8000fb8:	00000400 	.word	0x00000400
 8000fbc:	20000600 	.word	0x20000600
 8000fc0:	20000758 	.word	0x20000758

08000fc4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fc8:	4b06      	ldr	r3, [pc, #24]	@ (8000fe4 <SystemInit+0x20>)
 8000fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fce:	4a05      	ldr	r2, [pc, #20]	@ (8000fe4 <SystemInit+0x20>)
 8000fd0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fd4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fd8:	bf00      	nop
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000fe8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001020 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fec:	f7ff ffea 	bl	8000fc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ff0:	480c      	ldr	r0, [pc, #48]	@ (8001024 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ff2:	490d      	ldr	r1, [pc, #52]	@ (8001028 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ff4:	4a0d      	ldr	r2, [pc, #52]	@ (800102c <LoopForever+0xe>)
  movs r3, #0
 8000ff6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ff8:	e002      	b.n	8001000 <LoopCopyDataInit>

08000ffa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ffa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ffc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ffe:	3304      	adds	r3, #4

08001000 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001000:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001002:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001004:	d3f9      	bcc.n	8000ffa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001006:	4a0a      	ldr	r2, [pc, #40]	@ (8001030 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001008:	4c0a      	ldr	r4, [pc, #40]	@ (8001034 <LoopForever+0x16>)
  movs r3, #0
 800100a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800100c:	e001      	b.n	8001012 <LoopFillZerobss>

0800100e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800100e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001010:	3204      	adds	r2, #4

08001012 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001012:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001014:	d3fb      	bcc.n	800100e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001016:	f005 f903 	bl	8006220 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800101a:	f7ff f989 	bl	8000330 <main>

0800101e <LoopForever>:

LoopForever:
    b LoopForever
 800101e:	e7fe      	b.n	800101e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001020:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001024:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001028:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 800102c:	08006e94 	.word	0x08006e94
  ldr r2, =_sbss
 8001030:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8001034:	20000754 	.word	0x20000754

08001038 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001038:	e7fe      	b.n	8001038 <ADC1_2_IRQHandler>
	...

0800103c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001040:	4b08      	ldr	r3, [pc, #32]	@ (8001064 <HAL_Init+0x28>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a07      	ldr	r2, [pc, #28]	@ (8001064 <HAL_Init+0x28>)
 8001046:	f043 0310 	orr.w	r3, r3, #16
 800104a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800104c:	2003      	movs	r0, #3
 800104e:	f001 f9b9 	bl	80023c4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001052:	2000      	movs	r0, #0
 8001054:	f000 f808 	bl	8001068 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001058:	f7ff fce6 	bl	8000a28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800105c:	2300      	movs	r3, #0
}
 800105e:	4618      	mov	r0, r3
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40022000 	.word	0x40022000

08001068 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001070:	4b12      	ldr	r3, [pc, #72]	@ (80010bc <HAL_InitTick+0x54>)
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	4b12      	ldr	r3, [pc, #72]	@ (80010c0 <HAL_InitTick+0x58>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	4619      	mov	r1, r3
 800107a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800107e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001082:	fbb2 f3f3 	udiv	r3, r2, r3
 8001086:	4618      	mov	r0, r3
 8001088:	f001 f9c3 	bl	8002412 <HAL_SYSTICK_Config>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	e00e      	b.n	80010b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2b0f      	cmp	r3, #15
 800109a:	d80a      	bhi.n	80010b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800109c:	2200      	movs	r2, #0
 800109e:	6879      	ldr	r1, [r7, #4]
 80010a0:	f04f 30ff 	mov.w	r0, #4294967295
 80010a4:	f001 f999 	bl	80023da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010a8:	4a06      	ldr	r2, [pc, #24]	@ (80010c4 <HAL_InitTick+0x5c>)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80010ae:	2300      	movs	r3, #0
 80010b0:	e000      	b.n	80010b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20000030 	.word	0x20000030
 80010c0:	20000038 	.word	0x20000038
 80010c4:	20000034 	.word	0x20000034

080010c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010cc:	4b06      	ldr	r3, [pc, #24]	@ (80010e8 <HAL_IncTick+0x20>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	461a      	mov	r2, r3
 80010d2:	4b06      	ldr	r3, [pc, #24]	@ (80010ec <HAL_IncTick+0x24>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4413      	add	r3, r2
 80010d8:	4a04      	ldr	r2, [pc, #16]	@ (80010ec <HAL_IncTick+0x24>)
 80010da:	6013      	str	r3, [r2, #0]
}
 80010dc:	bf00      	nop
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	20000038 	.word	0x20000038
 80010ec:	20000604 	.word	0x20000604

080010f0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  return uwTick;  
 80010f4:	4b03      	ldr	r3, [pc, #12]	@ (8001104 <HAL_GetTick+0x14>)
 80010f6:	681b      	ldr	r3, [r3, #0]
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	20000604 	.word	0x20000604

08001108 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b09a      	sub	sp, #104	@ 0x68
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001110:	2300      	movs	r3, #0
 8001112:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001116:	2300      	movs	r3, #0
 8001118:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 800111a:	2300      	movs	r3, #0
 800111c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d101      	bne.n	8001128 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001124:	2301      	movs	r3, #1
 8001126:	e1c9      	b.n	80014bc <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	691b      	ldr	r3, [r3, #16]
 800112c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001132:	f003 0310 	and.w	r3, r3, #16
 8001136:	2b00      	cmp	r3, #0
 8001138:	d176      	bne.n	8001228 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800113e:	2b00      	cmp	r3, #0
 8001140:	d152      	bne.n	80011e8 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2200      	movs	r2, #0
 8001146:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2200      	movs	r2, #0
 800114c:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2200      	movs	r2, #0
 8001152:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2200      	movs	r2, #0
 8001158:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f7ff fc87 	bl	8000a70 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800116c:	2b00      	cmp	r3, #0
 800116e:	d13b      	bne.n	80011e8 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f001 f80f 	bl	8002194 <ADC_Disable>
 8001176:	4603      	mov	r3, r0
 8001178:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001180:	f003 0310 	and.w	r3, r3, #16
 8001184:	2b00      	cmp	r3, #0
 8001186:	d12f      	bne.n	80011e8 <HAL_ADC_Init+0xe0>
 8001188:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800118c:	2b00      	cmp	r3, #0
 800118e:	d12b      	bne.n	80011e8 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001194:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001198:	f023 0302 	bic.w	r3, r3, #2
 800119c:	f043 0202 	orr.w	r2, r3, #2
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	689a      	ldr	r2, [r3, #8]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80011b2:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	689a      	ldr	r2, [r3, #8]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80011c2:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80011c4:	4b86      	ldr	r3, [pc, #536]	@ (80013e0 <HAL_ADC_Init+0x2d8>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a86      	ldr	r2, [pc, #536]	@ (80013e4 <HAL_ADC_Init+0x2dc>)
 80011ca:	fba2 2303 	umull	r2, r3, r2, r3
 80011ce:	0c9a      	lsrs	r2, r3, #18
 80011d0:	4613      	mov	r3, r2
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	4413      	add	r3, r2
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80011da:	e002      	b.n	80011e2 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	3b01      	subs	r3, #1
 80011e0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d1f9      	bne.n	80011dc <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d007      	beq.n	8001206 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001200:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001204:	d110      	bne.n	8001228 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800120a:	f023 0312 	bic.w	r3, r3, #18
 800120e:	f043 0210 	orr.w	r2, r3, #16
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800121a:	f043 0201 	orr.w	r2, r3, #1
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800122c:	f003 0310 	and.w	r3, r3, #16
 8001230:	2b00      	cmp	r3, #0
 8001232:	f040 8136 	bne.w	80014a2 <HAL_ADC_Init+0x39a>
 8001236:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800123a:	2b00      	cmp	r3, #0
 800123c:	f040 8131 	bne.w	80014a2 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800124a:	2b00      	cmp	r3, #0
 800124c:	f040 8129 	bne.w	80014a2 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001254:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001258:	f043 0202 	orr.w	r2, r3, #2
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001268:	d004      	beq.n	8001274 <HAL_ADC_Init+0x16c>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a5e      	ldr	r2, [pc, #376]	@ (80013e8 <HAL_ADC_Init+0x2e0>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d101      	bne.n	8001278 <HAL_ADC_Init+0x170>
 8001274:	4b5d      	ldr	r3, [pc, #372]	@ (80013ec <HAL_ADC_Init+0x2e4>)
 8001276:	e000      	b.n	800127a <HAL_ADC_Init+0x172>
 8001278:	4b5d      	ldr	r3, [pc, #372]	@ (80013f0 <HAL_ADC_Init+0x2e8>)
 800127a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001284:	d102      	bne.n	800128c <HAL_ADC_Init+0x184>
 8001286:	4b58      	ldr	r3, [pc, #352]	@ (80013e8 <HAL_ADC_Init+0x2e0>)
 8001288:	60fb      	str	r3, [r7, #12]
 800128a:	e01a      	b.n	80012c2 <HAL_ADC_Init+0x1ba>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a55      	ldr	r2, [pc, #340]	@ (80013e8 <HAL_ADC_Init+0x2e0>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d103      	bne.n	800129e <HAL_ADC_Init+0x196>
 8001296:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800129a:	60fb      	str	r3, [r7, #12]
 800129c:	e011      	b.n	80012c2 <HAL_ADC_Init+0x1ba>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a54      	ldr	r2, [pc, #336]	@ (80013f4 <HAL_ADC_Init+0x2ec>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d102      	bne.n	80012ae <HAL_ADC_Init+0x1a6>
 80012a8:	4b53      	ldr	r3, [pc, #332]	@ (80013f8 <HAL_ADC_Init+0x2f0>)
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	e009      	b.n	80012c2 <HAL_ADC_Init+0x1ba>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a51      	ldr	r2, [pc, #324]	@ (80013f8 <HAL_ADC_Init+0x2f0>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d102      	bne.n	80012be <HAL_ADC_Init+0x1b6>
 80012b8:	4b4e      	ldr	r3, [pc, #312]	@ (80013f4 <HAL_ADC_Init+0x2ec>)
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	e001      	b.n	80012c2 <HAL_ADC_Init+0x1ba>
 80012be:	2300      	movs	r3, #0
 80012c0:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	f003 0303 	and.w	r3, r3, #3
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d108      	bne.n	80012e2 <HAL_ADC_Init+0x1da>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d101      	bne.n	80012e2 <HAL_ADC_Init+0x1da>
 80012de:	2301      	movs	r3, #1
 80012e0:	e000      	b.n	80012e4 <HAL_ADC_Init+0x1dc>
 80012e2:	2300      	movs	r3, #0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d11c      	bne.n	8001322 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80012e8:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d010      	beq.n	8001310 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	f003 0303 	and.w	r3, r3, #3
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d107      	bne.n	800130a <HAL_ADC_Init+0x202>
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	2b01      	cmp	r3, #1
 8001304:	d101      	bne.n	800130a <HAL_ADC_Init+0x202>
 8001306:	2301      	movs	r3, #1
 8001308:	e000      	b.n	800130c <HAL_ADC_Init+0x204>
 800130a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800130c:	2b00      	cmp	r3, #0
 800130e:	d108      	bne.n	8001322 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001310:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	431a      	orrs	r2, r3
 800131e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001320:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	7e5b      	ldrb	r3, [r3, #25]
 8001326:	035b      	lsls	r3, r3, #13
 8001328:	687a      	ldr	r2, [r7, #4]
 800132a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800132c:	2a01      	cmp	r2, #1
 800132e:	d002      	beq.n	8001336 <HAL_ADC_Init+0x22e>
 8001330:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001334:	e000      	b.n	8001338 <HAL_ADC_Init+0x230>
 8001336:	2200      	movs	r2, #0
 8001338:	431a      	orrs	r2, r3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	68db      	ldr	r3, [r3, #12]
 800133e:	431a      	orrs	r2, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	4313      	orrs	r3, r2
 8001346:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001348:	4313      	orrs	r3, r2
 800134a:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001352:	2b01      	cmp	r3, #1
 8001354:	d11b      	bne.n	800138e <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	7e5b      	ldrb	r3, [r3, #25]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d109      	bne.n	8001372 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001362:	3b01      	subs	r3, #1
 8001364:	045a      	lsls	r2, r3, #17
 8001366:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001368:	4313      	orrs	r3, r2
 800136a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800136e:	663b      	str	r3, [r7, #96]	@ 0x60
 8001370:	e00d      	b.n	800138e <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001376:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800137a:	f043 0220 	orr.w	r2, r3, #32
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001386:	f043 0201 	orr.w	r2, r3, #1
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001392:	2b01      	cmp	r3, #1
 8001394:	d03a      	beq.n	800140c <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a16      	ldr	r2, [pc, #88]	@ (80013f4 <HAL_ADC_Init+0x2ec>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d004      	beq.n	80013aa <HAL_ADC_Init+0x2a2>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a14      	ldr	r2, [pc, #80]	@ (80013f8 <HAL_ADC_Init+0x2f0>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d128      	bne.n	80013fc <HAL_ADC_Init+0x2f4>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013ae:	f5b3 7f30 	cmp.w	r3, #704	@ 0x2c0
 80013b2:	d012      	beq.n	80013da <HAL_ADC_Init+0x2d2>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80013bc:	d00a      	beq.n	80013d4 <HAL_ADC_Init+0x2cc>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013c2:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 80013c6:	d002      	beq.n	80013ce <HAL_ADC_Init+0x2c6>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013cc:	e018      	b.n	8001400 <HAL_ADC_Init+0x2f8>
 80013ce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013d2:	e015      	b.n	8001400 <HAL_ADC_Init+0x2f8>
 80013d4:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
 80013d8:	e012      	b.n	8001400 <HAL_ADC_Init+0x2f8>
 80013da:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 80013de:	e00f      	b.n	8001400 <HAL_ADC_Init+0x2f8>
 80013e0:	20000030 	.word	0x20000030
 80013e4:	431bde83 	.word	0x431bde83
 80013e8:	50000100 	.word	0x50000100
 80013ec:	50000300 	.word	0x50000300
 80013f0:	50000700 	.word	0x50000700
 80013f4:	50000400 	.word	0x50000400
 80013f8:	50000500 	.word	0x50000500
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001400:	687a      	ldr	r2, [r7, #4]
 8001402:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001404:	4313      	orrs	r3, r2
 8001406:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001408:	4313      	orrs	r3, r2
 800140a:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	f003 030c 	and.w	r3, r3, #12
 8001416:	2b00      	cmp	r3, #0
 8001418:	d114      	bne.n	8001444 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	687a      	ldr	r2, [r7, #4]
 8001422:	6812      	ldr	r2, [r2, #0]
 8001424:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001428:	f023 0302 	bic.w	r3, r3, #2
 800142c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	7e1b      	ldrb	r3, [r3, #24]
 8001432:	039a      	lsls	r2, r3, #14
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	4313      	orrs	r3, r2
 800143e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001440:	4313      	orrs	r3, r2
 8001442:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	68da      	ldr	r2, [r3, #12]
 800144a:	4b1e      	ldr	r3, [pc, #120]	@ (80014c4 <HAL_ADC_Init+0x3bc>)
 800144c:	4013      	ands	r3, r2
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	6812      	ldr	r2, [r2, #0]
 8001452:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8001454:	430b      	orrs	r3, r1
 8001456:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	691b      	ldr	r3, [r3, #16]
 800145c:	2b01      	cmp	r3, #1
 800145e:	d10c      	bne.n	800147a <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001466:	f023 010f 	bic.w	r1, r3, #15
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	69db      	ldr	r3, [r3, #28]
 800146e:	1e5a      	subs	r2, r3, #1
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	430a      	orrs	r2, r1
 8001476:	631a      	str	r2, [r3, #48]	@ 0x30
 8001478:	e007      	b.n	800148a <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f022 020f 	bic.w	r2, r2, #15
 8001488:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2200      	movs	r2, #0
 800148e:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001494:	f023 0303 	bic.w	r3, r3, #3
 8001498:	f043 0201 	orr.w	r2, r3, #1
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	641a      	str	r2, [r3, #64]	@ 0x40
 80014a0:	e00a      	b.n	80014b8 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a6:	f023 0312 	bic.w	r3, r3, #18
 80014aa:	f043 0210 	orr.w	r2, r3, #16
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80014b2:	2301      	movs	r3, #1
 80014b4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80014b8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3768      	adds	r7, #104	@ 0x68
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	fff0c007 	.word	0xfff0c007

080014c8 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014d0:	2300      	movs	r3, #0
 80014d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	f003 0304 	and.w	r3, r3, #4
 80014de:	2b00      	cmp	r3, #0
 80014e0:	f040 80f9 	bne.w	80016d6 <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d101      	bne.n	80014f2 <HAL_ADC_Start+0x2a>
 80014ee:	2302      	movs	r3, #2
 80014f0:	e0f4      	b.n	80016dc <HAL_ADC_Start+0x214>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2201      	movs	r2, #1
 80014f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f000 fde6 	bl	80020cc <ADC_Enable>
 8001500:	4603      	mov	r3, r0
 8001502:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001504:	7bfb      	ldrb	r3, [r7, #15]
 8001506:	2b00      	cmp	r3, #0
 8001508:	f040 80e0 	bne.w	80016cc <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001510:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001514:	f023 0301 	bic.w	r3, r3, #1
 8001518:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001528:	d004      	beq.n	8001534 <HAL_ADC_Start+0x6c>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a6d      	ldr	r2, [pc, #436]	@ (80016e4 <HAL_ADC_Start+0x21c>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d106      	bne.n	8001542 <HAL_ADC_Start+0x7a>
 8001534:	4b6c      	ldr	r3, [pc, #432]	@ (80016e8 <HAL_ADC_Start+0x220>)
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	f003 031f 	and.w	r3, r3, #31
 800153c:	2b00      	cmp	r3, #0
 800153e:	d010      	beq.n	8001562 <HAL_ADC_Start+0x9a>
 8001540:	e005      	b.n	800154e <HAL_ADC_Start+0x86>
 8001542:	4b6a      	ldr	r3, [pc, #424]	@ (80016ec <HAL_ADC_Start+0x224>)
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	f003 031f 	and.w	r3, r3, #31
 800154a:	2b00      	cmp	r3, #0
 800154c:	d009      	beq.n	8001562 <HAL_ADC_Start+0x9a>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001556:	d004      	beq.n	8001562 <HAL_ADC_Start+0x9a>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a64      	ldr	r2, [pc, #400]	@ (80016f0 <HAL_ADC_Start+0x228>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d115      	bne.n	800158e <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001566:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001578:	2b00      	cmp	r3, #0
 800157a:	d036      	beq.n	80015ea <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001580:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001584:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	641a      	str	r2, [r3, #64]	@ 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800158c:	e02d      	b.n	80015ea <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001592:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80015a2:	d004      	beq.n	80015ae <HAL_ADC_Start+0xe6>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a4e      	ldr	r2, [pc, #312]	@ (80016e4 <HAL_ADC_Start+0x21c>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d10a      	bne.n	80015c4 <HAL_ADC_Start+0xfc>
 80015ae:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	bf14      	ite	ne
 80015bc:	2301      	movne	r3, #1
 80015be:	2300      	moveq	r3, #0
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	e008      	b.n	80015d6 <HAL_ADC_Start+0x10e>
 80015c4:	4b4a      	ldr	r3, [pc, #296]	@ (80016f0 <HAL_ADC_Start+0x228>)
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	bf14      	ite	ne
 80015d0:	2301      	movne	r3, #1
 80015d2:	2300      	moveq	r3, #0
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d007      	beq.n	80015ea <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015de:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80015e2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	641a      	str	r2, [r3, #64]	@ 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80015f6:	d106      	bne.n	8001606 <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015fc:	f023 0206 	bic.w	r2, r3, #6
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	645a      	str	r2, [r3, #68]	@ 0x44
 8001604:	e002      	b.n	800160c <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2200      	movs	r2, #0
 800160a:	645a      	str	r2, [r3, #68]	@ 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2200      	movs	r2, #0
 8001610:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	221c      	movs	r2, #28
 800161a:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001624:	d004      	beq.n	8001630 <HAL_ADC_Start+0x168>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a2e      	ldr	r2, [pc, #184]	@ (80016e4 <HAL_ADC_Start+0x21c>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d106      	bne.n	800163e <HAL_ADC_Start+0x176>
 8001630:	4b2d      	ldr	r3, [pc, #180]	@ (80016e8 <HAL_ADC_Start+0x220>)
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	f003 031f 	and.w	r3, r3, #31
 8001638:	2b00      	cmp	r3, #0
 800163a:	d03e      	beq.n	80016ba <HAL_ADC_Start+0x1f2>
 800163c:	e005      	b.n	800164a <HAL_ADC_Start+0x182>
 800163e:	4b2b      	ldr	r3, [pc, #172]	@ (80016ec <HAL_ADC_Start+0x224>)
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	f003 031f 	and.w	r3, r3, #31
 8001646:	2b00      	cmp	r3, #0
 8001648:	d037      	beq.n	80016ba <HAL_ADC_Start+0x1f2>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001652:	d004      	beq.n	800165e <HAL_ADC_Start+0x196>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a22      	ldr	r2, [pc, #136]	@ (80016e4 <HAL_ADC_Start+0x21c>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d106      	bne.n	800166c <HAL_ADC_Start+0x1a4>
 800165e:	4b22      	ldr	r3, [pc, #136]	@ (80016e8 <HAL_ADC_Start+0x220>)
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	f003 031f 	and.w	r3, r3, #31
 8001666:	2b05      	cmp	r3, #5
 8001668:	d027      	beq.n	80016ba <HAL_ADC_Start+0x1f2>
 800166a:	e005      	b.n	8001678 <HAL_ADC_Start+0x1b0>
 800166c:	4b1f      	ldr	r3, [pc, #124]	@ (80016ec <HAL_ADC_Start+0x224>)
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	f003 031f 	and.w	r3, r3, #31
 8001674:	2b05      	cmp	r3, #5
 8001676:	d020      	beq.n	80016ba <HAL_ADC_Start+0x1f2>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001680:	d004      	beq.n	800168c <HAL_ADC_Start+0x1c4>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a17      	ldr	r2, [pc, #92]	@ (80016e4 <HAL_ADC_Start+0x21c>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d106      	bne.n	800169a <HAL_ADC_Start+0x1d2>
 800168c:	4b16      	ldr	r3, [pc, #88]	@ (80016e8 <HAL_ADC_Start+0x220>)
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	f003 031f 	and.w	r3, r3, #31
 8001694:	2b09      	cmp	r3, #9
 8001696:	d010      	beq.n	80016ba <HAL_ADC_Start+0x1f2>
 8001698:	e005      	b.n	80016a6 <HAL_ADC_Start+0x1de>
 800169a:	4b14      	ldr	r3, [pc, #80]	@ (80016ec <HAL_ADC_Start+0x224>)
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	f003 031f 	and.w	r3, r3, #31
 80016a2:	2b09      	cmp	r3, #9
 80016a4:	d009      	beq.n	80016ba <HAL_ADC_Start+0x1f2>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80016ae:	d004      	beq.n	80016ba <HAL_ADC_Start+0x1f2>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a0e      	ldr	r2, [pc, #56]	@ (80016f0 <HAL_ADC_Start+0x228>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d10f      	bne.n	80016da <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	689a      	ldr	r2, [r3, #8]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f042 0204 	orr.w	r2, r2, #4
 80016c8:	609a      	str	r2, [r3, #8]
 80016ca:	e006      	b.n	80016da <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2200      	movs	r2, #0
 80016d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80016d4:	e001      	b.n	80016da <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80016d6:	2302      	movs	r3, #2
 80016d8:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80016da:	7bfb      	ldrb	r3, [r7, #15]
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3710      	adds	r7, #16
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	50000100 	.word	0x50000100
 80016e8:	50000300 	.word	0x50000300
 80016ec:	50000700 	.word	0x50000700
 80016f0:	50000400 	.word	0x50000400

080016f4 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b086      	sub	sp, #24
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80016fe:	2300      	movs	r3, #0
 8001700:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	695b      	ldr	r3, [r3, #20]
 8001706:	2b08      	cmp	r3, #8
 8001708:	d102      	bne.n	8001710 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800170a:	2308      	movs	r3, #8
 800170c:	617b      	str	r3, [r7, #20]
 800170e:	e03a      	b.n	8001786 <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001718:	d004      	beq.n	8001724 <HAL_ADC_PollForConversion+0x30>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a72      	ldr	r2, [pc, #456]	@ (80018e8 <HAL_ADC_PollForConversion+0x1f4>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d101      	bne.n	8001728 <HAL_ADC_PollForConversion+0x34>
 8001724:	4b71      	ldr	r3, [pc, #452]	@ (80018ec <HAL_ADC_PollForConversion+0x1f8>)
 8001726:	e000      	b.n	800172a <HAL_ADC_PollForConversion+0x36>
 8001728:	4b71      	ldr	r3, [pc, #452]	@ (80018f0 <HAL_ADC_PollForConversion+0x1fc>)
 800172a:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	f003 031f 	and.w	r3, r3, #31
 8001734:	2b00      	cmp	r3, #0
 8001736:	d112      	bne.n	800175e <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	68db      	ldr	r3, [r3, #12]
 800173e:	f003 0301 	and.w	r3, r3, #1
 8001742:	2b01      	cmp	r3, #1
 8001744:	d11d      	bne.n	8001782 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800174a:	f043 0220 	orr.w	r2, r3, #32
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2200      	movs	r2, #0
 8001756:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e0bf      	b.n	80018de <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d00b      	beq.n	8001782 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800176e:	f043 0220 	orr.w	r2, r3, #32
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2200      	movs	r2, #0
 800177a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e0ad      	b.n	80018de <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001782:	230c      	movs	r3, #12
 8001784:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800178e:	d004      	beq.n	800179a <HAL_ADC_PollForConversion+0xa6>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a54      	ldr	r2, [pc, #336]	@ (80018e8 <HAL_ADC_PollForConversion+0x1f4>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d106      	bne.n	80017a8 <HAL_ADC_PollForConversion+0xb4>
 800179a:	4b54      	ldr	r3, [pc, #336]	@ (80018ec <HAL_ADC_PollForConversion+0x1f8>)
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	f003 031f 	and.w	r3, r3, #31
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d010      	beq.n	80017c8 <HAL_ADC_PollForConversion+0xd4>
 80017a6:	e005      	b.n	80017b4 <HAL_ADC_PollForConversion+0xc0>
 80017a8:	4b51      	ldr	r3, [pc, #324]	@ (80018f0 <HAL_ADC_PollForConversion+0x1fc>)
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	f003 031f 	and.w	r3, r3, #31
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d009      	beq.n	80017c8 <HAL_ADC_PollForConversion+0xd4>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80017bc:	d004      	beq.n	80017c8 <HAL_ADC_PollForConversion+0xd4>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a4c      	ldr	r2, [pc, #304]	@ (80018f4 <HAL_ADC_PollForConversion+0x200>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d104      	bne.n	80017d2 <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	68db      	ldr	r3, [r3, #12]
 80017ce:	613b      	str	r3, [r7, #16]
 80017d0:	e00f      	b.n	80017f2 <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80017da:	d004      	beq.n	80017e6 <HAL_ADC_PollForConversion+0xf2>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a41      	ldr	r2, [pc, #260]	@ (80018e8 <HAL_ADC_PollForConversion+0x1f4>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d102      	bne.n	80017ec <HAL_ADC_PollForConversion+0xf8>
 80017e6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80017ea:	e000      	b.n	80017ee <HAL_ADC_PollForConversion+0xfa>
 80017ec:	4b41      	ldr	r3, [pc, #260]	@ (80018f4 <HAL_ADC_PollForConversion+0x200>)
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 80017f2:	f7ff fc7d 	bl	80010f0 <HAL_GetTick>
 80017f6:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80017f8:	e021      	b.n	800183e <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001800:	d01d      	beq.n	800183e <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d007      	beq.n	8001818 <HAL_ADC_PollForConversion+0x124>
 8001808:	f7ff fc72 	bl	80010f0 <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	683a      	ldr	r2, [r7, #0]
 8001814:	429a      	cmp	r2, r3
 8001816:	d212      	bcs.n	800183e <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	4013      	ands	r3, r2
 8001822:	2b00      	cmp	r3, #0
 8001824:	d10b      	bne.n	800183e <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800182a:	f043 0204 	orr.w	r2, r3, #4
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2200      	movs	r2, #0
 8001836:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e04f      	b.n	80018de <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	4013      	ands	r3, r2
 8001848:	2b00      	cmp	r3, #0
 800184a:	d0d6      	beq.n	80017fa <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001850:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	68db      	ldr	r3, [r3, #12]
 800185e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001862:	2b00      	cmp	r3, #0
 8001864:	d131      	bne.n	80018ca <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 800186c:	2b00      	cmp	r3, #0
 800186e:	d12c      	bne.n	80018ca <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0308 	and.w	r3, r3, #8
 800187a:	2b08      	cmp	r3, #8
 800187c:	d125      	bne.n	80018ca <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	f003 0304 	and.w	r3, r3, #4
 8001888:	2b00      	cmp	r3, #0
 800188a:	d112      	bne.n	80018b2 <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001890:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	641a      	str	r2, [r3, #64]	@ 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800189c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d112      	bne.n	80018ca <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a8:	f043 0201 	orr.w	r2, r3, #1
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	641a      	str	r2, [r3, #64]	@ 0x40
 80018b0:	e00b      	b.n	80018ca <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b6:	f043 0220 	orr.w	r2, r3, #32
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018c2:	f043 0201 	orr.w	r2, r3, #1
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d103      	bne.n	80018dc <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	697a      	ldr	r2, [r7, #20]
 80018da:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3718      	adds	r7, #24
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	50000100 	.word	0x50000100
 80018ec:	50000300 	.word	0x50000300
 80018f0:	50000700 	.word	0x50000700
 80018f4:	50000400 	.word	0x50000400

080018f8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001906:	4618      	mov	r0, r3
 8001908:	370c      	adds	r7, #12
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
	...

08001914 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001914:	b480      	push	{r7}
 8001916:	b09b      	sub	sp, #108	@ 0x6c
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800191e:	2300      	movs	r3, #0
 8001920:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001924:	2300      	movs	r3, #0
 8001926:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800192e:	2b01      	cmp	r3, #1
 8001930:	d101      	bne.n	8001936 <HAL_ADC_ConfigChannel+0x22>
 8001932:	2302      	movs	r3, #2
 8001934:	e2c8      	b.n	8001ec8 <HAL_ADC_ConfigChannel+0x5b4>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2201      	movs	r2, #1
 800193a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	f003 0304 	and.w	r3, r3, #4
 8001948:	2b00      	cmp	r3, #0
 800194a:	f040 82ac 	bne.w	8001ea6 <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	2b04      	cmp	r3, #4
 8001954:	d81c      	bhi.n	8001990 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685a      	ldr	r2, [r3, #4]
 8001960:	4613      	mov	r3, r2
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	4413      	add	r3, r2
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	461a      	mov	r2, r3
 800196a:	231f      	movs	r3, #31
 800196c:	4093      	lsls	r3, r2
 800196e:	43db      	mvns	r3, r3
 8001970:	4019      	ands	r1, r3
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	6818      	ldr	r0, [r3, #0]
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	685a      	ldr	r2, [r3, #4]
 800197a:	4613      	mov	r3, r2
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	4413      	add	r3, r2
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	fa00 f203 	lsl.w	r2, r0, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	430a      	orrs	r2, r1
 800198c:	631a      	str	r2, [r3, #48]	@ 0x30
 800198e:	e063      	b.n	8001a58 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	2b09      	cmp	r3, #9
 8001996:	d81e      	bhi.n	80019d6 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	685a      	ldr	r2, [r3, #4]
 80019a2:	4613      	mov	r3, r2
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	4413      	add	r3, r2
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	3b1e      	subs	r3, #30
 80019ac:	221f      	movs	r2, #31
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	43db      	mvns	r3, r3
 80019b4:	4019      	ands	r1, r3
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	6818      	ldr	r0, [r3, #0]
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	685a      	ldr	r2, [r3, #4]
 80019be:	4613      	mov	r3, r2
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	4413      	add	r3, r2
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	3b1e      	subs	r3, #30
 80019c8:	fa00 f203 	lsl.w	r2, r0, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	430a      	orrs	r2, r1
 80019d2:	635a      	str	r2, [r3, #52]	@ 0x34
 80019d4:	e040      	b.n	8001a58 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	2b0e      	cmp	r3, #14
 80019dc:	d81e      	bhi.n	8001a1c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685a      	ldr	r2, [r3, #4]
 80019e8:	4613      	mov	r3, r2
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	4413      	add	r3, r2
 80019ee:	005b      	lsls	r3, r3, #1
 80019f0:	3b3c      	subs	r3, #60	@ 0x3c
 80019f2:	221f      	movs	r2, #31
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	43db      	mvns	r3, r3
 80019fa:	4019      	ands	r1, r3
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	6818      	ldr	r0, [r3, #0]
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685a      	ldr	r2, [r3, #4]
 8001a04:	4613      	mov	r3, r2
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	4413      	add	r3, r2
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	3b3c      	subs	r3, #60	@ 0x3c
 8001a0e:	fa00 f203 	lsl.w	r2, r0, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	430a      	orrs	r2, r1
 8001a18:	639a      	str	r2, [r3, #56]	@ 0x38
 8001a1a:	e01d      	b.n	8001a58 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	685a      	ldr	r2, [r3, #4]
 8001a26:	4613      	mov	r3, r2
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	4413      	add	r3, r2
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	3b5a      	subs	r3, #90	@ 0x5a
 8001a30:	221f      	movs	r2, #31
 8001a32:	fa02 f303 	lsl.w	r3, r2, r3
 8001a36:	43db      	mvns	r3, r3
 8001a38:	4019      	ands	r1, r3
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	6818      	ldr	r0, [r3, #0]
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	685a      	ldr	r2, [r3, #4]
 8001a42:	4613      	mov	r3, r2
 8001a44:	005b      	lsls	r3, r3, #1
 8001a46:	4413      	add	r3, r2
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	3b5a      	subs	r3, #90	@ 0x5a
 8001a4c:	fa00 f203 	lsl.w	r2, r0, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	430a      	orrs	r2, r1
 8001a56:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f003 030c 	and.w	r3, r3, #12
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	f040 80e5 	bne.w	8001c32 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2b09      	cmp	r3, #9
 8001a6e:	d91c      	bls.n	8001aaa <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	6999      	ldr	r1, [r3, #24]
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	4413      	add	r3, r2
 8001a80:	3b1e      	subs	r3, #30
 8001a82:	2207      	movs	r2, #7
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	4019      	ands	r1, r3
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	6898      	ldr	r0, [r3, #8]
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	4613      	mov	r3, r2
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	4413      	add	r3, r2
 8001a9a:	3b1e      	subs	r3, #30
 8001a9c:	fa00 f203 	lsl.w	r2, r0, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	430a      	orrs	r2, r1
 8001aa6:	619a      	str	r2, [r3, #24]
 8001aa8:	e019      	b.n	8001ade <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	6959      	ldr	r1, [r3, #20]
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	4413      	add	r3, r2
 8001aba:	2207      	movs	r2, #7
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	43db      	mvns	r3, r3
 8001ac2:	4019      	ands	r1, r3
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	6898      	ldr	r0, [r3, #8]
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	4613      	mov	r3, r2
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	4413      	add	r3, r2
 8001ad2:	fa00 f203 	lsl.w	r2, r0, r3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	430a      	orrs	r2, r1
 8001adc:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	695a      	ldr	r2, [r3, #20]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	08db      	lsrs	r3, r3, #3
 8001aea:	f003 0303 	and.w	r3, r3, #3
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	691b      	ldr	r3, [r3, #16]
 8001afa:	3b01      	subs	r3, #1
 8001afc:	2b03      	cmp	r3, #3
 8001afe:	d84f      	bhi.n	8001ba0 <HAL_ADC_ConfigChannel+0x28c>
 8001b00:	a201      	add	r2, pc, #4	@ (adr r2, 8001b08 <HAL_ADC_ConfigChannel+0x1f4>)
 8001b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b06:	bf00      	nop
 8001b08:	08001b19 	.word	0x08001b19
 8001b0c:	08001b3b 	.word	0x08001b3b
 8001b10:	08001b5d 	.word	0x08001b5d
 8001b14:	08001b7f 	.word	0x08001b7f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001b1e:	4b99      	ldr	r3, [pc, #612]	@ (8001d84 <HAL_ADC_ConfigChannel+0x470>)
 8001b20:	4013      	ands	r3, r2
 8001b22:	683a      	ldr	r2, [r7, #0]
 8001b24:	6812      	ldr	r2, [r2, #0]
 8001b26:	0691      	lsls	r1, r2, #26
 8001b28:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001b2a:	430a      	orrs	r2, r1
 8001b2c:	431a      	orrs	r2, r3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001b36:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001b38:	e07b      	b.n	8001c32 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001b40:	4b90      	ldr	r3, [pc, #576]	@ (8001d84 <HAL_ADC_ConfigChannel+0x470>)
 8001b42:	4013      	ands	r3, r2
 8001b44:	683a      	ldr	r2, [r7, #0]
 8001b46:	6812      	ldr	r2, [r2, #0]
 8001b48:	0691      	lsls	r1, r2, #26
 8001b4a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001b4c:	430a      	orrs	r2, r1
 8001b4e:	431a      	orrs	r2, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001b58:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001b5a:	e06a      	b.n	8001c32 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001b62:	4b88      	ldr	r3, [pc, #544]	@ (8001d84 <HAL_ADC_ConfigChannel+0x470>)
 8001b64:	4013      	ands	r3, r2
 8001b66:	683a      	ldr	r2, [r7, #0]
 8001b68:	6812      	ldr	r2, [r2, #0]
 8001b6a:	0691      	lsls	r1, r2, #26
 8001b6c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001b6e:	430a      	orrs	r2, r1
 8001b70:	431a      	orrs	r2, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001b7a:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001b7c:	e059      	b.n	8001c32 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001b84:	4b7f      	ldr	r3, [pc, #508]	@ (8001d84 <HAL_ADC_ConfigChannel+0x470>)
 8001b86:	4013      	ands	r3, r2
 8001b88:	683a      	ldr	r2, [r7, #0]
 8001b8a:	6812      	ldr	r2, [r2, #0]
 8001b8c:	0691      	lsls	r1, r2, #26
 8001b8e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001b90:	430a      	orrs	r2, r1
 8001b92:	431a      	orrs	r2, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001b9c:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001b9e:	e048      	b.n	8001c32 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ba6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	069b      	lsls	r3, r3, #26
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d107      	bne.n	8001bc4 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001bc2:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001bca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	069b      	lsls	r3, r3, #26
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d107      	bne.n	8001be8 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001be6:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001bee:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	069b      	lsls	r3, r3, #26
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d107      	bne.n	8001c0c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001c0a:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001c12:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	069b      	lsls	r3, r3, #26
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d107      	bne.n	8001c30 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001c2e:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8001c30:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f003 0303 	and.w	r3, r3, #3
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d108      	bne.n	8001c52 <HAL_ADC_ConfigChannel+0x33e>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0301 	and.w	r3, r3, #1
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d101      	bne.n	8001c52 <HAL_ADC_ConfigChannel+0x33e>
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e000      	b.n	8001c54 <HAL_ADC_ConfigChannel+0x340>
 8001c52:	2300      	movs	r3, #0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	f040 8131 	bne.w	8001ebc <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d00f      	beq.n	8001c82 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	43da      	mvns	r2, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	400a      	ands	r2, r1
 8001c7c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8001c80:	e049      	b.n	8001d16 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	409a      	lsls	r2, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	430a      	orrs	r2, r1
 8001c98:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2b09      	cmp	r3, #9
 8001ca2:	d91c      	bls.n	8001cde <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	6999      	ldr	r1, [r3, #24]
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	4613      	mov	r3, r2
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	4413      	add	r3, r2
 8001cb4:	3b1b      	subs	r3, #27
 8001cb6:	2207      	movs	r2, #7
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	43db      	mvns	r3, r3
 8001cbe:	4019      	ands	r1, r3
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	6898      	ldr	r0, [r3, #8]
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	4613      	mov	r3, r2
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	4413      	add	r3, r2
 8001cce:	3b1b      	subs	r3, #27
 8001cd0:	fa00 f203 	lsl.w	r2, r0, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	430a      	orrs	r2, r1
 8001cda:	619a      	str	r2, [r3, #24]
 8001cdc:	e01b      	b.n	8001d16 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	6959      	ldr	r1, [r3, #20]
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	1c5a      	adds	r2, r3, #1
 8001cea:	4613      	mov	r3, r2
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	4413      	add	r3, r2
 8001cf0:	2207      	movs	r2, #7
 8001cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf6:	43db      	mvns	r3, r3
 8001cf8:	4019      	ands	r1, r3
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	6898      	ldr	r0, [r3, #8]
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	1c5a      	adds	r2, r3, #1
 8001d04:	4613      	mov	r3, r2
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	4413      	add	r3, r2
 8001d0a:	fa00 f203 	lsl.w	r2, r0, r3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	430a      	orrs	r2, r1
 8001d14:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001d1e:	d004      	beq.n	8001d2a <HAL_ADC_ConfigChannel+0x416>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a18      	ldr	r2, [pc, #96]	@ (8001d88 <HAL_ADC_ConfigChannel+0x474>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d101      	bne.n	8001d2e <HAL_ADC_ConfigChannel+0x41a>
 8001d2a:	4b18      	ldr	r3, [pc, #96]	@ (8001d8c <HAL_ADC_ConfigChannel+0x478>)
 8001d2c:	e000      	b.n	8001d30 <HAL_ADC_ConfigChannel+0x41c>
 8001d2e:	4b18      	ldr	r3, [pc, #96]	@ (8001d90 <HAL_ADC_ConfigChannel+0x47c>)
 8001d30:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	2b10      	cmp	r3, #16
 8001d38:	d105      	bne.n	8001d46 <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001d3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d015      	beq.n	8001d72 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001d4a:	2b11      	cmp	r3, #17
 8001d4c:	d105      	bne.n	8001d5a <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001d4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d00b      	beq.n	8001d72 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001d5e:	2b12      	cmp	r3, #18
 8001d60:	f040 80ac 	bne.w	8001ebc <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001d64:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	f040 80a5 	bne.w	8001ebc <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001d7a:	d10b      	bne.n	8001d94 <HAL_ADC_ConfigChannel+0x480>
 8001d7c:	4b02      	ldr	r3, [pc, #8]	@ (8001d88 <HAL_ADC_ConfigChannel+0x474>)
 8001d7e:	60fb      	str	r3, [r7, #12]
 8001d80:	e023      	b.n	8001dca <HAL_ADC_ConfigChannel+0x4b6>
 8001d82:	bf00      	nop
 8001d84:	83fff000 	.word	0x83fff000
 8001d88:	50000100 	.word	0x50000100
 8001d8c:	50000300 	.word	0x50000300
 8001d90:	50000700 	.word	0x50000700
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a4e      	ldr	r2, [pc, #312]	@ (8001ed4 <HAL_ADC_ConfigChannel+0x5c0>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d103      	bne.n	8001da6 <HAL_ADC_ConfigChannel+0x492>
 8001d9e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001da2:	60fb      	str	r3, [r7, #12]
 8001da4:	e011      	b.n	8001dca <HAL_ADC_ConfigChannel+0x4b6>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a4b      	ldr	r2, [pc, #300]	@ (8001ed8 <HAL_ADC_ConfigChannel+0x5c4>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d102      	bne.n	8001db6 <HAL_ADC_ConfigChannel+0x4a2>
 8001db0:	4b4a      	ldr	r3, [pc, #296]	@ (8001edc <HAL_ADC_ConfigChannel+0x5c8>)
 8001db2:	60fb      	str	r3, [r7, #12]
 8001db4:	e009      	b.n	8001dca <HAL_ADC_ConfigChannel+0x4b6>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a48      	ldr	r2, [pc, #288]	@ (8001edc <HAL_ADC_ConfigChannel+0x5c8>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d102      	bne.n	8001dc6 <HAL_ADC_ConfigChannel+0x4b2>
 8001dc0:	4b45      	ldr	r3, [pc, #276]	@ (8001ed8 <HAL_ADC_ConfigChannel+0x5c4>)
 8001dc2:	60fb      	str	r3, [r7, #12]
 8001dc4:	e001      	b.n	8001dca <HAL_ADC_ConfigChannel+0x4b6>
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f003 0303 	and.w	r3, r3, #3
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d108      	bne.n	8001dea <HAL_ADC_ConfigChannel+0x4d6>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0301 	and.w	r3, r3, #1
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d101      	bne.n	8001dea <HAL_ADC_ConfigChannel+0x4d6>
 8001de6:	2301      	movs	r3, #1
 8001de8:	e000      	b.n	8001dec <HAL_ADC_ConfigChannel+0x4d8>
 8001dea:	2300      	movs	r3, #0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d150      	bne.n	8001e92 <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001df0:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d010      	beq.n	8001e18 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f003 0303 	and.w	r3, r3, #3
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d107      	bne.n	8001e12 <HAL_ADC_ConfigChannel+0x4fe>
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d101      	bne.n	8001e12 <HAL_ADC_ConfigChannel+0x4fe>
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e000      	b.n	8001e14 <HAL_ADC_ConfigChannel+0x500>
 8001e12:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d13c      	bne.n	8001e92 <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2b10      	cmp	r3, #16
 8001e1e:	d11d      	bne.n	8001e5c <HAL_ADC_ConfigChannel+0x548>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e28:	d118      	bne.n	8001e5c <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001e2a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001e32:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001e34:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e36:	4b2a      	ldr	r3, [pc, #168]	@ (8001ee0 <HAL_ADC_ConfigChannel+0x5cc>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a2a      	ldr	r2, [pc, #168]	@ (8001ee4 <HAL_ADC_ConfigChannel+0x5d0>)
 8001e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e40:	0c9a      	lsrs	r2, r3, #18
 8001e42:	4613      	mov	r3, r2
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	4413      	add	r3, r2
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001e4c:	e002      	b.n	8001e54 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	3b01      	subs	r3, #1
 8001e52:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d1f9      	bne.n	8001e4e <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001e5a:	e02e      	b.n	8001eba <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2b11      	cmp	r3, #17
 8001e62:	d10b      	bne.n	8001e7c <HAL_ADC_ConfigChannel+0x568>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e6c:	d106      	bne.n	8001e7c <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001e6e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8001e76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001e78:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001e7a:	e01e      	b.n	8001eba <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2b12      	cmp	r3, #18
 8001e82:	d11a      	bne.n	8001eba <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001e84:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001e8c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001e8e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001e90:	e013      	b.n	8001eba <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e96:	f043 0220 	orr.w	r2, r3, #32
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001ea4:	e00a      	b.n	8001ebc <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eaa:	f043 0220 	orr.w	r2, r3, #32
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001eb8:	e000      	b.n	8001ebc <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001eba:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001ec4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	376c      	adds	r7, #108	@ 0x6c
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr
 8001ed4:	50000100 	.word	0x50000100
 8001ed8:	50000400 	.word	0x50000400
 8001edc:	50000500 	.word	0x50000500
 8001ee0:	20000030 	.word	0x20000030
 8001ee4:	431bde83 	.word	0x431bde83

08001ee8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b099      	sub	sp, #100	@ 0x64
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f00:	d102      	bne.n	8001f08 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001f02:	4b6d      	ldr	r3, [pc, #436]	@ (80020b8 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001f04:	60bb      	str	r3, [r7, #8]
 8001f06:	e01a      	b.n	8001f3e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a6a      	ldr	r2, [pc, #424]	@ (80020b8 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d103      	bne.n	8001f1a <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8001f12:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001f16:	60bb      	str	r3, [r7, #8]
 8001f18:	e011      	b.n	8001f3e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a67      	ldr	r2, [pc, #412]	@ (80020bc <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d102      	bne.n	8001f2a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001f24:	4b66      	ldr	r3, [pc, #408]	@ (80020c0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001f26:	60bb      	str	r3, [r7, #8]
 8001f28:	e009      	b.n	8001f3e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a64      	ldr	r2, [pc, #400]	@ (80020c0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d102      	bne.n	8001f3a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8001f34:	4b61      	ldr	r3, [pc, #388]	@ (80020bc <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001f36:	60bb      	str	r3, [r7, #8]
 8001f38:	e001      	b.n	8001f3e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d101      	bne.n	8001f48 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e0b0      	b.n	80020aa <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d101      	bne.n	8001f56 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8001f52:	2302      	movs	r3, #2
 8001f54:	e0a9      	b.n	80020aa <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2201      	movs	r2, #1
 8001f5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	f003 0304 	and.w	r3, r3, #4
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	f040 808d 	bne.w	8002088 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f003 0304 	and.w	r3, r3, #4
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	f040 8086 	bne.w	8002088 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f84:	d004      	beq.n	8001f90 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a4b      	ldr	r2, [pc, #300]	@ (80020b8 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d101      	bne.n	8001f94 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8001f90:	4b4c      	ldr	r3, [pc, #304]	@ (80020c4 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8001f92:	e000      	b.n	8001f96 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8001f94:	4b4c      	ldr	r3, [pc, #304]	@ (80020c8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8001f96:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d040      	beq.n	8002022 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001fa0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	6859      	ldr	r1, [r3, #4]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001fb2:	035b      	lsls	r3, r3, #13
 8001fb4:	430b      	orrs	r3, r1
 8001fb6:	431a      	orrs	r2, r3
 8001fb8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001fba:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f003 0303 	and.w	r3, r3, #3
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d108      	bne.n	8001fdc <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0301 	and.w	r3, r3, #1
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d101      	bne.n	8001fdc <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e000      	b.n	8001fde <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8001fdc:	2300      	movs	r3, #0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d15c      	bne.n	800209c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f003 0303 	and.w	r3, r3, #3
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d107      	bne.n	8001ffe <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d101      	bne.n	8001ffe <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e000      	b.n	8002000 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8001ffe:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002000:	2b00      	cmp	r3, #0
 8002002:	d14b      	bne.n	800209c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002004:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800200c:	f023 030f 	bic.w	r3, r3, #15
 8002010:	683a      	ldr	r2, [r7, #0]
 8002012:	6811      	ldr	r1, [r2, #0]
 8002014:	683a      	ldr	r2, [r7, #0]
 8002016:	6892      	ldr	r2, [r2, #8]
 8002018:	430a      	orrs	r2, r1
 800201a:	431a      	orrs	r2, r3
 800201c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800201e:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002020:	e03c      	b.n	800209c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002022:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800202a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800202c:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	f003 0303 	and.w	r3, r3, #3
 8002038:	2b01      	cmp	r3, #1
 800203a:	d108      	bne.n	800204e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	2b01      	cmp	r3, #1
 8002048:	d101      	bne.n	800204e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800204a:	2301      	movs	r3, #1
 800204c:	e000      	b.n	8002050 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800204e:	2300      	movs	r3, #0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d123      	bne.n	800209c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f003 0303 	and.w	r3, r3, #3
 800205c:	2b01      	cmp	r3, #1
 800205e:	d107      	bne.n	8002070 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0301 	and.w	r3, r3, #1
 8002068:	2b01      	cmp	r3, #1
 800206a:	d101      	bne.n	8002070 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 800206c:	2301      	movs	r3, #1
 800206e:	e000      	b.n	8002072 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8002070:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002072:	2b00      	cmp	r3, #0
 8002074:	d112      	bne.n	800209c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002076:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800207e:	f023 030f 	bic.w	r3, r3, #15
 8002082:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002084:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002086:	e009      	b.n	800209c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800208c:	f043 0220 	orr.w	r2, r3, #32
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800209a:	e000      	b.n	800209e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800209c:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80020a6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 80020aa:	4618      	mov	r0, r3
 80020ac:	3764      	adds	r7, #100	@ 0x64
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	50000100 	.word	0x50000100
 80020bc:	50000400 	.word	0x50000400
 80020c0:	50000500 	.word	0x50000500
 80020c4:	50000300 	.word	0x50000300
 80020c8:	50000700 	.word	0x50000700

080020cc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80020d4:	2300      	movs	r3, #0
 80020d6:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f003 0303 	and.w	r3, r3, #3
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d108      	bne.n	80020f8 <ADC_Enable+0x2c>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0301 	and.w	r3, r3, #1
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d101      	bne.n	80020f8 <ADC_Enable+0x2c>
 80020f4:	2301      	movs	r3, #1
 80020f6:	e000      	b.n	80020fa <ADC_Enable+0x2e>
 80020f8:	2300      	movs	r3, #0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d143      	bne.n	8002186 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	689a      	ldr	r2, [r3, #8]
 8002104:	4b22      	ldr	r3, [pc, #136]	@ (8002190 <ADC_Enable+0xc4>)
 8002106:	4013      	ands	r3, r2
 8002108:	2b00      	cmp	r3, #0
 800210a:	d00d      	beq.n	8002128 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002110:	f043 0210 	orr.w	r2, r3, #16
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800211c:	f043 0201 	orr.w	r2, r3, #1
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e02f      	b.n	8002188 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	689a      	ldr	r2, [r3, #8]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f042 0201 	orr.w	r2, r2, #1
 8002136:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002138:	f7fe ffda 	bl	80010f0 <HAL_GetTick>
 800213c:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800213e:	e01b      	b.n	8002178 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002140:	f7fe ffd6 	bl	80010f0 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	2b02      	cmp	r3, #2
 800214c:	d914      	bls.n	8002178 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0301 	and.w	r3, r3, #1
 8002158:	2b01      	cmp	r3, #1
 800215a:	d00d      	beq.n	8002178 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002160:	f043 0210 	orr.w	r2, r3, #16
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800216c:	f043 0201 	orr.w	r2, r3, #1
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e007      	b.n	8002188 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	2b01      	cmp	r3, #1
 8002184:	d1dc      	bne.n	8002140 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002186:	2300      	movs	r3, #0
}
 8002188:	4618      	mov	r0, r3
 800218a:	3710      	adds	r7, #16
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	8000003f 	.word	0x8000003f

08002194 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800219c:	2300      	movs	r3, #0
 800219e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f003 0303 	and.w	r3, r3, #3
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d108      	bne.n	80021c0 <ADC_Disable+0x2c>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0301 	and.w	r3, r3, #1
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d101      	bne.n	80021c0 <ADC_Disable+0x2c>
 80021bc:	2301      	movs	r3, #1
 80021be:	e000      	b.n	80021c2 <ADC_Disable+0x2e>
 80021c0:	2300      	movs	r3, #0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d047      	beq.n	8002256 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	f003 030d 	and.w	r3, r3, #13
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d10f      	bne.n	80021f4 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	689a      	ldr	r2, [r3, #8]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f042 0202 	orr.w	r2, r2, #2
 80021e2:	609a      	str	r2, [r3, #8]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2203      	movs	r2, #3
 80021ea:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80021ec:	f7fe ff80 	bl	80010f0 <HAL_GetTick>
 80021f0:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80021f2:	e029      	b.n	8002248 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f8:	f043 0210 	orr.w	r2, r3, #16
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002204:	f043 0201 	orr.w	r2, r3, #1
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e023      	b.n	8002258 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002210:	f7fe ff6e 	bl	80010f0 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b02      	cmp	r3, #2
 800221c:	d914      	bls.n	8002248 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	f003 0301 	and.w	r3, r3, #1
 8002228:	2b01      	cmp	r3, #1
 800222a:	d10d      	bne.n	8002248 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002230:	f043 0210 	orr.w	r2, r3, #16
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800223c:	f043 0201 	orr.w	r2, r3, #1
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e007      	b.n	8002258 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f003 0301 	and.w	r3, r3, #1
 8002252:	2b01      	cmp	r3, #1
 8002254:	d0dc      	beq.n	8002210 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002256:	2300      	movs	r3, #0
}
 8002258:	4618      	mov	r0, r3
 800225a:	3710      	adds	r7, #16
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}

08002260 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002260:	b480      	push	{r7}
 8002262:	b085      	sub	sp, #20
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f003 0307 	and.w	r3, r3, #7
 800226e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002270:	4b0c      	ldr	r3, [pc, #48]	@ (80022a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002276:	68ba      	ldr	r2, [r7, #8]
 8002278:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800227c:	4013      	ands	r3, r2
 800227e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002288:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800228c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002290:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002292:	4a04      	ldr	r2, [pc, #16]	@ (80022a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	60d3      	str	r3, [r2, #12]
}
 8002298:	bf00      	nop
 800229a:	3714      	adds	r7, #20
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr
 80022a4:	e000ed00 	.word	0xe000ed00

080022a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022ac:	4b04      	ldr	r3, [pc, #16]	@ (80022c0 <__NVIC_GetPriorityGrouping+0x18>)
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	0a1b      	lsrs	r3, r3, #8
 80022b2:	f003 0307 	and.w	r3, r3, #7
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr
 80022c0:	e000ed00 	.word	0xe000ed00

080022c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	4603      	mov	r3, r0
 80022cc:	6039      	str	r1, [r7, #0]
 80022ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	db0a      	blt.n	80022ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	b2da      	uxtb	r2, r3
 80022dc:	490c      	ldr	r1, [pc, #48]	@ (8002310 <__NVIC_SetPriority+0x4c>)
 80022de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e2:	0112      	lsls	r2, r2, #4
 80022e4:	b2d2      	uxtb	r2, r2
 80022e6:	440b      	add	r3, r1
 80022e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022ec:	e00a      	b.n	8002304 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	b2da      	uxtb	r2, r3
 80022f2:	4908      	ldr	r1, [pc, #32]	@ (8002314 <__NVIC_SetPriority+0x50>)
 80022f4:	79fb      	ldrb	r3, [r7, #7]
 80022f6:	f003 030f 	and.w	r3, r3, #15
 80022fa:	3b04      	subs	r3, #4
 80022fc:	0112      	lsls	r2, r2, #4
 80022fe:	b2d2      	uxtb	r2, r2
 8002300:	440b      	add	r3, r1
 8002302:	761a      	strb	r2, [r3, #24]
}
 8002304:	bf00      	nop
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr
 8002310:	e000e100 	.word	0xe000e100
 8002314:	e000ed00 	.word	0xe000ed00

08002318 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002318:	b480      	push	{r7}
 800231a:	b089      	sub	sp, #36	@ 0x24
 800231c:	af00      	add	r7, sp, #0
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	60b9      	str	r1, [r7, #8]
 8002322:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f003 0307 	and.w	r3, r3, #7
 800232a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	f1c3 0307 	rsb	r3, r3, #7
 8002332:	2b04      	cmp	r3, #4
 8002334:	bf28      	it	cs
 8002336:	2304      	movcs	r3, #4
 8002338:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	3304      	adds	r3, #4
 800233e:	2b06      	cmp	r3, #6
 8002340:	d902      	bls.n	8002348 <NVIC_EncodePriority+0x30>
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	3b03      	subs	r3, #3
 8002346:	e000      	b.n	800234a <NVIC_EncodePriority+0x32>
 8002348:	2300      	movs	r3, #0
 800234a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800234c:	f04f 32ff 	mov.w	r2, #4294967295
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	fa02 f303 	lsl.w	r3, r2, r3
 8002356:	43da      	mvns	r2, r3
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	401a      	ands	r2, r3
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002360:	f04f 31ff 	mov.w	r1, #4294967295
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	fa01 f303 	lsl.w	r3, r1, r3
 800236a:	43d9      	mvns	r1, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002370:	4313      	orrs	r3, r2
         );
}
 8002372:	4618      	mov	r0, r3
 8002374:	3724      	adds	r7, #36	@ 0x24
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
	...

08002380 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	3b01      	subs	r3, #1
 800238c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002390:	d301      	bcc.n	8002396 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002392:	2301      	movs	r3, #1
 8002394:	e00f      	b.n	80023b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002396:	4a0a      	ldr	r2, [pc, #40]	@ (80023c0 <SysTick_Config+0x40>)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	3b01      	subs	r3, #1
 800239c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800239e:	210f      	movs	r1, #15
 80023a0:	f04f 30ff 	mov.w	r0, #4294967295
 80023a4:	f7ff ff8e 	bl	80022c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023a8:	4b05      	ldr	r3, [pc, #20]	@ (80023c0 <SysTick_Config+0x40>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023ae:	4b04      	ldr	r3, [pc, #16]	@ (80023c0 <SysTick_Config+0x40>)
 80023b0:	2207      	movs	r2, #7
 80023b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	e000e010 	.word	0xe000e010

080023c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f7ff ff47 	bl	8002260 <__NVIC_SetPriorityGrouping>
}
 80023d2:	bf00      	nop
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023da:	b580      	push	{r7, lr}
 80023dc:	b086      	sub	sp, #24
 80023de:	af00      	add	r7, sp, #0
 80023e0:	4603      	mov	r3, r0
 80023e2:	60b9      	str	r1, [r7, #8]
 80023e4:	607a      	str	r2, [r7, #4]
 80023e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023e8:	2300      	movs	r3, #0
 80023ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023ec:	f7ff ff5c 	bl	80022a8 <__NVIC_GetPriorityGrouping>
 80023f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	68b9      	ldr	r1, [r7, #8]
 80023f6:	6978      	ldr	r0, [r7, #20]
 80023f8:	f7ff ff8e 	bl	8002318 <NVIC_EncodePriority>
 80023fc:	4602      	mov	r2, r0
 80023fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002402:	4611      	mov	r1, r2
 8002404:	4618      	mov	r0, r3
 8002406:	f7ff ff5d 	bl	80022c4 <__NVIC_SetPriority>
}
 800240a:	bf00      	nop
 800240c:	3718      	adds	r7, #24
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002412:	b580      	push	{r7, lr}
 8002414:	b082      	sub	sp, #8
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f7ff ffb0 	bl	8002380 <SysTick_Config>
 8002420:	4603      	mov	r3, r0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
	...

0800242c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800242c:	b480      	push	{r7}
 800242e:	b087      	sub	sp, #28
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002436:	2300      	movs	r3, #0
 8002438:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800243a:	e154      	b.n	80026e6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	2101      	movs	r1, #1
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	fa01 f303 	lsl.w	r3, r1, r3
 8002448:	4013      	ands	r3, r2
 800244a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2b00      	cmp	r3, #0
 8002450:	f000 8146 	beq.w	80026e0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f003 0303 	and.w	r3, r3, #3
 800245c:	2b01      	cmp	r3, #1
 800245e:	d005      	beq.n	800246c <HAL_GPIO_Init+0x40>
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f003 0303 	and.w	r3, r3, #3
 8002468:	2b02      	cmp	r3, #2
 800246a:	d130      	bne.n	80024ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	005b      	lsls	r3, r3, #1
 8002476:	2203      	movs	r2, #3
 8002478:	fa02 f303 	lsl.w	r3, r2, r3
 800247c:	43db      	mvns	r3, r3
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	4013      	ands	r3, r2
 8002482:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	68da      	ldr	r2, [r3, #12]
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	005b      	lsls	r3, r3, #1
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	693a      	ldr	r2, [r7, #16]
 8002492:	4313      	orrs	r3, r2
 8002494:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	693a      	ldr	r2, [r7, #16]
 800249a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024a2:	2201      	movs	r2, #1
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	fa02 f303 	lsl.w	r3, r2, r3
 80024aa:	43db      	mvns	r3, r3
 80024ac:	693a      	ldr	r2, [r7, #16]
 80024ae:	4013      	ands	r3, r2
 80024b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	091b      	lsrs	r3, r3, #4
 80024b8:	f003 0201 	and.w	r2, r3, #1
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	fa02 f303 	lsl.w	r3, r2, r3
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f003 0303 	and.w	r3, r3, #3
 80024d6:	2b03      	cmp	r3, #3
 80024d8:	d017      	beq.n	800250a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	2203      	movs	r2, #3
 80024e6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ea:	43db      	mvns	r3, r3
 80024ec:	693a      	ldr	r2, [r7, #16]
 80024ee:	4013      	ands	r3, r2
 80024f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	689a      	ldr	r2, [r3, #8]
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	005b      	lsls	r3, r3, #1
 80024fa:	fa02 f303 	lsl.w	r3, r2, r3
 80024fe:	693a      	ldr	r2, [r7, #16]
 8002500:	4313      	orrs	r3, r2
 8002502:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	693a      	ldr	r2, [r7, #16]
 8002508:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f003 0303 	and.w	r3, r3, #3
 8002512:	2b02      	cmp	r3, #2
 8002514:	d123      	bne.n	800255e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	08da      	lsrs	r2, r3, #3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	3208      	adds	r2, #8
 800251e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002522:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	f003 0307 	and.w	r3, r3, #7
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	220f      	movs	r2, #15
 800252e:	fa02 f303 	lsl.w	r3, r2, r3
 8002532:	43db      	mvns	r3, r3
 8002534:	693a      	ldr	r2, [r7, #16]
 8002536:	4013      	ands	r3, r2
 8002538:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	691a      	ldr	r2, [r3, #16]
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	f003 0307 	and.w	r3, r3, #7
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	fa02 f303 	lsl.w	r3, r2, r3
 800254a:	693a      	ldr	r2, [r7, #16]
 800254c:	4313      	orrs	r3, r2
 800254e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	08da      	lsrs	r2, r3, #3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	3208      	adds	r2, #8
 8002558:	6939      	ldr	r1, [r7, #16]
 800255a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	005b      	lsls	r3, r3, #1
 8002568:	2203      	movs	r2, #3
 800256a:	fa02 f303 	lsl.w	r3, r2, r3
 800256e:	43db      	mvns	r3, r3
 8002570:	693a      	ldr	r2, [r7, #16]
 8002572:	4013      	ands	r3, r2
 8002574:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f003 0203 	and.w	r2, r3, #3
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	fa02 f303 	lsl.w	r3, r2, r3
 8002586:	693a      	ldr	r2, [r7, #16]
 8002588:	4313      	orrs	r3, r2
 800258a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	693a      	ldr	r2, [r7, #16]
 8002590:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800259a:	2b00      	cmp	r3, #0
 800259c:	f000 80a0 	beq.w	80026e0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025a0:	4b58      	ldr	r3, [pc, #352]	@ (8002704 <HAL_GPIO_Init+0x2d8>)
 80025a2:	699b      	ldr	r3, [r3, #24]
 80025a4:	4a57      	ldr	r2, [pc, #348]	@ (8002704 <HAL_GPIO_Init+0x2d8>)
 80025a6:	f043 0301 	orr.w	r3, r3, #1
 80025aa:	6193      	str	r3, [r2, #24]
 80025ac:	4b55      	ldr	r3, [pc, #340]	@ (8002704 <HAL_GPIO_Init+0x2d8>)
 80025ae:	699b      	ldr	r3, [r3, #24]
 80025b0:	f003 0301 	and.w	r3, r3, #1
 80025b4:	60bb      	str	r3, [r7, #8]
 80025b6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80025b8:	4a53      	ldr	r2, [pc, #332]	@ (8002708 <HAL_GPIO_Init+0x2dc>)
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	089b      	lsrs	r3, r3, #2
 80025be:	3302      	adds	r3, #2
 80025c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	f003 0303 	and.w	r3, r3, #3
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	220f      	movs	r2, #15
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	43db      	mvns	r3, r3
 80025d6:	693a      	ldr	r2, [r7, #16]
 80025d8:	4013      	ands	r3, r2
 80025da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80025e2:	d019      	beq.n	8002618 <HAL_GPIO_Init+0x1ec>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	4a49      	ldr	r2, [pc, #292]	@ (800270c <HAL_GPIO_Init+0x2e0>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d013      	beq.n	8002614 <HAL_GPIO_Init+0x1e8>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	4a48      	ldr	r2, [pc, #288]	@ (8002710 <HAL_GPIO_Init+0x2e4>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d00d      	beq.n	8002610 <HAL_GPIO_Init+0x1e4>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	4a47      	ldr	r2, [pc, #284]	@ (8002714 <HAL_GPIO_Init+0x2e8>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d007      	beq.n	800260c <HAL_GPIO_Init+0x1e0>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	4a46      	ldr	r2, [pc, #280]	@ (8002718 <HAL_GPIO_Init+0x2ec>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d101      	bne.n	8002608 <HAL_GPIO_Init+0x1dc>
 8002604:	2304      	movs	r3, #4
 8002606:	e008      	b.n	800261a <HAL_GPIO_Init+0x1ee>
 8002608:	2305      	movs	r3, #5
 800260a:	e006      	b.n	800261a <HAL_GPIO_Init+0x1ee>
 800260c:	2303      	movs	r3, #3
 800260e:	e004      	b.n	800261a <HAL_GPIO_Init+0x1ee>
 8002610:	2302      	movs	r3, #2
 8002612:	e002      	b.n	800261a <HAL_GPIO_Init+0x1ee>
 8002614:	2301      	movs	r3, #1
 8002616:	e000      	b.n	800261a <HAL_GPIO_Init+0x1ee>
 8002618:	2300      	movs	r3, #0
 800261a:	697a      	ldr	r2, [r7, #20]
 800261c:	f002 0203 	and.w	r2, r2, #3
 8002620:	0092      	lsls	r2, r2, #2
 8002622:	4093      	lsls	r3, r2
 8002624:	693a      	ldr	r2, [r7, #16]
 8002626:	4313      	orrs	r3, r2
 8002628:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800262a:	4937      	ldr	r1, [pc, #220]	@ (8002708 <HAL_GPIO_Init+0x2dc>)
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	089b      	lsrs	r3, r3, #2
 8002630:	3302      	adds	r3, #2
 8002632:	693a      	ldr	r2, [r7, #16]
 8002634:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002638:	4b38      	ldr	r3, [pc, #224]	@ (800271c <HAL_GPIO_Init+0x2f0>)
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	43db      	mvns	r3, r3
 8002642:	693a      	ldr	r2, [r7, #16]
 8002644:	4013      	ands	r3, r2
 8002646:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d003      	beq.n	800265c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002654:	693a      	ldr	r2, [r7, #16]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	4313      	orrs	r3, r2
 800265a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800265c:	4a2f      	ldr	r2, [pc, #188]	@ (800271c <HAL_GPIO_Init+0x2f0>)
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002662:	4b2e      	ldr	r3, [pc, #184]	@ (800271c <HAL_GPIO_Init+0x2f0>)
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	43db      	mvns	r3, r3
 800266c:	693a      	ldr	r2, [r7, #16]
 800266e:	4013      	ands	r3, r2
 8002670:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d003      	beq.n	8002686 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800267e:	693a      	ldr	r2, [r7, #16]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	4313      	orrs	r3, r2
 8002684:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002686:	4a25      	ldr	r2, [pc, #148]	@ (800271c <HAL_GPIO_Init+0x2f0>)
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800268c:	4b23      	ldr	r3, [pc, #140]	@ (800271c <HAL_GPIO_Init+0x2f0>)
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	43db      	mvns	r3, r3
 8002696:	693a      	ldr	r2, [r7, #16]
 8002698:	4013      	ands	r3, r2
 800269a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d003      	beq.n	80026b0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80026a8:	693a      	ldr	r2, [r7, #16]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80026b0:	4a1a      	ldr	r2, [pc, #104]	@ (800271c <HAL_GPIO_Init+0x2f0>)
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026b6:	4b19      	ldr	r3, [pc, #100]	@ (800271c <HAL_GPIO_Init+0x2f0>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	43db      	mvns	r3, r3
 80026c0:	693a      	ldr	r2, [r7, #16]
 80026c2:	4013      	ands	r3, r2
 80026c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d003      	beq.n	80026da <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80026d2:	693a      	ldr	r2, [r7, #16]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80026da:	4a10      	ldr	r2, [pc, #64]	@ (800271c <HAL_GPIO_Init+0x2f0>)
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	3301      	adds	r3, #1
 80026e4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	fa22 f303 	lsr.w	r3, r2, r3
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	f47f aea3 	bne.w	800243c <HAL_GPIO_Init+0x10>
  }
}
 80026f6:	bf00      	nop
 80026f8:	bf00      	nop
 80026fa:	371c      	adds	r7, #28
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr
 8002704:	40021000 	.word	0x40021000
 8002708:	40010000 	.word	0x40010000
 800270c:	48000400 	.word	0x48000400
 8002710:	48000800 	.word	0x48000800
 8002714:	48000c00 	.word	0x48000c00
 8002718:	48001000 	.word	0x48001000
 800271c:	40010400 	.word	0x40010400

08002720 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	460b      	mov	r3, r1
 800272a:	807b      	strh	r3, [r7, #2]
 800272c:	4613      	mov	r3, r2
 800272e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002730:	787b      	ldrb	r3, [r7, #1]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d003      	beq.n	800273e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002736:	887a      	ldrh	r2, [r7, #2]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800273c:	e002      	b.n	8002744 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800273e:	887a      	ldrh	r2, [r7, #2]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002744:	bf00      	nop
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr

08002750 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d101      	bne.n	8002762 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e08d      	b.n	800287e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002768:	b2db      	uxtb	r3, r3
 800276a:	2b00      	cmp	r3, #0
 800276c:	d106      	bne.n	800277c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f7fe f9ba 	bl	8000af0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2224      	movs	r2, #36	@ 0x24
 8002780:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f022 0201 	bic.w	r2, r2, #1
 8002792:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	685a      	ldr	r2, [r3, #4]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80027a0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	689a      	ldr	r2, [r3, #8]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80027b0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d107      	bne.n	80027ca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	689a      	ldr	r2, [r3, #8]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80027c6:	609a      	str	r2, [r3, #8]
 80027c8:	e006      	b.n	80027d8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	689a      	ldr	r2, [r3, #8]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80027d6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d108      	bne.n	80027f2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	685a      	ldr	r2, [r3, #4]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80027ee:	605a      	str	r2, [r3, #4]
 80027f0:	e007      	b.n	8002802 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	685a      	ldr	r2, [r3, #4]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002800:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	6812      	ldr	r2, [r2, #0]
 800280c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002810:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002814:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	68da      	ldr	r2, [r3, #12]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002824:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	691a      	ldr	r2, [r3, #16]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	695b      	ldr	r3, [r3, #20]
 800282e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	699b      	ldr	r3, [r3, #24]
 8002836:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	430a      	orrs	r2, r1
 800283e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	69d9      	ldr	r1, [r3, #28]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6a1a      	ldr	r2, [r3, #32]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	430a      	orrs	r2, r1
 800284e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f042 0201 	orr.w	r2, r2, #1
 800285e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2220      	movs	r2, #32
 800286a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}

08002886 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002886:	b480      	push	{r7}
 8002888:	b083      	sub	sp, #12
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
 800288e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002896:	b2db      	uxtb	r3, r3
 8002898:	2b20      	cmp	r3, #32
 800289a:	d138      	bne.n	800290e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d101      	bne.n	80028aa <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80028a6:	2302      	movs	r3, #2
 80028a8:	e032      	b.n	8002910 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2201      	movs	r2, #1
 80028ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2224      	movs	r2, #36	@ 0x24
 80028b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f022 0201 	bic.w	r2, r2, #1
 80028c8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80028d8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	6819      	ldr	r1, [r3, #0]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	683a      	ldr	r2, [r7, #0]
 80028e6:	430a      	orrs	r2, r1
 80028e8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f042 0201 	orr.w	r2, r2, #1
 80028f8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2220      	movs	r2, #32
 80028fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800290a:	2300      	movs	r3, #0
 800290c:	e000      	b.n	8002910 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800290e:	2302      	movs	r3, #2
  }
}
 8002910:	4618      	mov	r0, r3
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b20      	cmp	r3, #32
 8002930:	d139      	bne.n	80029a6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002938:	2b01      	cmp	r3, #1
 800293a:	d101      	bne.n	8002940 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800293c:	2302      	movs	r3, #2
 800293e:	e033      	b.n	80029a8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2224      	movs	r2, #36	@ 0x24
 800294c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f022 0201 	bic.w	r2, r2, #1
 800295e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800296e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	021b      	lsls	r3, r3, #8
 8002974:	68fa      	ldr	r2, [r7, #12]
 8002976:	4313      	orrs	r3, r2
 8002978:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	68fa      	ldr	r2, [r7, #12]
 8002980:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f042 0201 	orr.w	r2, r2, #1
 8002990:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2220      	movs	r2, #32
 8002996:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80029a2:	2300      	movs	r3, #0
 80029a4:	e000      	b.n	80029a8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80029a6:	2302      	movs	r3, #2
  }
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3714      	adds	r7, #20
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d101      	bne.n	80029c6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e0b9      	b.n	8002b3a <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d106      	bne.n	80029e0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f7fe f9dc 	bl	8000d98 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2203      	movs	r2, #3
 80029e4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4618      	mov	r0, r3
 80029ee:	f003 fa72 	bl	8005ed6 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029f2:	2300      	movs	r3, #0
 80029f4:	73fb      	strb	r3, [r7, #15]
 80029f6:	e03e      	b.n	8002a76 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80029f8:	7bfa      	ldrb	r2, [r7, #15]
 80029fa:	6879      	ldr	r1, [r7, #4]
 80029fc:	4613      	mov	r3, r2
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	4413      	add	r3, r2
 8002a02:	00db      	lsls	r3, r3, #3
 8002a04:	440b      	add	r3, r1
 8002a06:	3311      	adds	r3, #17
 8002a08:	2201      	movs	r2, #1
 8002a0a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002a0c:	7bfa      	ldrb	r2, [r7, #15]
 8002a0e:	6879      	ldr	r1, [r7, #4]
 8002a10:	4613      	mov	r3, r2
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	4413      	add	r3, r2
 8002a16:	00db      	lsls	r3, r3, #3
 8002a18:	440b      	add	r3, r1
 8002a1a:	3310      	adds	r3, #16
 8002a1c:	7bfa      	ldrb	r2, [r7, #15]
 8002a1e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002a20:	7bfa      	ldrb	r2, [r7, #15]
 8002a22:	6879      	ldr	r1, [r7, #4]
 8002a24:	4613      	mov	r3, r2
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	4413      	add	r3, r2
 8002a2a:	00db      	lsls	r3, r3, #3
 8002a2c:	440b      	add	r3, r1
 8002a2e:	3313      	adds	r3, #19
 8002a30:	2200      	movs	r2, #0
 8002a32:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002a34:	7bfa      	ldrb	r2, [r7, #15]
 8002a36:	6879      	ldr	r1, [r7, #4]
 8002a38:	4613      	mov	r3, r2
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	4413      	add	r3, r2
 8002a3e:	00db      	lsls	r3, r3, #3
 8002a40:	440b      	add	r3, r1
 8002a42:	3320      	adds	r3, #32
 8002a44:	2200      	movs	r2, #0
 8002a46:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002a48:	7bfa      	ldrb	r2, [r7, #15]
 8002a4a:	6879      	ldr	r1, [r7, #4]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	4413      	add	r3, r2
 8002a52:	00db      	lsls	r3, r3, #3
 8002a54:	440b      	add	r3, r1
 8002a56:	3324      	adds	r3, #36	@ 0x24
 8002a58:	2200      	movs	r2, #0
 8002a5a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002a5c:	7bfb      	ldrb	r3, [r7, #15]
 8002a5e:	6879      	ldr	r1, [r7, #4]
 8002a60:	1c5a      	adds	r2, r3, #1
 8002a62:	4613      	mov	r3, r2
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	4413      	add	r3, r2
 8002a68:	00db      	lsls	r3, r3, #3
 8002a6a:	440b      	add	r3, r1
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a70:	7bfb      	ldrb	r3, [r7, #15]
 8002a72:	3301      	adds	r3, #1
 8002a74:	73fb      	strb	r3, [r7, #15]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	791b      	ldrb	r3, [r3, #4]
 8002a7a:	7bfa      	ldrb	r2, [r7, #15]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d3bb      	bcc.n	80029f8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a80:	2300      	movs	r3, #0
 8002a82:	73fb      	strb	r3, [r7, #15]
 8002a84:	e044      	b.n	8002b10 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002a86:	7bfa      	ldrb	r2, [r7, #15]
 8002a88:	6879      	ldr	r1, [r7, #4]
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	4413      	add	r3, r2
 8002a90:	00db      	lsls	r3, r3, #3
 8002a92:	440b      	add	r3, r1
 8002a94:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8002a98:	2200      	movs	r2, #0
 8002a9a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002a9c:	7bfa      	ldrb	r2, [r7, #15]
 8002a9e:	6879      	ldr	r1, [r7, #4]
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	4413      	add	r3, r2
 8002aa6:	00db      	lsls	r3, r3, #3
 8002aa8:	440b      	add	r3, r1
 8002aaa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002aae:	7bfa      	ldrb	r2, [r7, #15]
 8002ab0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002ab2:	7bfa      	ldrb	r2, [r7, #15]
 8002ab4:	6879      	ldr	r1, [r7, #4]
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	4413      	add	r3, r2
 8002abc:	00db      	lsls	r3, r3, #3
 8002abe:	440b      	add	r3, r1
 8002ac0:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002ac8:	7bfa      	ldrb	r2, [r7, #15]
 8002aca:	6879      	ldr	r1, [r7, #4]
 8002acc:	4613      	mov	r3, r2
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	4413      	add	r3, r2
 8002ad2:	00db      	lsls	r3, r3, #3
 8002ad4:	440b      	add	r3, r1
 8002ad6:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8002ada:	2200      	movs	r2, #0
 8002adc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002ade:	7bfa      	ldrb	r2, [r7, #15]
 8002ae0:	6879      	ldr	r1, [r7, #4]
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	4413      	add	r3, r2
 8002ae8:	00db      	lsls	r3, r3, #3
 8002aea:	440b      	add	r3, r1
 8002aec:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002af0:	2200      	movs	r2, #0
 8002af2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002af4:	7bfa      	ldrb	r2, [r7, #15]
 8002af6:	6879      	ldr	r1, [r7, #4]
 8002af8:	4613      	mov	r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	4413      	add	r3, r2
 8002afe:	00db      	lsls	r3, r3, #3
 8002b00:	440b      	add	r3, r1
 8002b02:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002b06:	2200      	movs	r2, #0
 8002b08:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b0a:	7bfb      	ldrb	r3, [r7, #15]
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	73fb      	strb	r3, [r7, #15]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	791b      	ldrb	r3, [r3, #4]
 8002b14:	7bfa      	ldrb	r2, [r7, #15]
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d3b5      	bcc.n	8002a86 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6818      	ldr	r0, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	3304      	adds	r3, #4
 8002b22:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002b26:	f003 f9f1 	bl	8005f0c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 8002b38:	2300      	movs	r3, #0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3710      	adds	r7, #16
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
	...

08002b44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b50:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b54:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b5a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d102      	bne.n	8002b6a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	f001 b823 	b.w	8003bb0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b6e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	f000 817d 	beq.w	8002e7a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002b80:	4bbc      	ldr	r3, [pc, #752]	@ (8002e74 <HAL_RCC_OscConfig+0x330>)
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f003 030c 	and.w	r3, r3, #12
 8002b88:	2b04      	cmp	r3, #4
 8002b8a:	d00c      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b8c:	4bb9      	ldr	r3, [pc, #740]	@ (8002e74 <HAL_RCC_OscConfig+0x330>)
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f003 030c 	and.w	r3, r3, #12
 8002b94:	2b08      	cmp	r3, #8
 8002b96:	d15c      	bne.n	8002c52 <HAL_RCC_OscConfig+0x10e>
 8002b98:	4bb6      	ldr	r3, [pc, #728]	@ (8002e74 <HAL_RCC_OscConfig+0x330>)
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ba0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ba4:	d155      	bne.n	8002c52 <HAL_RCC_OscConfig+0x10e>
 8002ba6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002baa:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bae:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8002bb2:	fa93 f3a3 	rbit	r3, r3
 8002bb6:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002bba:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bbe:	fab3 f383 	clz	r3, r3
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	095b      	lsrs	r3, r3, #5
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	f043 0301 	orr.w	r3, r3, #1
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d102      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x94>
 8002bd2:	4ba8      	ldr	r3, [pc, #672]	@ (8002e74 <HAL_RCC_OscConfig+0x330>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	e015      	b.n	8002c04 <HAL_RCC_OscConfig+0xc0>
 8002bd8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002bdc:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8002be4:	fa93 f3a3 	rbit	r3, r3
 8002be8:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8002bec:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002bf0:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002bf4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8002bf8:	fa93 f3a3 	rbit	r3, r3
 8002bfc:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8002c00:	4b9c      	ldr	r3, [pc, #624]	@ (8002e74 <HAL_RCC_OscConfig+0x330>)
 8002c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c04:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002c08:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8002c0c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002c10:	fa92 f2a2 	rbit	r2, r2
 8002c14:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8002c18:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8002c1c:	fab2 f282 	clz	r2, r2
 8002c20:	b2d2      	uxtb	r2, r2
 8002c22:	f042 0220 	orr.w	r2, r2, #32
 8002c26:	b2d2      	uxtb	r2, r2
 8002c28:	f002 021f 	and.w	r2, r2, #31
 8002c2c:	2101      	movs	r1, #1
 8002c2e:	fa01 f202 	lsl.w	r2, r1, r2
 8002c32:	4013      	ands	r3, r2
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	f000 811f 	beq.w	8002e78 <HAL_RCC_OscConfig+0x334>
 8002c3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c3e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	f040 8116 	bne.w	8002e78 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	f000 bfaf 	b.w	8003bb0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c56:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c62:	d106      	bne.n	8002c72 <HAL_RCC_OscConfig+0x12e>
 8002c64:	4b83      	ldr	r3, [pc, #524]	@ (8002e74 <HAL_RCC_OscConfig+0x330>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a82      	ldr	r2, [pc, #520]	@ (8002e74 <HAL_RCC_OscConfig+0x330>)
 8002c6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c6e:	6013      	str	r3, [r2, #0]
 8002c70:	e036      	b.n	8002ce0 <HAL_RCC_OscConfig+0x19c>
 8002c72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c76:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d10c      	bne.n	8002c9c <HAL_RCC_OscConfig+0x158>
 8002c82:	4b7c      	ldr	r3, [pc, #496]	@ (8002e74 <HAL_RCC_OscConfig+0x330>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a7b      	ldr	r2, [pc, #492]	@ (8002e74 <HAL_RCC_OscConfig+0x330>)
 8002c88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c8c:	6013      	str	r3, [r2, #0]
 8002c8e:	4b79      	ldr	r3, [pc, #484]	@ (8002e74 <HAL_RCC_OscConfig+0x330>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a78      	ldr	r2, [pc, #480]	@ (8002e74 <HAL_RCC_OscConfig+0x330>)
 8002c94:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c98:	6013      	str	r3, [r2, #0]
 8002c9a:	e021      	b.n	8002ce0 <HAL_RCC_OscConfig+0x19c>
 8002c9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ca0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002cac:	d10c      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x184>
 8002cae:	4b71      	ldr	r3, [pc, #452]	@ (8002e74 <HAL_RCC_OscConfig+0x330>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a70      	ldr	r2, [pc, #448]	@ (8002e74 <HAL_RCC_OscConfig+0x330>)
 8002cb4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002cb8:	6013      	str	r3, [r2, #0]
 8002cba:	4b6e      	ldr	r3, [pc, #440]	@ (8002e74 <HAL_RCC_OscConfig+0x330>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a6d      	ldr	r2, [pc, #436]	@ (8002e74 <HAL_RCC_OscConfig+0x330>)
 8002cc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cc4:	6013      	str	r3, [r2, #0]
 8002cc6:	e00b      	b.n	8002ce0 <HAL_RCC_OscConfig+0x19c>
 8002cc8:	4b6a      	ldr	r3, [pc, #424]	@ (8002e74 <HAL_RCC_OscConfig+0x330>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a69      	ldr	r2, [pc, #420]	@ (8002e74 <HAL_RCC_OscConfig+0x330>)
 8002cce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cd2:	6013      	str	r3, [r2, #0]
 8002cd4:	4b67      	ldr	r3, [pc, #412]	@ (8002e74 <HAL_RCC_OscConfig+0x330>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a66      	ldr	r2, [pc, #408]	@ (8002e74 <HAL_RCC_OscConfig+0x330>)
 8002cda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002cde:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002ce0:	4b64      	ldr	r3, [pc, #400]	@ (8002e74 <HAL_RCC_OscConfig+0x330>)
 8002ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ce4:	f023 020f 	bic.w	r2, r3, #15
 8002ce8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cec:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	495f      	ldr	r1, [pc, #380]	@ (8002e74 <HAL_RCC_OscConfig+0x330>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cfa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cfe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d059      	beq.n	8002dbe <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d0a:	f7fe f9f1 	bl	80010f0 <HAL_GetTick>
 8002d0e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d12:	e00a      	b.n	8002d2a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d14:	f7fe f9ec 	bl	80010f0 <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	2b64      	cmp	r3, #100	@ 0x64
 8002d22:	d902      	bls.n	8002d2a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	f000 bf43 	b.w	8003bb0 <HAL_RCC_OscConfig+0x106c>
 8002d2a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d2e:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d32:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8002d36:	fa93 f3a3 	rbit	r3, r3
 8002d3a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8002d3e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d42:	fab3 f383 	clz	r3, r3
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	095b      	lsrs	r3, r3, #5
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	f043 0301 	orr.w	r3, r3, #1
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d102      	bne.n	8002d5c <HAL_RCC_OscConfig+0x218>
 8002d56:	4b47      	ldr	r3, [pc, #284]	@ (8002e74 <HAL_RCC_OscConfig+0x330>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	e015      	b.n	8002d88 <HAL_RCC_OscConfig+0x244>
 8002d5c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d60:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d64:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8002d68:	fa93 f3a3 	rbit	r3, r3
 8002d6c:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002d70:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d74:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002d78:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8002d7c:	fa93 f3a3 	rbit	r3, r3
 8002d80:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002d84:	4b3b      	ldr	r3, [pc, #236]	@ (8002e74 <HAL_RCC_OscConfig+0x330>)
 8002d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d88:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002d8c:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8002d90:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002d94:	fa92 f2a2 	rbit	r2, r2
 8002d98:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8002d9c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8002da0:	fab2 f282 	clz	r2, r2
 8002da4:	b2d2      	uxtb	r2, r2
 8002da6:	f042 0220 	orr.w	r2, r2, #32
 8002daa:	b2d2      	uxtb	r2, r2
 8002dac:	f002 021f 	and.w	r2, r2, #31
 8002db0:	2101      	movs	r1, #1
 8002db2:	fa01 f202 	lsl.w	r2, r1, r2
 8002db6:	4013      	ands	r3, r2
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d0ab      	beq.n	8002d14 <HAL_RCC_OscConfig+0x1d0>
 8002dbc:	e05d      	b.n	8002e7a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dbe:	f7fe f997 	bl	80010f0 <HAL_GetTick>
 8002dc2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dc6:	e00a      	b.n	8002dde <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dc8:	f7fe f992 	bl	80010f0 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	2b64      	cmp	r3, #100	@ 0x64
 8002dd6:	d902      	bls.n	8002dde <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	f000 bee9 	b.w	8003bb0 <HAL_RCC_OscConfig+0x106c>
 8002dde:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002de2:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8002dea:	fa93 f3a3 	rbit	r3, r3
 8002dee:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8002df2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002df6:	fab3 f383 	clz	r3, r3
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	095b      	lsrs	r3, r3, #5
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	f043 0301 	orr.w	r3, r3, #1
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d102      	bne.n	8002e10 <HAL_RCC_OscConfig+0x2cc>
 8002e0a:	4b1a      	ldr	r3, [pc, #104]	@ (8002e74 <HAL_RCC_OscConfig+0x330>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	e015      	b.n	8002e3c <HAL_RCC_OscConfig+0x2f8>
 8002e10:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002e14:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e18:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8002e1c:	fa93 f3a3 	rbit	r3, r3
 8002e20:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002e24:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002e28:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002e2c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8002e30:	fa93 f3a3 	rbit	r3, r3
 8002e34:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8002e38:	4b0e      	ldr	r3, [pc, #56]	@ (8002e74 <HAL_RCC_OscConfig+0x330>)
 8002e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e3c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002e40:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8002e44:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002e48:	fa92 f2a2 	rbit	r2, r2
 8002e4c:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8002e50:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8002e54:	fab2 f282 	clz	r2, r2
 8002e58:	b2d2      	uxtb	r2, r2
 8002e5a:	f042 0220 	orr.w	r2, r2, #32
 8002e5e:	b2d2      	uxtb	r2, r2
 8002e60:	f002 021f 	and.w	r2, r2, #31
 8002e64:	2101      	movs	r1, #1
 8002e66:	fa01 f202 	lsl.w	r2, r1, r2
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d1ab      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x284>
 8002e70:	e003      	b.n	8002e7a <HAL_RCC_OscConfig+0x336>
 8002e72:	bf00      	nop
 8002e74:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e7e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0302 	and.w	r3, r3, #2
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	f000 817d 	beq.w	800318a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002e90:	4ba6      	ldr	r3, [pc, #664]	@ (800312c <HAL_RCC_OscConfig+0x5e8>)
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f003 030c 	and.w	r3, r3, #12
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d00b      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002e9c:	4ba3      	ldr	r3, [pc, #652]	@ (800312c <HAL_RCC_OscConfig+0x5e8>)
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f003 030c 	and.w	r3, r3, #12
 8002ea4:	2b08      	cmp	r3, #8
 8002ea6:	d172      	bne.n	8002f8e <HAL_RCC_OscConfig+0x44a>
 8002ea8:	4ba0      	ldr	r3, [pc, #640]	@ (800312c <HAL_RCC_OscConfig+0x5e8>)
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d16c      	bne.n	8002f8e <HAL_RCC_OscConfig+0x44a>
 8002eb4:	2302      	movs	r3, #2
 8002eb6:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eba:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8002ebe:	fa93 f3a3 	rbit	r3, r3
 8002ec2:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8002ec6:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eca:	fab3 f383 	clz	r3, r3
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	095b      	lsrs	r3, r3, #5
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	f043 0301 	orr.w	r3, r3, #1
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d102      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x3a0>
 8002ede:	4b93      	ldr	r3, [pc, #588]	@ (800312c <HAL_RCC_OscConfig+0x5e8>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	e013      	b.n	8002f0c <HAL_RCC_OscConfig+0x3c8>
 8002ee4:	2302      	movs	r3, #2
 8002ee6:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eea:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8002eee:	fa93 f3a3 	rbit	r3, r3
 8002ef2:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002efc:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002f00:	fa93 f3a3 	rbit	r3, r3
 8002f04:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8002f08:	4b88      	ldr	r3, [pc, #544]	@ (800312c <HAL_RCC_OscConfig+0x5e8>)
 8002f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f0c:	2202      	movs	r2, #2
 8002f0e:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8002f12:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002f16:	fa92 f2a2 	rbit	r2, r2
 8002f1a:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8002f1e:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8002f22:	fab2 f282 	clz	r2, r2
 8002f26:	b2d2      	uxtb	r2, r2
 8002f28:	f042 0220 	orr.w	r2, r2, #32
 8002f2c:	b2d2      	uxtb	r2, r2
 8002f2e:	f002 021f 	and.w	r2, r2, #31
 8002f32:	2101      	movs	r1, #1
 8002f34:	fa01 f202 	lsl.w	r2, r1, r2
 8002f38:	4013      	ands	r3, r2
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d00a      	beq.n	8002f54 <HAL_RCC_OscConfig+0x410>
 8002f3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f42:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d002      	beq.n	8002f54 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	f000 be2e 	b.w	8003bb0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f54:	4b75      	ldr	r3, [pc, #468]	@ (800312c <HAL_RCC_OscConfig+0x5e8>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f60:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	695b      	ldr	r3, [r3, #20]
 8002f68:	21f8      	movs	r1, #248	@ 0xf8
 8002f6a:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f6e:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002f72:	fa91 f1a1 	rbit	r1, r1
 8002f76:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8002f7a:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8002f7e:	fab1 f181 	clz	r1, r1
 8002f82:	b2c9      	uxtb	r1, r1
 8002f84:	408b      	lsls	r3, r1
 8002f86:	4969      	ldr	r1, [pc, #420]	@ (800312c <HAL_RCC_OscConfig+0x5e8>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f8c:	e0fd      	b.n	800318a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f92:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	f000 8088 	beq.w	80030b0 <HAL_RCC_OscConfig+0x56c>
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa6:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002faa:	fa93 f3a3 	rbit	r3, r3
 8002fae:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8002fb2:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fb6:	fab3 f383 	clz	r3, r3
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002fc0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	2301      	movs	r3, #1
 8002fca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fcc:	f7fe f890 	bl	80010f0 <HAL_GetTick>
 8002fd0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fd4:	e00a      	b.n	8002fec <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fd6:	f7fe f88b 	bl	80010f0 <HAL_GetTick>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d902      	bls.n	8002fec <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	f000 bde2 	b.w	8003bb0 <HAL_RCC_OscConfig+0x106c>
 8002fec:	2302      	movs	r3, #2
 8002fee:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff2:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8002ff6:	fa93 f3a3 	rbit	r3, r3
 8002ffa:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002ffe:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003002:	fab3 f383 	clz	r3, r3
 8003006:	b2db      	uxtb	r3, r3
 8003008:	095b      	lsrs	r3, r3, #5
 800300a:	b2db      	uxtb	r3, r3
 800300c:	f043 0301 	orr.w	r3, r3, #1
 8003010:	b2db      	uxtb	r3, r3
 8003012:	2b01      	cmp	r3, #1
 8003014:	d102      	bne.n	800301c <HAL_RCC_OscConfig+0x4d8>
 8003016:	4b45      	ldr	r3, [pc, #276]	@ (800312c <HAL_RCC_OscConfig+0x5e8>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	e013      	b.n	8003044 <HAL_RCC_OscConfig+0x500>
 800301c:	2302      	movs	r3, #2
 800301e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003022:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8003026:	fa93 f3a3 	rbit	r3, r3
 800302a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800302e:	2302      	movs	r3, #2
 8003030:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8003034:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8003038:	fa93 f3a3 	rbit	r3, r3
 800303c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8003040:	4b3a      	ldr	r3, [pc, #232]	@ (800312c <HAL_RCC_OscConfig+0x5e8>)
 8003042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003044:	2202      	movs	r2, #2
 8003046:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 800304a:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800304e:	fa92 f2a2 	rbit	r2, r2
 8003052:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8003056:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800305a:	fab2 f282 	clz	r2, r2
 800305e:	b2d2      	uxtb	r2, r2
 8003060:	f042 0220 	orr.w	r2, r2, #32
 8003064:	b2d2      	uxtb	r2, r2
 8003066:	f002 021f 	and.w	r2, r2, #31
 800306a:	2101      	movs	r1, #1
 800306c:	fa01 f202 	lsl.w	r2, r1, r2
 8003070:	4013      	ands	r3, r2
 8003072:	2b00      	cmp	r3, #0
 8003074:	d0af      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003076:	4b2d      	ldr	r3, [pc, #180]	@ (800312c <HAL_RCC_OscConfig+0x5e8>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800307e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003082:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	695b      	ldr	r3, [r3, #20]
 800308a:	21f8      	movs	r1, #248	@ 0xf8
 800308c:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003090:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8003094:	fa91 f1a1 	rbit	r1, r1
 8003098:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 800309c:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80030a0:	fab1 f181 	clz	r1, r1
 80030a4:	b2c9      	uxtb	r1, r1
 80030a6:	408b      	lsls	r3, r1
 80030a8:	4920      	ldr	r1, [pc, #128]	@ (800312c <HAL_RCC_OscConfig+0x5e8>)
 80030aa:	4313      	orrs	r3, r2
 80030ac:	600b      	str	r3, [r1, #0]
 80030ae:	e06c      	b.n	800318a <HAL_RCC_OscConfig+0x646>
 80030b0:	2301      	movs	r3, #1
 80030b2:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80030ba:	fa93 f3a3 	rbit	r3, r3
 80030be:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 80030c2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030c6:	fab3 f383 	clz	r3, r3
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80030d0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	461a      	mov	r2, r3
 80030d8:	2300      	movs	r3, #0
 80030da:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030dc:	f7fe f808 	bl	80010f0 <HAL_GetTick>
 80030e0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030e4:	e00a      	b.n	80030fc <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030e6:	f7fe f803 	bl	80010f0 <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d902      	bls.n	80030fc <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	f000 bd5a 	b.w	8003bb0 <HAL_RCC_OscConfig+0x106c>
 80030fc:	2302      	movs	r3, #2
 80030fe:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003102:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8003106:	fa93 f3a3 	rbit	r3, r3
 800310a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 800310e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003112:	fab3 f383 	clz	r3, r3
 8003116:	b2db      	uxtb	r3, r3
 8003118:	095b      	lsrs	r3, r3, #5
 800311a:	b2db      	uxtb	r3, r3
 800311c:	f043 0301 	orr.w	r3, r3, #1
 8003120:	b2db      	uxtb	r3, r3
 8003122:	2b01      	cmp	r3, #1
 8003124:	d104      	bne.n	8003130 <HAL_RCC_OscConfig+0x5ec>
 8003126:	4b01      	ldr	r3, [pc, #4]	@ (800312c <HAL_RCC_OscConfig+0x5e8>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	e015      	b.n	8003158 <HAL_RCC_OscConfig+0x614>
 800312c:	40021000 	.word	0x40021000
 8003130:	2302      	movs	r3, #2
 8003132:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003136:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800313a:	fa93 f3a3 	rbit	r3, r3
 800313e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8003142:	2302      	movs	r3, #2
 8003144:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8003148:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800314c:	fa93 f3a3 	rbit	r3, r3
 8003150:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8003154:	4bc8      	ldr	r3, [pc, #800]	@ (8003478 <HAL_RCC_OscConfig+0x934>)
 8003156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003158:	2202      	movs	r2, #2
 800315a:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 800315e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8003162:	fa92 f2a2 	rbit	r2, r2
 8003166:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 800316a:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800316e:	fab2 f282 	clz	r2, r2
 8003172:	b2d2      	uxtb	r2, r2
 8003174:	f042 0220 	orr.w	r2, r2, #32
 8003178:	b2d2      	uxtb	r2, r2
 800317a:	f002 021f 	and.w	r2, r2, #31
 800317e:	2101      	movs	r1, #1
 8003180:	fa01 f202 	lsl.w	r2, r1, r2
 8003184:	4013      	ands	r3, r2
 8003186:	2b00      	cmp	r3, #0
 8003188:	d1ad      	bne.n	80030e6 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800318a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800318e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0308 	and.w	r3, r3, #8
 800319a:	2b00      	cmp	r3, #0
 800319c:	f000 8110 	beq.w	80033c0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031a4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	699b      	ldr	r3, [r3, #24]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d079      	beq.n	80032a4 <HAL_RCC_OscConfig+0x760>
 80031b0:	2301      	movs	r3, #1
 80031b2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80031ba:	fa93 f3a3 	rbit	r3, r3
 80031be:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 80031c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031c6:	fab3 f383 	clz	r3, r3
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	461a      	mov	r2, r3
 80031ce:	4bab      	ldr	r3, [pc, #684]	@ (800347c <HAL_RCC_OscConfig+0x938>)
 80031d0:	4413      	add	r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	461a      	mov	r2, r3
 80031d6:	2301      	movs	r3, #1
 80031d8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031da:	f7fd ff89 	bl	80010f0 <HAL_GetTick>
 80031de:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031e2:	e00a      	b.n	80031fa <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031e4:	f7fd ff84 	bl	80010f0 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d902      	bls.n	80031fa <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80031f4:	2303      	movs	r3, #3
 80031f6:	f000 bcdb 	b.w	8003bb0 <HAL_RCC_OscConfig+0x106c>
 80031fa:	2302      	movs	r3, #2
 80031fc:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003200:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8003204:	fa93 f3a3 	rbit	r3, r3
 8003208:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800320c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003210:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003214:	2202      	movs	r2, #2
 8003216:	601a      	str	r2, [r3, #0]
 8003218:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800321c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	fa93 f2a3 	rbit	r2, r3
 8003226:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800322a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800322e:	601a      	str	r2, [r3, #0]
 8003230:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003234:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003238:	2202      	movs	r2, #2
 800323a:	601a      	str	r2, [r3, #0]
 800323c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003240:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	fa93 f2a3 	rbit	r2, r3
 800324a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800324e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003252:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003254:	4b88      	ldr	r3, [pc, #544]	@ (8003478 <HAL_RCC_OscConfig+0x934>)
 8003256:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003258:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800325c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003260:	2102      	movs	r1, #2
 8003262:	6019      	str	r1, [r3, #0]
 8003264:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003268:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	fa93 f1a3 	rbit	r1, r3
 8003272:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003276:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800327a:	6019      	str	r1, [r3, #0]
  return result;
 800327c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003280:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	fab3 f383 	clz	r3, r3
 800328a:	b2db      	uxtb	r3, r3
 800328c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003290:	b2db      	uxtb	r3, r3
 8003292:	f003 031f 	and.w	r3, r3, #31
 8003296:	2101      	movs	r1, #1
 8003298:	fa01 f303 	lsl.w	r3, r1, r3
 800329c:	4013      	ands	r3, r2
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d0a0      	beq.n	80031e4 <HAL_RCC_OscConfig+0x6a0>
 80032a2:	e08d      	b.n	80033c0 <HAL_RCC_OscConfig+0x87c>
 80032a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032a8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80032ac:	2201      	movs	r2, #1
 80032ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032b4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	fa93 f2a3 	rbit	r2, r3
 80032be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032c2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80032c6:	601a      	str	r2, [r3, #0]
  return result;
 80032c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032cc:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80032d0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032d2:	fab3 f383 	clz	r3, r3
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	461a      	mov	r2, r3
 80032da:	4b68      	ldr	r3, [pc, #416]	@ (800347c <HAL_RCC_OscConfig+0x938>)
 80032dc:	4413      	add	r3, r2
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	461a      	mov	r2, r3
 80032e2:	2300      	movs	r3, #0
 80032e4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032e6:	f7fd ff03 	bl	80010f0 <HAL_GetTick>
 80032ea:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032ee:	e00a      	b.n	8003306 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032f0:	f7fd fefe 	bl	80010f0 <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d902      	bls.n	8003306 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	f000 bc55 	b.w	8003bb0 <HAL_RCC_OscConfig+0x106c>
 8003306:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800330a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800330e:	2202      	movs	r2, #2
 8003310:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003312:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003316:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	fa93 f2a3 	rbit	r2, r3
 8003320:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003324:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003328:	601a      	str	r2, [r3, #0]
 800332a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800332e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003332:	2202      	movs	r2, #2
 8003334:	601a      	str	r2, [r3, #0]
 8003336:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800333a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	fa93 f2a3 	rbit	r2, r3
 8003344:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003348:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800334c:	601a      	str	r2, [r3, #0]
 800334e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003352:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003356:	2202      	movs	r2, #2
 8003358:	601a      	str	r2, [r3, #0]
 800335a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800335e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	fa93 f2a3 	rbit	r2, r3
 8003368:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800336c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003370:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003372:	4b41      	ldr	r3, [pc, #260]	@ (8003478 <HAL_RCC_OscConfig+0x934>)
 8003374:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003376:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800337a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800337e:	2102      	movs	r1, #2
 8003380:	6019      	str	r1, [r3, #0]
 8003382:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003386:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	fa93 f1a3 	rbit	r1, r3
 8003390:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003394:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003398:	6019      	str	r1, [r3, #0]
  return result;
 800339a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800339e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	fab3 f383 	clz	r3, r3
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	f003 031f 	and.w	r3, r3, #31
 80033b4:	2101      	movs	r1, #1
 80033b6:	fa01 f303 	lsl.w	r3, r1, r3
 80033ba:	4013      	ands	r3, r2
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d197      	bne.n	80032f0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033c4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0304 	and.w	r3, r3, #4
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	f000 81a1 	beq.w	8003718 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033d6:	2300      	movs	r3, #0
 80033d8:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033dc:	4b26      	ldr	r3, [pc, #152]	@ (8003478 <HAL_RCC_OscConfig+0x934>)
 80033de:	69db      	ldr	r3, [r3, #28]
 80033e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d116      	bne.n	8003416 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033e8:	4b23      	ldr	r3, [pc, #140]	@ (8003478 <HAL_RCC_OscConfig+0x934>)
 80033ea:	69db      	ldr	r3, [r3, #28]
 80033ec:	4a22      	ldr	r2, [pc, #136]	@ (8003478 <HAL_RCC_OscConfig+0x934>)
 80033ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033f2:	61d3      	str	r3, [r2, #28]
 80033f4:	4b20      	ldr	r3, [pc, #128]	@ (8003478 <HAL_RCC_OscConfig+0x934>)
 80033f6:	69db      	ldr	r3, [r3, #28]
 80033f8:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80033fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003400:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8003404:	601a      	str	r2, [r3, #0]
 8003406:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800340a:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800340e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003410:	2301      	movs	r3, #1
 8003412:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003416:	4b1a      	ldr	r3, [pc, #104]	@ (8003480 <HAL_RCC_OscConfig+0x93c>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800341e:	2b00      	cmp	r3, #0
 8003420:	d11a      	bne.n	8003458 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003422:	4b17      	ldr	r3, [pc, #92]	@ (8003480 <HAL_RCC_OscConfig+0x93c>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a16      	ldr	r2, [pc, #88]	@ (8003480 <HAL_RCC_OscConfig+0x93c>)
 8003428:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800342c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800342e:	f7fd fe5f 	bl	80010f0 <HAL_GetTick>
 8003432:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003436:	e009      	b.n	800344c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003438:	f7fd fe5a 	bl	80010f0 <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	2b64      	cmp	r3, #100	@ 0x64
 8003446:	d901      	bls.n	800344c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003448:	2303      	movs	r3, #3
 800344a:	e3b1      	b.n	8003bb0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800344c:	4b0c      	ldr	r3, [pc, #48]	@ (8003480 <HAL_RCC_OscConfig+0x93c>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003454:	2b00      	cmp	r3, #0
 8003456:	d0ef      	beq.n	8003438 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003458:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800345c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	2b01      	cmp	r3, #1
 8003466:	d10d      	bne.n	8003484 <HAL_RCC_OscConfig+0x940>
 8003468:	4b03      	ldr	r3, [pc, #12]	@ (8003478 <HAL_RCC_OscConfig+0x934>)
 800346a:	6a1b      	ldr	r3, [r3, #32]
 800346c:	4a02      	ldr	r2, [pc, #8]	@ (8003478 <HAL_RCC_OscConfig+0x934>)
 800346e:	f043 0301 	orr.w	r3, r3, #1
 8003472:	6213      	str	r3, [r2, #32]
 8003474:	e03c      	b.n	80034f0 <HAL_RCC_OscConfig+0x9ac>
 8003476:	bf00      	nop
 8003478:	40021000 	.word	0x40021000
 800347c:	10908120 	.word	0x10908120
 8003480:	40007000 	.word	0x40007000
 8003484:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003488:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d10c      	bne.n	80034ae <HAL_RCC_OscConfig+0x96a>
 8003494:	4bc1      	ldr	r3, [pc, #772]	@ (800379c <HAL_RCC_OscConfig+0xc58>)
 8003496:	6a1b      	ldr	r3, [r3, #32]
 8003498:	4ac0      	ldr	r2, [pc, #768]	@ (800379c <HAL_RCC_OscConfig+0xc58>)
 800349a:	f023 0301 	bic.w	r3, r3, #1
 800349e:	6213      	str	r3, [r2, #32]
 80034a0:	4bbe      	ldr	r3, [pc, #760]	@ (800379c <HAL_RCC_OscConfig+0xc58>)
 80034a2:	6a1b      	ldr	r3, [r3, #32]
 80034a4:	4abd      	ldr	r2, [pc, #756]	@ (800379c <HAL_RCC_OscConfig+0xc58>)
 80034a6:	f023 0304 	bic.w	r3, r3, #4
 80034aa:	6213      	str	r3, [r2, #32]
 80034ac:	e020      	b.n	80034f0 <HAL_RCC_OscConfig+0x9ac>
 80034ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034b2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	2b05      	cmp	r3, #5
 80034bc:	d10c      	bne.n	80034d8 <HAL_RCC_OscConfig+0x994>
 80034be:	4bb7      	ldr	r3, [pc, #732]	@ (800379c <HAL_RCC_OscConfig+0xc58>)
 80034c0:	6a1b      	ldr	r3, [r3, #32]
 80034c2:	4ab6      	ldr	r2, [pc, #728]	@ (800379c <HAL_RCC_OscConfig+0xc58>)
 80034c4:	f043 0304 	orr.w	r3, r3, #4
 80034c8:	6213      	str	r3, [r2, #32]
 80034ca:	4bb4      	ldr	r3, [pc, #720]	@ (800379c <HAL_RCC_OscConfig+0xc58>)
 80034cc:	6a1b      	ldr	r3, [r3, #32]
 80034ce:	4ab3      	ldr	r2, [pc, #716]	@ (800379c <HAL_RCC_OscConfig+0xc58>)
 80034d0:	f043 0301 	orr.w	r3, r3, #1
 80034d4:	6213      	str	r3, [r2, #32]
 80034d6:	e00b      	b.n	80034f0 <HAL_RCC_OscConfig+0x9ac>
 80034d8:	4bb0      	ldr	r3, [pc, #704]	@ (800379c <HAL_RCC_OscConfig+0xc58>)
 80034da:	6a1b      	ldr	r3, [r3, #32]
 80034dc:	4aaf      	ldr	r2, [pc, #700]	@ (800379c <HAL_RCC_OscConfig+0xc58>)
 80034de:	f023 0301 	bic.w	r3, r3, #1
 80034e2:	6213      	str	r3, [r2, #32]
 80034e4:	4bad      	ldr	r3, [pc, #692]	@ (800379c <HAL_RCC_OscConfig+0xc58>)
 80034e6:	6a1b      	ldr	r3, [r3, #32]
 80034e8:	4aac      	ldr	r2, [pc, #688]	@ (800379c <HAL_RCC_OscConfig+0xc58>)
 80034ea:	f023 0304 	bic.w	r3, r3, #4
 80034ee:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034f4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	f000 8081 	beq.w	8003604 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003502:	f7fd fdf5 	bl	80010f0 <HAL_GetTick>
 8003506:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800350a:	e00b      	b.n	8003524 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800350c:	f7fd fdf0 	bl	80010f0 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	f241 3288 	movw	r2, #5000	@ 0x1388
 800351c:	4293      	cmp	r3, r2
 800351e:	d901      	bls.n	8003524 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e345      	b.n	8003bb0 <HAL_RCC_OscConfig+0x106c>
 8003524:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003528:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800352c:	2202      	movs	r2, #2
 800352e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003530:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003534:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	fa93 f2a3 	rbit	r2, r3
 800353e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003542:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003546:	601a      	str	r2, [r3, #0]
 8003548:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800354c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003550:	2202      	movs	r2, #2
 8003552:	601a      	str	r2, [r3, #0]
 8003554:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003558:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	fa93 f2a3 	rbit	r2, r3
 8003562:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003566:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800356a:	601a      	str	r2, [r3, #0]
  return result;
 800356c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003570:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003574:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003576:	fab3 f383 	clz	r3, r3
 800357a:	b2db      	uxtb	r3, r3
 800357c:	095b      	lsrs	r3, r3, #5
 800357e:	b2db      	uxtb	r3, r3
 8003580:	f043 0302 	orr.w	r3, r3, #2
 8003584:	b2db      	uxtb	r3, r3
 8003586:	2b02      	cmp	r3, #2
 8003588:	d102      	bne.n	8003590 <HAL_RCC_OscConfig+0xa4c>
 800358a:	4b84      	ldr	r3, [pc, #528]	@ (800379c <HAL_RCC_OscConfig+0xc58>)
 800358c:	6a1b      	ldr	r3, [r3, #32]
 800358e:	e013      	b.n	80035b8 <HAL_RCC_OscConfig+0xa74>
 8003590:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003594:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003598:	2202      	movs	r2, #2
 800359a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800359c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035a0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	fa93 f2a3 	rbit	r2, r3
 80035aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035ae:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80035b2:	601a      	str	r2, [r3, #0]
 80035b4:	4b79      	ldr	r3, [pc, #484]	@ (800379c <HAL_RCC_OscConfig+0xc58>)
 80035b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035b8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80035bc:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80035c0:	2102      	movs	r1, #2
 80035c2:	6011      	str	r1, [r2, #0]
 80035c4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80035c8:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80035cc:	6812      	ldr	r2, [r2, #0]
 80035ce:	fa92 f1a2 	rbit	r1, r2
 80035d2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80035d6:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80035da:	6011      	str	r1, [r2, #0]
  return result;
 80035dc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80035e0:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80035e4:	6812      	ldr	r2, [r2, #0]
 80035e6:	fab2 f282 	clz	r2, r2
 80035ea:	b2d2      	uxtb	r2, r2
 80035ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80035f0:	b2d2      	uxtb	r2, r2
 80035f2:	f002 021f 	and.w	r2, r2, #31
 80035f6:	2101      	movs	r1, #1
 80035f8:	fa01 f202 	lsl.w	r2, r1, r2
 80035fc:	4013      	ands	r3, r2
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d084      	beq.n	800350c <HAL_RCC_OscConfig+0x9c8>
 8003602:	e07f      	b.n	8003704 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003604:	f7fd fd74 	bl	80010f0 <HAL_GetTick>
 8003608:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800360c:	e00b      	b.n	8003626 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800360e:	f7fd fd6f 	bl	80010f0 <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800361e:	4293      	cmp	r3, r2
 8003620:	d901      	bls.n	8003626 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e2c4      	b.n	8003bb0 <HAL_RCC_OscConfig+0x106c>
 8003626:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800362a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800362e:	2202      	movs	r2, #2
 8003630:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003632:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003636:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	fa93 f2a3 	rbit	r2, r3
 8003640:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003644:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003648:	601a      	str	r2, [r3, #0]
 800364a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800364e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003652:	2202      	movs	r2, #2
 8003654:	601a      	str	r2, [r3, #0]
 8003656:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800365a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	fa93 f2a3 	rbit	r2, r3
 8003664:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003668:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800366c:	601a      	str	r2, [r3, #0]
  return result;
 800366e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003672:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003676:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003678:	fab3 f383 	clz	r3, r3
 800367c:	b2db      	uxtb	r3, r3
 800367e:	095b      	lsrs	r3, r3, #5
 8003680:	b2db      	uxtb	r3, r3
 8003682:	f043 0302 	orr.w	r3, r3, #2
 8003686:	b2db      	uxtb	r3, r3
 8003688:	2b02      	cmp	r3, #2
 800368a:	d102      	bne.n	8003692 <HAL_RCC_OscConfig+0xb4e>
 800368c:	4b43      	ldr	r3, [pc, #268]	@ (800379c <HAL_RCC_OscConfig+0xc58>)
 800368e:	6a1b      	ldr	r3, [r3, #32]
 8003690:	e013      	b.n	80036ba <HAL_RCC_OscConfig+0xb76>
 8003692:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003696:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800369a:	2202      	movs	r2, #2
 800369c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800369e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036a2:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	fa93 f2a3 	rbit	r2, r3
 80036ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036b0:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80036b4:	601a      	str	r2, [r3, #0]
 80036b6:	4b39      	ldr	r3, [pc, #228]	@ (800379c <HAL_RCC_OscConfig+0xc58>)
 80036b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ba:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80036be:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80036c2:	2102      	movs	r1, #2
 80036c4:	6011      	str	r1, [r2, #0]
 80036c6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80036ca:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80036ce:	6812      	ldr	r2, [r2, #0]
 80036d0:	fa92 f1a2 	rbit	r1, r2
 80036d4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80036d8:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80036dc:	6011      	str	r1, [r2, #0]
  return result;
 80036de:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80036e2:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80036e6:	6812      	ldr	r2, [r2, #0]
 80036e8:	fab2 f282 	clz	r2, r2
 80036ec:	b2d2      	uxtb	r2, r2
 80036ee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80036f2:	b2d2      	uxtb	r2, r2
 80036f4:	f002 021f 	and.w	r2, r2, #31
 80036f8:	2101      	movs	r1, #1
 80036fa:	fa01 f202 	lsl.w	r2, r1, r2
 80036fe:	4013      	ands	r3, r2
 8003700:	2b00      	cmp	r3, #0
 8003702:	d184      	bne.n	800360e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003704:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8003708:	2b01      	cmp	r3, #1
 800370a:	d105      	bne.n	8003718 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800370c:	4b23      	ldr	r3, [pc, #140]	@ (800379c <HAL_RCC_OscConfig+0xc58>)
 800370e:	69db      	ldr	r3, [r3, #28]
 8003710:	4a22      	ldr	r2, [pc, #136]	@ (800379c <HAL_RCC_OscConfig+0xc58>)
 8003712:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003716:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003718:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800371c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	69db      	ldr	r3, [r3, #28]
 8003724:	2b00      	cmp	r3, #0
 8003726:	f000 8242 	beq.w	8003bae <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800372a:	4b1c      	ldr	r3, [pc, #112]	@ (800379c <HAL_RCC_OscConfig+0xc58>)
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	f003 030c 	and.w	r3, r3, #12
 8003732:	2b08      	cmp	r3, #8
 8003734:	f000 8213 	beq.w	8003b5e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003738:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800373c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	69db      	ldr	r3, [r3, #28]
 8003744:	2b02      	cmp	r3, #2
 8003746:	f040 8162 	bne.w	8003a0e <HAL_RCC_OscConfig+0xeca>
 800374a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800374e:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003752:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003756:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003758:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800375c:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	fa93 f2a3 	rbit	r2, r3
 8003766:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800376a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800376e:	601a      	str	r2, [r3, #0]
  return result;
 8003770:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003774:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003778:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800377a:	fab3 f383 	clz	r3, r3
 800377e:	b2db      	uxtb	r3, r3
 8003780:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003784:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	461a      	mov	r2, r3
 800378c:	2300      	movs	r3, #0
 800378e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003790:	f7fd fcae 	bl	80010f0 <HAL_GetTick>
 8003794:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003798:	e00c      	b.n	80037b4 <HAL_RCC_OscConfig+0xc70>
 800379a:	bf00      	nop
 800379c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037a0:	f7fd fca6 	bl	80010f0 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d901      	bls.n	80037b4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80037b0:	2303      	movs	r3, #3
 80037b2:	e1fd      	b.n	8003bb0 <HAL_RCC_OscConfig+0x106c>
 80037b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037b8:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80037bc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80037c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037c6:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	fa93 f2a3 	rbit	r2, r3
 80037d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037d4:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80037d8:	601a      	str	r2, [r3, #0]
  return result;
 80037da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037de:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80037e2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037e4:	fab3 f383 	clz	r3, r3
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	095b      	lsrs	r3, r3, #5
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	f043 0301 	orr.w	r3, r3, #1
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d102      	bne.n	80037fe <HAL_RCC_OscConfig+0xcba>
 80037f8:	4bb0      	ldr	r3, [pc, #704]	@ (8003abc <HAL_RCC_OscConfig+0xf78>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	e027      	b.n	800384e <HAL_RCC_OscConfig+0xd0a>
 80037fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003802:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003806:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800380a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800380c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003810:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	fa93 f2a3 	rbit	r2, r3
 800381a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800381e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003822:	601a      	str	r2, [r3, #0]
 8003824:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003828:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800382c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003830:	601a      	str	r2, [r3, #0]
 8003832:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003836:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	fa93 f2a3 	rbit	r2, r3
 8003840:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003844:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003848:	601a      	str	r2, [r3, #0]
 800384a:	4b9c      	ldr	r3, [pc, #624]	@ (8003abc <HAL_RCC_OscConfig+0xf78>)
 800384c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800384e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003852:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003856:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800385a:	6011      	str	r1, [r2, #0]
 800385c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003860:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003864:	6812      	ldr	r2, [r2, #0]
 8003866:	fa92 f1a2 	rbit	r1, r2
 800386a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800386e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003872:	6011      	str	r1, [r2, #0]
  return result;
 8003874:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003878:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800387c:	6812      	ldr	r2, [r2, #0]
 800387e:	fab2 f282 	clz	r2, r2
 8003882:	b2d2      	uxtb	r2, r2
 8003884:	f042 0220 	orr.w	r2, r2, #32
 8003888:	b2d2      	uxtb	r2, r2
 800388a:	f002 021f 	and.w	r2, r2, #31
 800388e:	2101      	movs	r1, #1
 8003890:	fa01 f202 	lsl.w	r2, r1, r2
 8003894:	4013      	ands	r3, r2
 8003896:	2b00      	cmp	r3, #0
 8003898:	d182      	bne.n	80037a0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800389a:	4b88      	ldr	r3, [pc, #544]	@ (8003abc <HAL_RCC_OscConfig+0xf78>)
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80038a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038a6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80038ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038b2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	6a1b      	ldr	r3, [r3, #32]
 80038ba:	430b      	orrs	r3, r1
 80038bc:	497f      	ldr	r1, [pc, #508]	@ (8003abc <HAL_RCC_OscConfig+0xf78>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	604b      	str	r3, [r1, #4]
 80038c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038c6:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80038ca:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80038ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038d4:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	fa93 f2a3 	rbit	r2, r3
 80038de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038e2:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80038e6:	601a      	str	r2, [r3, #0]
  return result;
 80038e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038ec:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80038f0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038f2:	fab3 f383 	clz	r3, r3
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80038fc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	461a      	mov	r2, r3
 8003904:	2301      	movs	r3, #1
 8003906:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003908:	f7fd fbf2 	bl	80010f0 <HAL_GetTick>
 800390c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003910:	e009      	b.n	8003926 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003912:	f7fd fbed 	bl	80010f0 <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	2b02      	cmp	r3, #2
 8003920:	d901      	bls.n	8003926 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e144      	b.n	8003bb0 <HAL_RCC_OscConfig+0x106c>
 8003926:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800392a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800392e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003932:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003934:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003938:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	fa93 f2a3 	rbit	r2, r3
 8003942:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003946:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800394a:	601a      	str	r2, [r3, #0]
  return result;
 800394c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003950:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003954:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003956:	fab3 f383 	clz	r3, r3
 800395a:	b2db      	uxtb	r3, r3
 800395c:	095b      	lsrs	r3, r3, #5
 800395e:	b2db      	uxtb	r3, r3
 8003960:	f043 0301 	orr.w	r3, r3, #1
 8003964:	b2db      	uxtb	r3, r3
 8003966:	2b01      	cmp	r3, #1
 8003968:	d102      	bne.n	8003970 <HAL_RCC_OscConfig+0xe2c>
 800396a:	4b54      	ldr	r3, [pc, #336]	@ (8003abc <HAL_RCC_OscConfig+0xf78>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	e027      	b.n	80039c0 <HAL_RCC_OscConfig+0xe7c>
 8003970:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003974:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003978:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800397c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800397e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003982:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	fa93 f2a3 	rbit	r2, r3
 800398c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003990:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003994:	601a      	str	r2, [r3, #0]
 8003996:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800399a:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800399e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80039a2:	601a      	str	r2, [r3, #0]
 80039a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039a8:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	fa93 f2a3 	rbit	r2, r3
 80039b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039b6:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80039ba:	601a      	str	r2, [r3, #0]
 80039bc:	4b3f      	ldr	r3, [pc, #252]	@ (8003abc <HAL_RCC_OscConfig+0xf78>)
 80039be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039c0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80039c4:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80039c8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80039cc:	6011      	str	r1, [r2, #0]
 80039ce:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80039d2:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80039d6:	6812      	ldr	r2, [r2, #0]
 80039d8:	fa92 f1a2 	rbit	r1, r2
 80039dc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80039e0:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80039e4:	6011      	str	r1, [r2, #0]
  return result;
 80039e6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80039ea:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80039ee:	6812      	ldr	r2, [r2, #0]
 80039f0:	fab2 f282 	clz	r2, r2
 80039f4:	b2d2      	uxtb	r2, r2
 80039f6:	f042 0220 	orr.w	r2, r2, #32
 80039fa:	b2d2      	uxtb	r2, r2
 80039fc:	f002 021f 	and.w	r2, r2, #31
 8003a00:	2101      	movs	r1, #1
 8003a02:	fa01 f202 	lsl.w	r2, r1, r2
 8003a06:	4013      	ands	r3, r2
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d082      	beq.n	8003912 <HAL_RCC_OscConfig+0xdce>
 8003a0c:	e0cf      	b.n	8003bae <HAL_RCC_OscConfig+0x106a>
 8003a0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a12:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003a16:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003a1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a20:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	fa93 f2a3 	rbit	r2, r3
 8003a2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a2e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003a32:	601a      	str	r2, [r3, #0]
  return result;
 8003a34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a38:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003a3c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a3e:	fab3 f383 	clz	r3, r3
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003a48:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	461a      	mov	r2, r3
 8003a50:	2300      	movs	r3, #0
 8003a52:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a54:	f7fd fb4c 	bl	80010f0 <HAL_GetTick>
 8003a58:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a5c:	e009      	b.n	8003a72 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a5e:	f7fd fb47 	bl	80010f0 <HAL_GetTick>
 8003a62:	4602      	mov	r2, r0
 8003a64:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d901      	bls.n	8003a72 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e09e      	b.n	8003bb0 <HAL_RCC_OscConfig+0x106c>
 8003a72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a76:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003a7a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003a7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a84:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	fa93 f2a3 	rbit	r2, r3
 8003a8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a92:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003a96:	601a      	str	r2, [r3, #0]
  return result;
 8003a98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a9c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003aa0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003aa2:	fab3 f383 	clz	r3, r3
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	095b      	lsrs	r3, r3, #5
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	f043 0301 	orr.w	r3, r3, #1
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d104      	bne.n	8003ac0 <HAL_RCC_OscConfig+0xf7c>
 8003ab6:	4b01      	ldr	r3, [pc, #4]	@ (8003abc <HAL_RCC_OscConfig+0xf78>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	e029      	b.n	8003b10 <HAL_RCC_OscConfig+0xfcc>
 8003abc:	40021000 	.word	0x40021000
 8003ac0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ac4:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003ac8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003acc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ace:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ad2:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	fa93 f2a3 	rbit	r2, r3
 8003adc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ae0:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003ae4:	601a      	str	r2, [r3, #0]
 8003ae6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003aea:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003aee:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003af2:	601a      	str	r2, [r3, #0]
 8003af4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003af8:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	fa93 f2a3 	rbit	r2, r3
 8003b02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b06:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003b0a:	601a      	str	r2, [r3, #0]
 8003b0c:	4b2b      	ldr	r3, [pc, #172]	@ (8003bbc <HAL_RCC_OscConfig+0x1078>)
 8003b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b10:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003b14:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003b18:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003b1c:	6011      	str	r1, [r2, #0]
 8003b1e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003b22:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003b26:	6812      	ldr	r2, [r2, #0]
 8003b28:	fa92 f1a2 	rbit	r1, r2
 8003b2c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003b30:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003b34:	6011      	str	r1, [r2, #0]
  return result;
 8003b36:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003b3a:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003b3e:	6812      	ldr	r2, [r2, #0]
 8003b40:	fab2 f282 	clz	r2, r2
 8003b44:	b2d2      	uxtb	r2, r2
 8003b46:	f042 0220 	orr.w	r2, r2, #32
 8003b4a:	b2d2      	uxtb	r2, r2
 8003b4c:	f002 021f 	and.w	r2, r2, #31
 8003b50:	2101      	movs	r1, #1
 8003b52:	fa01 f202 	lsl.w	r2, r1, r2
 8003b56:	4013      	ands	r3, r2
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d180      	bne.n	8003a5e <HAL_RCC_OscConfig+0xf1a>
 8003b5c:	e027      	b.n	8003bae <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b62:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	69db      	ldr	r3, [r3, #28]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d101      	bne.n	8003b72 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e01e      	b.n	8003bb0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003b72:	4b12      	ldr	r3, [pc, #72]	@ (8003bbc <HAL_RCC_OscConfig+0x1078>)
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003b7a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003b7e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003b82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b86:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	6a1b      	ldr	r3, [r3, #32]
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d10b      	bne.n	8003baa <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003b92:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003b96:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003b9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b9e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d001      	beq.n	8003bae <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e000      	b.n	8003bb0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003bae:	2300      	movs	r3, #0
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	40021000 	.word	0x40021000

08003bc0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b09e      	sub	sp, #120	@ 0x78
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d101      	bne.n	8003bd8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e162      	b.n	8003e9e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003bd8:	4b90      	ldr	r3, [pc, #576]	@ (8003e1c <HAL_RCC_ClockConfig+0x25c>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0307 	and.w	r3, r3, #7
 8003be0:	683a      	ldr	r2, [r7, #0]
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d910      	bls.n	8003c08 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003be6:	4b8d      	ldr	r3, [pc, #564]	@ (8003e1c <HAL_RCC_ClockConfig+0x25c>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f023 0207 	bic.w	r2, r3, #7
 8003bee:	498b      	ldr	r1, [pc, #556]	@ (8003e1c <HAL_RCC_ClockConfig+0x25c>)
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bf6:	4b89      	ldr	r3, [pc, #548]	@ (8003e1c <HAL_RCC_ClockConfig+0x25c>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0307 	and.w	r3, r3, #7
 8003bfe:	683a      	ldr	r2, [r7, #0]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d001      	beq.n	8003c08 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e14a      	b.n	8003e9e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0302 	and.w	r3, r3, #2
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d008      	beq.n	8003c26 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c14:	4b82      	ldr	r3, [pc, #520]	@ (8003e20 <HAL_RCC_ClockConfig+0x260>)
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	497f      	ldr	r1, [pc, #508]	@ (8003e20 <HAL_RCC_ClockConfig+0x260>)
 8003c22:	4313      	orrs	r3, r2
 8003c24:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0301 	and.w	r3, r3, #1
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	f000 80dc 	beq.w	8003dec <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d13c      	bne.n	8003cb6 <HAL_RCC_ClockConfig+0xf6>
 8003c3c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003c40:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c42:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003c44:	fa93 f3a3 	rbit	r3, r3
 8003c48:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003c4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c4c:	fab3 f383 	clz	r3, r3
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	095b      	lsrs	r3, r3, #5
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	f043 0301 	orr.w	r3, r3, #1
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d102      	bne.n	8003c66 <HAL_RCC_ClockConfig+0xa6>
 8003c60:	4b6f      	ldr	r3, [pc, #444]	@ (8003e20 <HAL_RCC_ClockConfig+0x260>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	e00f      	b.n	8003c86 <HAL_RCC_ClockConfig+0xc6>
 8003c66:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003c6a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c6c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003c6e:	fa93 f3a3 	rbit	r3, r3
 8003c72:	667b      	str	r3, [r7, #100]	@ 0x64
 8003c74:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003c78:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c7a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c7c:	fa93 f3a3 	rbit	r3, r3
 8003c80:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003c82:	4b67      	ldr	r3, [pc, #412]	@ (8003e20 <HAL_RCC_ClockConfig+0x260>)
 8003c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c86:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003c8a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003c8c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003c8e:	fa92 f2a2 	rbit	r2, r2
 8003c92:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003c94:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003c96:	fab2 f282 	clz	r2, r2
 8003c9a:	b2d2      	uxtb	r2, r2
 8003c9c:	f042 0220 	orr.w	r2, r2, #32
 8003ca0:	b2d2      	uxtb	r2, r2
 8003ca2:	f002 021f 	and.w	r2, r2, #31
 8003ca6:	2101      	movs	r1, #1
 8003ca8:	fa01 f202 	lsl.w	r2, r1, r2
 8003cac:	4013      	ands	r3, r2
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d17b      	bne.n	8003daa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e0f3      	b.n	8003e9e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d13c      	bne.n	8003d38 <HAL_RCC_ClockConfig+0x178>
 8003cbe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003cc2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cc4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003cc6:	fa93 f3a3 	rbit	r3, r3
 8003cca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003ccc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cce:	fab3 f383 	clz	r3, r3
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	095b      	lsrs	r3, r3, #5
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	f043 0301 	orr.w	r3, r3, #1
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d102      	bne.n	8003ce8 <HAL_RCC_ClockConfig+0x128>
 8003ce2:	4b4f      	ldr	r3, [pc, #316]	@ (8003e20 <HAL_RCC_ClockConfig+0x260>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	e00f      	b.n	8003d08 <HAL_RCC_ClockConfig+0x148>
 8003ce8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003cec:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003cf0:	fa93 f3a3 	rbit	r3, r3
 8003cf4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003cf6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003cfa:	643b      	str	r3, [r7, #64]	@ 0x40
 8003cfc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003cfe:	fa93 f3a3 	rbit	r3, r3
 8003d02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d04:	4b46      	ldr	r3, [pc, #280]	@ (8003e20 <HAL_RCC_ClockConfig+0x260>)
 8003d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d08:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003d0c:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003d0e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003d10:	fa92 f2a2 	rbit	r2, r2
 8003d14:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8003d16:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003d18:	fab2 f282 	clz	r2, r2
 8003d1c:	b2d2      	uxtb	r2, r2
 8003d1e:	f042 0220 	orr.w	r2, r2, #32
 8003d22:	b2d2      	uxtb	r2, r2
 8003d24:	f002 021f 	and.w	r2, r2, #31
 8003d28:	2101      	movs	r1, #1
 8003d2a:	fa01 f202 	lsl.w	r2, r1, r2
 8003d2e:	4013      	ands	r3, r2
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d13a      	bne.n	8003daa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e0b2      	b.n	8003e9e <HAL_RCC_ClockConfig+0x2de>
 8003d38:	2302      	movs	r3, #2
 8003d3a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d3e:	fa93 f3a3 	rbit	r3, r3
 8003d42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003d44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d46:	fab3 f383 	clz	r3, r3
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	095b      	lsrs	r3, r3, #5
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	f043 0301 	orr.w	r3, r3, #1
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d102      	bne.n	8003d60 <HAL_RCC_ClockConfig+0x1a0>
 8003d5a:	4b31      	ldr	r3, [pc, #196]	@ (8003e20 <HAL_RCC_ClockConfig+0x260>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	e00d      	b.n	8003d7c <HAL_RCC_ClockConfig+0x1bc>
 8003d60:	2302      	movs	r3, #2
 8003d62:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d66:	fa93 f3a3 	rbit	r3, r3
 8003d6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d6c:	2302      	movs	r3, #2
 8003d6e:	623b      	str	r3, [r7, #32]
 8003d70:	6a3b      	ldr	r3, [r7, #32]
 8003d72:	fa93 f3a3 	rbit	r3, r3
 8003d76:	61fb      	str	r3, [r7, #28]
 8003d78:	4b29      	ldr	r3, [pc, #164]	@ (8003e20 <HAL_RCC_ClockConfig+0x260>)
 8003d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d7c:	2202      	movs	r2, #2
 8003d7e:	61ba      	str	r2, [r7, #24]
 8003d80:	69ba      	ldr	r2, [r7, #24]
 8003d82:	fa92 f2a2 	rbit	r2, r2
 8003d86:	617a      	str	r2, [r7, #20]
  return result;
 8003d88:	697a      	ldr	r2, [r7, #20]
 8003d8a:	fab2 f282 	clz	r2, r2
 8003d8e:	b2d2      	uxtb	r2, r2
 8003d90:	f042 0220 	orr.w	r2, r2, #32
 8003d94:	b2d2      	uxtb	r2, r2
 8003d96:	f002 021f 	and.w	r2, r2, #31
 8003d9a:	2101      	movs	r1, #1
 8003d9c:	fa01 f202 	lsl.w	r2, r1, r2
 8003da0:	4013      	ands	r3, r2
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d101      	bne.n	8003daa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e079      	b.n	8003e9e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003daa:	4b1d      	ldr	r3, [pc, #116]	@ (8003e20 <HAL_RCC_ClockConfig+0x260>)
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	f023 0203 	bic.w	r2, r3, #3
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	491a      	ldr	r1, [pc, #104]	@ (8003e20 <HAL_RCC_ClockConfig+0x260>)
 8003db8:	4313      	orrs	r3, r2
 8003dba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003dbc:	f7fd f998 	bl	80010f0 <HAL_GetTick>
 8003dc0:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dc2:	e00a      	b.n	8003dda <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dc4:	f7fd f994 	bl	80010f0 <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d901      	bls.n	8003dda <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e061      	b.n	8003e9e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dda:	4b11      	ldr	r3, [pc, #68]	@ (8003e20 <HAL_RCC_ClockConfig+0x260>)
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	f003 020c 	and.w	r2, r3, #12
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d1eb      	bne.n	8003dc4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003dec:	4b0b      	ldr	r3, [pc, #44]	@ (8003e1c <HAL_RCC_ClockConfig+0x25c>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0307 	and.w	r3, r3, #7
 8003df4:	683a      	ldr	r2, [r7, #0]
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d214      	bcs.n	8003e24 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dfa:	4b08      	ldr	r3, [pc, #32]	@ (8003e1c <HAL_RCC_ClockConfig+0x25c>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f023 0207 	bic.w	r2, r3, #7
 8003e02:	4906      	ldr	r1, [pc, #24]	@ (8003e1c <HAL_RCC_ClockConfig+0x25c>)
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e0a:	4b04      	ldr	r3, [pc, #16]	@ (8003e1c <HAL_RCC_ClockConfig+0x25c>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0307 	and.w	r3, r3, #7
 8003e12:	683a      	ldr	r2, [r7, #0]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d005      	beq.n	8003e24 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e040      	b.n	8003e9e <HAL_RCC_ClockConfig+0x2de>
 8003e1c:	40022000 	.word	0x40022000
 8003e20:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0304 	and.w	r3, r3, #4
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d008      	beq.n	8003e42 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e30:	4b1d      	ldr	r3, [pc, #116]	@ (8003ea8 <HAL_RCC_ClockConfig+0x2e8>)
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	491a      	ldr	r1, [pc, #104]	@ (8003ea8 <HAL_RCC_ClockConfig+0x2e8>)
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0308 	and.w	r3, r3, #8
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d009      	beq.n	8003e62 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e4e:	4b16      	ldr	r3, [pc, #88]	@ (8003ea8 <HAL_RCC_ClockConfig+0x2e8>)
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	691b      	ldr	r3, [r3, #16]
 8003e5a:	00db      	lsls	r3, r3, #3
 8003e5c:	4912      	ldr	r1, [pc, #72]	@ (8003ea8 <HAL_RCC_ClockConfig+0x2e8>)
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003e62:	f000 f829 	bl	8003eb8 <HAL_RCC_GetSysClockFreq>
 8003e66:	4601      	mov	r1, r0
 8003e68:	4b0f      	ldr	r3, [pc, #60]	@ (8003ea8 <HAL_RCC_ClockConfig+0x2e8>)
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e70:	22f0      	movs	r2, #240	@ 0xf0
 8003e72:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e74:	693a      	ldr	r2, [r7, #16]
 8003e76:	fa92 f2a2 	rbit	r2, r2
 8003e7a:	60fa      	str	r2, [r7, #12]
  return result;
 8003e7c:	68fa      	ldr	r2, [r7, #12]
 8003e7e:	fab2 f282 	clz	r2, r2
 8003e82:	b2d2      	uxtb	r2, r2
 8003e84:	40d3      	lsrs	r3, r2
 8003e86:	4a09      	ldr	r2, [pc, #36]	@ (8003eac <HAL_RCC_ClockConfig+0x2ec>)
 8003e88:	5cd3      	ldrb	r3, [r2, r3]
 8003e8a:	fa21 f303 	lsr.w	r3, r1, r3
 8003e8e:	4a08      	ldr	r2, [pc, #32]	@ (8003eb0 <HAL_RCC_ClockConfig+0x2f0>)
 8003e90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003e92:	4b08      	ldr	r3, [pc, #32]	@ (8003eb4 <HAL_RCC_ClockConfig+0x2f4>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4618      	mov	r0, r3
 8003e98:	f7fd f8e6 	bl	8001068 <HAL_InitTick>
  
  return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3778      	adds	r7, #120	@ 0x78
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	40021000 	.word	0x40021000
 8003eac:	08006e18 	.word	0x08006e18
 8003eb0:	20000030 	.word	0x20000030
 8003eb4:	20000034 	.word	0x20000034

08003eb8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b087      	sub	sp, #28
 8003ebc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	60fb      	str	r3, [r7, #12]
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	60bb      	str	r3, [r7, #8]
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	617b      	str	r3, [r7, #20]
 8003eca:	2300      	movs	r3, #0
 8003ecc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003ed2:	4b1e      	ldr	r3, [pc, #120]	@ (8003f4c <HAL_RCC_GetSysClockFreq+0x94>)
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f003 030c 	and.w	r3, r3, #12
 8003ede:	2b04      	cmp	r3, #4
 8003ee0:	d002      	beq.n	8003ee8 <HAL_RCC_GetSysClockFreq+0x30>
 8003ee2:	2b08      	cmp	r3, #8
 8003ee4:	d003      	beq.n	8003eee <HAL_RCC_GetSysClockFreq+0x36>
 8003ee6:	e026      	b.n	8003f36 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003ee8:	4b19      	ldr	r3, [pc, #100]	@ (8003f50 <HAL_RCC_GetSysClockFreq+0x98>)
 8003eea:	613b      	str	r3, [r7, #16]
      break;
 8003eec:	e026      	b.n	8003f3c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	0c9b      	lsrs	r3, r3, #18
 8003ef2:	f003 030f 	and.w	r3, r3, #15
 8003ef6:	4a17      	ldr	r2, [pc, #92]	@ (8003f54 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003ef8:	5cd3      	ldrb	r3, [r2, r3]
 8003efa:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003efc:	4b13      	ldr	r3, [pc, #76]	@ (8003f4c <HAL_RCC_GetSysClockFreq+0x94>)
 8003efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f00:	f003 030f 	and.w	r3, r3, #15
 8003f04:	4a14      	ldr	r2, [pc, #80]	@ (8003f58 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003f06:	5cd3      	ldrb	r3, [r2, r3]
 8003f08:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d008      	beq.n	8003f26 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003f14:	4a0e      	ldr	r2, [pc, #56]	@ (8003f50 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	fb02 f303 	mul.w	r3, r2, r3
 8003f22:	617b      	str	r3, [r7, #20]
 8003f24:	e004      	b.n	8003f30 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a0c      	ldr	r2, [pc, #48]	@ (8003f5c <HAL_RCC_GetSysClockFreq+0xa4>)
 8003f2a:	fb02 f303 	mul.w	r3, r2, r3
 8003f2e:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	613b      	str	r3, [r7, #16]
      break;
 8003f34:	e002      	b.n	8003f3c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003f36:	4b06      	ldr	r3, [pc, #24]	@ (8003f50 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f38:	613b      	str	r3, [r7, #16]
      break;
 8003f3a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f3c:	693b      	ldr	r3, [r7, #16]
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	371c      	adds	r7, #28
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr
 8003f4a:	bf00      	nop
 8003f4c:	40021000 	.word	0x40021000
 8003f50:	007a1200 	.word	0x007a1200
 8003f54:	08006e30 	.word	0x08006e30
 8003f58:	08006e40 	.word	0x08006e40
 8003f5c:	003d0900 	.word	0x003d0900

08003f60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f60:	b480      	push	{r7}
 8003f62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f64:	4b03      	ldr	r3, [pc, #12]	@ (8003f74 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f66:	681b      	ldr	r3, [r3, #0]
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr
 8003f72:	bf00      	nop
 8003f74:	20000030 	.word	0x20000030

08003f78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b082      	sub	sp, #8
 8003f7c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003f7e:	f7ff ffef 	bl	8003f60 <HAL_RCC_GetHCLKFreq>
 8003f82:	4601      	mov	r1, r0
 8003f84:	4b0b      	ldr	r3, [pc, #44]	@ (8003fb4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003f8c:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003f90:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	fa92 f2a2 	rbit	r2, r2
 8003f98:	603a      	str	r2, [r7, #0]
  return result;
 8003f9a:	683a      	ldr	r2, [r7, #0]
 8003f9c:	fab2 f282 	clz	r2, r2
 8003fa0:	b2d2      	uxtb	r2, r2
 8003fa2:	40d3      	lsrs	r3, r2
 8003fa4:	4a04      	ldr	r2, [pc, #16]	@ (8003fb8 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003fa6:	5cd3      	ldrb	r3, [r2, r3]
 8003fa8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003fac:	4618      	mov	r0, r3
 8003fae:	3708      	adds	r7, #8
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	40021000 	.word	0x40021000
 8003fb8:	08006e28 	.word	0x08006e28

08003fbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b082      	sub	sp, #8
 8003fc0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003fc2:	f7ff ffcd 	bl	8003f60 <HAL_RCC_GetHCLKFreq>
 8003fc6:	4601      	mov	r1, r0
 8003fc8:	4b0b      	ldr	r3, [pc, #44]	@ (8003ff8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003fd0:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003fd4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	fa92 f2a2 	rbit	r2, r2
 8003fdc:	603a      	str	r2, [r7, #0]
  return result;
 8003fde:	683a      	ldr	r2, [r7, #0]
 8003fe0:	fab2 f282 	clz	r2, r2
 8003fe4:	b2d2      	uxtb	r2, r2
 8003fe6:	40d3      	lsrs	r3, r2
 8003fe8:	4a04      	ldr	r2, [pc, #16]	@ (8003ffc <HAL_RCC_GetPCLK2Freq+0x40>)
 8003fea:	5cd3      	ldrb	r3, [r2, r3]
 8003fec:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3708      	adds	r7, #8
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	40021000 	.word	0x40021000
 8003ffc:	08006e28 	.word	0x08006e28

08004000 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b092      	sub	sp, #72	@ 0x48
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004008:	2300      	movs	r3, #0
 800400a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 800400c:	2300      	movs	r3, #0
 800400e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004010:	2300      	movs	r3, #0
 8004012:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800401e:	2b00      	cmp	r3, #0
 8004020:	f000 80d4 	beq.w	80041cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004024:	4b4e      	ldr	r3, [pc, #312]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004026:	69db      	ldr	r3, [r3, #28]
 8004028:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800402c:	2b00      	cmp	r3, #0
 800402e:	d10e      	bne.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004030:	4b4b      	ldr	r3, [pc, #300]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004032:	69db      	ldr	r3, [r3, #28]
 8004034:	4a4a      	ldr	r2, [pc, #296]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004036:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800403a:	61d3      	str	r3, [r2, #28]
 800403c:	4b48      	ldr	r3, [pc, #288]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800403e:	69db      	ldr	r3, [r3, #28]
 8004040:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004044:	60bb      	str	r3, [r7, #8]
 8004046:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004048:	2301      	movs	r3, #1
 800404a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800404e:	4b45      	ldr	r3, [pc, #276]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004056:	2b00      	cmp	r3, #0
 8004058:	d118      	bne.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800405a:	4b42      	ldr	r3, [pc, #264]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a41      	ldr	r2, [pc, #260]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004060:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004064:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004066:	f7fd f843 	bl	80010f0 <HAL_GetTick>
 800406a:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800406c:	e008      	b.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800406e:	f7fd f83f 	bl	80010f0 <HAL_GetTick>
 8004072:	4602      	mov	r2, r0
 8004074:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	2b64      	cmp	r3, #100	@ 0x64
 800407a:	d901      	bls.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800407c:	2303      	movs	r3, #3
 800407e:	e169      	b.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004080:	4b38      	ldr	r3, [pc, #224]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004088:	2b00      	cmp	r3, #0
 800408a:	d0f0      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800408c:	4b34      	ldr	r3, [pc, #208]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800408e:	6a1b      	ldr	r3, [r3, #32]
 8004090:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004094:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004096:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004098:	2b00      	cmp	r3, #0
 800409a:	f000 8084 	beq.w	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040a6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d07c      	beq.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040ac:	4b2c      	ldr	r3, [pc, #176]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040ae:	6a1b      	ldr	r3, [r3, #32]
 80040b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80040b6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80040ba:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040be:	fa93 f3a3 	rbit	r3, r3
 80040c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80040c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80040c6:	fab3 f383 	clz	r3, r3
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	461a      	mov	r2, r3
 80040ce:	4b26      	ldr	r3, [pc, #152]	@ (8004168 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80040d0:	4413      	add	r3, r2
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	461a      	mov	r2, r3
 80040d6:	2301      	movs	r3, #1
 80040d8:	6013      	str	r3, [r2, #0]
 80040da:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80040de:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040e2:	fa93 f3a3 	rbit	r3, r3
 80040e6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80040e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80040ea:	fab3 f383 	clz	r3, r3
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	461a      	mov	r2, r3
 80040f2:	4b1d      	ldr	r3, [pc, #116]	@ (8004168 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80040f4:	4413      	add	r3, r2
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	461a      	mov	r2, r3
 80040fa:	2300      	movs	r3, #0
 80040fc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80040fe:	4a18      	ldr	r2, [pc, #96]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004100:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004102:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004104:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004106:	f003 0301 	and.w	r3, r3, #1
 800410a:	2b00      	cmp	r3, #0
 800410c:	d04b      	beq.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800410e:	f7fc ffef 	bl	80010f0 <HAL_GetTick>
 8004112:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004114:	e00a      	b.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004116:	f7fc ffeb 	bl	80010f0 <HAL_GetTick>
 800411a:	4602      	mov	r2, r0
 800411c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004124:	4293      	cmp	r3, r2
 8004126:	d901      	bls.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004128:	2303      	movs	r3, #3
 800412a:	e113      	b.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x354>
 800412c:	2302      	movs	r3, #2
 800412e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004132:	fa93 f3a3 	rbit	r3, r3
 8004136:	627b      	str	r3, [r7, #36]	@ 0x24
 8004138:	2302      	movs	r3, #2
 800413a:	623b      	str	r3, [r7, #32]
 800413c:	6a3b      	ldr	r3, [r7, #32]
 800413e:	fa93 f3a3 	rbit	r3, r3
 8004142:	61fb      	str	r3, [r7, #28]
  return result;
 8004144:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004146:	fab3 f383 	clz	r3, r3
 800414a:	b2db      	uxtb	r3, r3
 800414c:	095b      	lsrs	r3, r3, #5
 800414e:	b2db      	uxtb	r3, r3
 8004150:	f043 0302 	orr.w	r3, r3, #2
 8004154:	b2db      	uxtb	r3, r3
 8004156:	2b02      	cmp	r3, #2
 8004158:	d108      	bne.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800415a:	4b01      	ldr	r3, [pc, #4]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800415c:	6a1b      	ldr	r3, [r3, #32]
 800415e:	e00d      	b.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004160:	40021000 	.word	0x40021000
 8004164:	40007000 	.word	0x40007000
 8004168:	10908100 	.word	0x10908100
 800416c:	2302      	movs	r3, #2
 800416e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004170:	69bb      	ldr	r3, [r7, #24]
 8004172:	fa93 f3a3 	rbit	r3, r3
 8004176:	617b      	str	r3, [r7, #20]
 8004178:	4b78      	ldr	r3, [pc, #480]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800417a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800417c:	2202      	movs	r2, #2
 800417e:	613a      	str	r2, [r7, #16]
 8004180:	693a      	ldr	r2, [r7, #16]
 8004182:	fa92 f2a2 	rbit	r2, r2
 8004186:	60fa      	str	r2, [r7, #12]
  return result;
 8004188:	68fa      	ldr	r2, [r7, #12]
 800418a:	fab2 f282 	clz	r2, r2
 800418e:	b2d2      	uxtb	r2, r2
 8004190:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004194:	b2d2      	uxtb	r2, r2
 8004196:	f002 021f 	and.w	r2, r2, #31
 800419a:	2101      	movs	r1, #1
 800419c:	fa01 f202 	lsl.w	r2, r1, r2
 80041a0:	4013      	ands	r3, r2
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d0b7      	beq.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80041a6:	4b6d      	ldr	r3, [pc, #436]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041a8:	6a1b      	ldr	r3, [r3, #32]
 80041aa:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	496a      	ldr	r1, [pc, #424]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041b4:	4313      	orrs	r3, r2
 80041b6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80041b8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d105      	bne.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041c0:	4b66      	ldr	r3, [pc, #408]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041c2:	69db      	ldr	r3, [r3, #28]
 80041c4:	4a65      	ldr	r2, [pc, #404]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041ca:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0301 	and.w	r3, r3, #1
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d008      	beq.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80041d8:	4b60      	ldr	r3, [pc, #384]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041dc:	f023 0203 	bic.w	r2, r3, #3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	495d      	ldr	r1, [pc, #372]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0302 	and.w	r3, r3, #2
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d008      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80041f6:	4b59      	ldr	r3, [pc, #356]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041fa:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	4956      	ldr	r1, [pc, #344]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004204:	4313      	orrs	r3, r2
 8004206:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 0304 	and.w	r3, r3, #4
 8004210:	2b00      	cmp	r3, #0
 8004212:	d008      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004214:	4b51      	ldr	r3, [pc, #324]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004216:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004218:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	691b      	ldr	r3, [r3, #16]
 8004220:	494e      	ldr	r1, [pc, #312]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004222:	4313      	orrs	r3, r2
 8004224:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0320 	and.w	r3, r3, #32
 800422e:	2b00      	cmp	r3, #0
 8004230:	d008      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004232:	4b4a      	ldr	r3, [pc, #296]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004236:	f023 0210 	bic.w	r2, r3, #16
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	69db      	ldr	r3, [r3, #28]
 800423e:	4947      	ldr	r1, [pc, #284]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004240:	4313      	orrs	r3, r2
 8004242:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800424c:	2b00      	cmp	r3, #0
 800424e:	d008      	beq.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004250:	4b42      	ldr	r3, [pc, #264]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800425c:	493f      	ldr	r1, [pc, #252]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800425e:	4313      	orrs	r3, r2
 8004260:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800426a:	2b00      	cmp	r3, #0
 800426c:	d008      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800426e:	4b3b      	ldr	r3, [pc, #236]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004272:	f023 0220 	bic.w	r2, r3, #32
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a1b      	ldr	r3, [r3, #32]
 800427a:	4938      	ldr	r1, [pc, #224]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800427c:	4313      	orrs	r3, r2
 800427e:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0308 	and.w	r3, r3, #8
 8004288:	2b00      	cmp	r3, #0
 800428a:	d008      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800428c:	4b33      	ldr	r3, [pc, #204]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800428e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004290:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	695b      	ldr	r3, [r3, #20]
 8004298:	4930      	ldr	r1, [pc, #192]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800429a:	4313      	orrs	r3, r2
 800429c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0310 	and.w	r3, r3, #16
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d008      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80042aa:	4b2c      	ldr	r3, [pc, #176]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80042ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ae:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	699b      	ldr	r3, [r3, #24]
 80042b6:	4929      	ldr	r1, [pc, #164]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80042b8:	4313      	orrs	r3, r2
 80042ba:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d008      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80042c8:	4b24      	ldr	r3, [pc, #144]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042d4:	4921      	ldr	r1, [pc, #132]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80042d6:	4313      	orrs	r3, r2
 80042d8:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d008      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80042e6:	4b1d      	ldr	r3, [pc, #116]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80042e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042ea:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042f2:	491a      	ldr	r1, [pc, #104]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80042f4:	4313      	orrs	r3, r2
 80042f6:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004300:	2b00      	cmp	r3, #0
 8004302:	d008      	beq.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004304:	4b15      	ldr	r3, [pc, #84]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004308:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004310:	4912      	ldr	r1, [pc, #72]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004312:	4313      	orrs	r3, r2
 8004314:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d008      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004322:	4b0e      	ldr	r3, [pc, #56]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004326:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800432e:	490b      	ldr	r1, [pc, #44]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004330:	4313      	orrs	r3, r2
 8004332:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800433c:	2b00      	cmp	r3, #0
 800433e:	d008      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004340:	4b06      	ldr	r3, [pc, #24]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004344:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800434c:	4903      	ldr	r1, [pc, #12]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800434e:	4313      	orrs	r3, r2
 8004350:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004352:	2300      	movs	r3, #0
}
 8004354:	4618      	mov	r0, r3
 8004356:	3748      	adds	r7, #72	@ 0x48
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}
 800435c:	40021000 	.word	0x40021000

08004360 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d101      	bne.n	8004372 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e09d      	b.n	80044ae <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004376:	2b00      	cmp	r3, #0
 8004378:	d108      	bne.n	800438c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004382:	d009      	beq.n	8004398 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	61da      	str	r2, [r3, #28]
 800438a:	e005      	b.n	8004398 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d106      	bne.n	80043b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f7fc fbe0 	bl	8000b78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2202      	movs	r2, #2
 80043bc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80043ce:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80043d8:	d902      	bls.n	80043e0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80043da:	2300      	movs	r3, #0
 80043dc:	60fb      	str	r3, [r7, #12]
 80043de:	e002      	b.n	80043e6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80043e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80043e4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80043ee:	d007      	beq.n	8004400 <HAL_SPI_Init+0xa0>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80043f8:	d002      	beq.n	8004400 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004410:	431a      	orrs	r2, r3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	f003 0302 	and.w	r3, r3, #2
 800441a:	431a      	orrs	r2, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	695b      	ldr	r3, [r3, #20]
 8004420:	f003 0301 	and.w	r3, r3, #1
 8004424:	431a      	orrs	r2, r3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	699b      	ldr	r3, [r3, #24]
 800442a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800442e:	431a      	orrs	r2, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	69db      	ldr	r3, [r3, #28]
 8004434:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004438:	431a      	orrs	r2, r3
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a1b      	ldr	r3, [r3, #32]
 800443e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004442:	ea42 0103 	orr.w	r1, r2, r3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800444a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	430a      	orrs	r2, r1
 8004454:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	699b      	ldr	r3, [r3, #24]
 800445a:	0c1b      	lsrs	r3, r3, #16
 800445c:	f003 0204 	and.w	r2, r3, #4
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004464:	f003 0310 	and.w	r3, r3, #16
 8004468:	431a      	orrs	r2, r3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800446e:	f003 0308 	and.w	r3, r3, #8
 8004472:	431a      	orrs	r2, r3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800447c:	ea42 0103 	orr.w	r1, r2, r3
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	430a      	orrs	r2, r1
 800448c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	69da      	ldr	r2, [r3, #28]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800449c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80044ac:	2300      	movs	r3, #0
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3710      	adds	r7, #16
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}

080044b6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044b6:	b580      	push	{r7, lr}
 80044b8:	b082      	sub	sp, #8
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d101      	bne.n	80044c8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e049      	b.n	800455c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d106      	bne.n	80044e2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f7fc fb8d 	bl	8000bfc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2202      	movs	r2, #2
 80044e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	3304      	adds	r3, #4
 80044f2:	4619      	mov	r1, r3
 80044f4:	4610      	mov	r0, r2
 80044f6:	f000 fb75 	bl	8004be4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2201      	movs	r2, #1
 80044fe:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2201      	movs	r2, #1
 8004506:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2201      	movs	r2, #1
 800450e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2201      	movs	r2, #1
 8004516:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2201      	movs	r2, #1
 800451e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2201      	movs	r2, #1
 8004526:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2201      	movs	r2, #1
 800452e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2201      	movs	r2, #1
 8004536:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2201      	movs	r2, #1
 800453e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2201      	movs	r2, #1
 8004546:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2201      	movs	r2, #1
 800454e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2201      	movs	r2, #1
 8004556:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800455a:	2300      	movs	r3, #0
}
 800455c:	4618      	mov	r0, r3
 800455e:	3708      	adds	r7, #8
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}

08004564 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b082      	sub	sp, #8
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d101      	bne.n	8004576 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e049      	b.n	800460a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800457c:	b2db      	uxtb	r3, r3
 800457e:	2b00      	cmp	r3, #0
 8004580:	d106      	bne.n	8004590 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f000 f841 	bl	8004612 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2202      	movs	r2, #2
 8004594:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	3304      	adds	r3, #4
 80045a0:	4619      	mov	r1, r3
 80045a2:	4610      	mov	r0, r2
 80045a4:	f000 fb1e 	bl	8004be4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004608:	2300      	movs	r3, #0
}
 800460a:	4618      	mov	r0, r3
 800460c:	3708      	adds	r7, #8
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}

08004612 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004612:	b480      	push	{r7}
 8004614:	b083      	sub	sp, #12
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800461a:	bf00      	nop
 800461c:	370c      	adds	r7, #12
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr
	...

08004628 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d109      	bne.n	800464c <HAL_TIM_PWM_Start+0x24>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800463e:	b2db      	uxtb	r3, r3
 8004640:	2b01      	cmp	r3, #1
 8004642:	bf14      	ite	ne
 8004644:	2301      	movne	r3, #1
 8004646:	2300      	moveq	r3, #0
 8004648:	b2db      	uxtb	r3, r3
 800464a:	e03c      	b.n	80046c6 <HAL_TIM_PWM_Start+0x9e>
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	2b04      	cmp	r3, #4
 8004650:	d109      	bne.n	8004666 <HAL_TIM_PWM_Start+0x3e>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004658:	b2db      	uxtb	r3, r3
 800465a:	2b01      	cmp	r3, #1
 800465c:	bf14      	ite	ne
 800465e:	2301      	movne	r3, #1
 8004660:	2300      	moveq	r3, #0
 8004662:	b2db      	uxtb	r3, r3
 8004664:	e02f      	b.n	80046c6 <HAL_TIM_PWM_Start+0x9e>
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	2b08      	cmp	r3, #8
 800466a:	d109      	bne.n	8004680 <HAL_TIM_PWM_Start+0x58>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004672:	b2db      	uxtb	r3, r3
 8004674:	2b01      	cmp	r3, #1
 8004676:	bf14      	ite	ne
 8004678:	2301      	movne	r3, #1
 800467a:	2300      	moveq	r3, #0
 800467c:	b2db      	uxtb	r3, r3
 800467e:	e022      	b.n	80046c6 <HAL_TIM_PWM_Start+0x9e>
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	2b0c      	cmp	r3, #12
 8004684:	d109      	bne.n	800469a <HAL_TIM_PWM_Start+0x72>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800468c:	b2db      	uxtb	r3, r3
 800468e:	2b01      	cmp	r3, #1
 8004690:	bf14      	ite	ne
 8004692:	2301      	movne	r3, #1
 8004694:	2300      	moveq	r3, #0
 8004696:	b2db      	uxtb	r3, r3
 8004698:	e015      	b.n	80046c6 <HAL_TIM_PWM_Start+0x9e>
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	2b10      	cmp	r3, #16
 800469e:	d109      	bne.n	80046b4 <HAL_TIM_PWM_Start+0x8c>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	bf14      	ite	ne
 80046ac:	2301      	movne	r3, #1
 80046ae:	2300      	moveq	r3, #0
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	e008      	b.n	80046c6 <HAL_TIM_PWM_Start+0x9e>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	2b01      	cmp	r3, #1
 80046be:	bf14      	ite	ne
 80046c0:	2301      	movne	r3, #1
 80046c2:	2300      	moveq	r3, #0
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d001      	beq.n	80046ce <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e097      	b.n	80047fe <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d104      	bne.n	80046de <HAL_TIM_PWM_Start+0xb6>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2202      	movs	r2, #2
 80046d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80046dc:	e023      	b.n	8004726 <HAL_TIM_PWM_Start+0xfe>
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	2b04      	cmp	r3, #4
 80046e2:	d104      	bne.n	80046ee <HAL_TIM_PWM_Start+0xc6>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2202      	movs	r2, #2
 80046e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046ec:	e01b      	b.n	8004726 <HAL_TIM_PWM_Start+0xfe>
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	2b08      	cmp	r3, #8
 80046f2:	d104      	bne.n	80046fe <HAL_TIM_PWM_Start+0xd6>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2202      	movs	r2, #2
 80046f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80046fc:	e013      	b.n	8004726 <HAL_TIM_PWM_Start+0xfe>
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	2b0c      	cmp	r3, #12
 8004702:	d104      	bne.n	800470e <HAL_TIM_PWM_Start+0xe6>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2202      	movs	r2, #2
 8004708:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800470c:	e00b      	b.n	8004726 <HAL_TIM_PWM_Start+0xfe>
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	2b10      	cmp	r3, #16
 8004712:	d104      	bne.n	800471e <HAL_TIM_PWM_Start+0xf6>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2202      	movs	r2, #2
 8004718:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800471c:	e003      	b.n	8004726 <HAL_TIM_PWM_Start+0xfe>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2202      	movs	r2, #2
 8004722:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	2201      	movs	r2, #1
 800472c:	6839      	ldr	r1, [r7, #0]
 800472e:	4618      	mov	r0, r3
 8004730:	f000 fe64 	bl	80053fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a33      	ldr	r2, [pc, #204]	@ (8004808 <HAL_TIM_PWM_Start+0x1e0>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d013      	beq.n	8004766 <HAL_TIM_PWM_Start+0x13e>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a32      	ldr	r2, [pc, #200]	@ (800480c <HAL_TIM_PWM_Start+0x1e4>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d00e      	beq.n	8004766 <HAL_TIM_PWM_Start+0x13e>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a30      	ldr	r2, [pc, #192]	@ (8004810 <HAL_TIM_PWM_Start+0x1e8>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d009      	beq.n	8004766 <HAL_TIM_PWM_Start+0x13e>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a2f      	ldr	r2, [pc, #188]	@ (8004814 <HAL_TIM_PWM_Start+0x1ec>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d004      	beq.n	8004766 <HAL_TIM_PWM_Start+0x13e>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a2d      	ldr	r2, [pc, #180]	@ (8004818 <HAL_TIM_PWM_Start+0x1f0>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d101      	bne.n	800476a <HAL_TIM_PWM_Start+0x142>
 8004766:	2301      	movs	r3, #1
 8004768:	e000      	b.n	800476c <HAL_TIM_PWM_Start+0x144>
 800476a:	2300      	movs	r3, #0
 800476c:	2b00      	cmp	r3, #0
 800476e:	d007      	beq.n	8004780 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800477e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a20      	ldr	r2, [pc, #128]	@ (8004808 <HAL_TIM_PWM_Start+0x1e0>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d018      	beq.n	80047bc <HAL_TIM_PWM_Start+0x194>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004792:	d013      	beq.n	80047bc <HAL_TIM_PWM_Start+0x194>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a20      	ldr	r2, [pc, #128]	@ (800481c <HAL_TIM_PWM_Start+0x1f4>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d00e      	beq.n	80047bc <HAL_TIM_PWM_Start+0x194>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a1f      	ldr	r2, [pc, #124]	@ (8004820 <HAL_TIM_PWM_Start+0x1f8>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d009      	beq.n	80047bc <HAL_TIM_PWM_Start+0x194>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a17      	ldr	r2, [pc, #92]	@ (800480c <HAL_TIM_PWM_Start+0x1e4>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d004      	beq.n	80047bc <HAL_TIM_PWM_Start+0x194>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a16      	ldr	r2, [pc, #88]	@ (8004810 <HAL_TIM_PWM_Start+0x1e8>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d115      	bne.n	80047e8 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	689a      	ldr	r2, [r3, #8]
 80047c2:	4b18      	ldr	r3, [pc, #96]	@ (8004824 <HAL_TIM_PWM_Start+0x1fc>)
 80047c4:	4013      	ands	r3, r2
 80047c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2b06      	cmp	r3, #6
 80047cc:	d015      	beq.n	80047fa <HAL_TIM_PWM_Start+0x1d2>
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047d4:	d011      	beq.n	80047fa <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f042 0201 	orr.w	r2, r2, #1
 80047e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047e6:	e008      	b.n	80047fa <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f042 0201 	orr.w	r2, r2, #1
 80047f6:	601a      	str	r2, [r3, #0]
 80047f8:	e000      	b.n	80047fc <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047fa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3710      	adds	r7, #16
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	40012c00 	.word	0x40012c00
 800480c:	40013400 	.word	0x40013400
 8004810:	40014000 	.word	0x40014000
 8004814:	40014400 	.word	0x40014400
 8004818:	40014800 	.word	0x40014800
 800481c:	40000400 	.word	0x40000400
 8004820:	40000800 	.word	0x40000800
 8004824:	00010007 	.word	0x00010007

08004828 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b086      	sub	sp, #24
 800482c:	af00      	add	r7, sp, #0
 800482e:	60f8      	str	r0, [r7, #12]
 8004830:	60b9      	str	r1, [r7, #8]
 8004832:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004834:	2300      	movs	r3, #0
 8004836:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800483e:	2b01      	cmp	r3, #1
 8004840:	d101      	bne.n	8004846 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004842:	2302      	movs	r3, #2
 8004844:	e0ff      	b.n	8004a46 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2201      	movs	r2, #1
 800484a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2b14      	cmp	r3, #20
 8004852:	f200 80f0 	bhi.w	8004a36 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004856:	a201      	add	r2, pc, #4	@ (adr r2, 800485c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800485c:	080048b1 	.word	0x080048b1
 8004860:	08004a37 	.word	0x08004a37
 8004864:	08004a37 	.word	0x08004a37
 8004868:	08004a37 	.word	0x08004a37
 800486c:	080048f1 	.word	0x080048f1
 8004870:	08004a37 	.word	0x08004a37
 8004874:	08004a37 	.word	0x08004a37
 8004878:	08004a37 	.word	0x08004a37
 800487c:	08004933 	.word	0x08004933
 8004880:	08004a37 	.word	0x08004a37
 8004884:	08004a37 	.word	0x08004a37
 8004888:	08004a37 	.word	0x08004a37
 800488c:	08004973 	.word	0x08004973
 8004890:	08004a37 	.word	0x08004a37
 8004894:	08004a37 	.word	0x08004a37
 8004898:	08004a37 	.word	0x08004a37
 800489c:	080049b5 	.word	0x080049b5
 80048a0:	08004a37 	.word	0x08004a37
 80048a4:	08004a37 	.word	0x08004a37
 80048a8:	08004a37 	.word	0x08004a37
 80048ac:	080049f5 	.word	0x080049f5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	68b9      	ldr	r1, [r7, #8]
 80048b6:	4618      	mov	r0, r3
 80048b8:	f000 fa30 	bl	8004d1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	699a      	ldr	r2, [r3, #24]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f042 0208 	orr.w	r2, r2, #8
 80048ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	699a      	ldr	r2, [r3, #24]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f022 0204 	bic.w	r2, r2, #4
 80048da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	6999      	ldr	r1, [r3, #24]
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	691a      	ldr	r2, [r3, #16]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	430a      	orrs	r2, r1
 80048ec:	619a      	str	r2, [r3, #24]
      break;
 80048ee:	e0a5      	b.n	8004a3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	68b9      	ldr	r1, [r7, #8]
 80048f6:	4618      	mov	r0, r3
 80048f8:	f000 faa0 	bl	8004e3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	699a      	ldr	r2, [r3, #24]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800490a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	699a      	ldr	r2, [r3, #24]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800491a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	6999      	ldr	r1, [r3, #24]
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	021a      	lsls	r2, r3, #8
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	430a      	orrs	r2, r1
 800492e:	619a      	str	r2, [r3, #24]
      break;
 8004930:	e084      	b.n	8004a3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	68b9      	ldr	r1, [r7, #8]
 8004938:	4618      	mov	r0, r3
 800493a:	f000 fb09 	bl	8004f50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	69da      	ldr	r2, [r3, #28]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f042 0208 	orr.w	r2, r2, #8
 800494c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	69da      	ldr	r2, [r3, #28]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f022 0204 	bic.w	r2, r2, #4
 800495c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	69d9      	ldr	r1, [r3, #28]
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	691a      	ldr	r2, [r3, #16]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	430a      	orrs	r2, r1
 800496e:	61da      	str	r2, [r3, #28]
      break;
 8004970:	e064      	b.n	8004a3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	68b9      	ldr	r1, [r7, #8]
 8004978:	4618      	mov	r0, r3
 800497a:	f000 fb71 	bl	8005060 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	69da      	ldr	r2, [r3, #28]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800498c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	69da      	ldr	r2, [r3, #28]
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800499c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	69d9      	ldr	r1, [r3, #28]
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	691b      	ldr	r3, [r3, #16]
 80049a8:	021a      	lsls	r2, r3, #8
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	430a      	orrs	r2, r1
 80049b0:	61da      	str	r2, [r3, #28]
      break;
 80049b2:	e043      	b.n	8004a3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	68b9      	ldr	r1, [r7, #8]
 80049ba:	4618      	mov	r0, r3
 80049bc:	f000 fbba 	bl	8005134 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f042 0208 	orr.w	r2, r2, #8
 80049ce:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f022 0204 	bic.w	r2, r2, #4
 80049de:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	691a      	ldr	r2, [r3, #16]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	430a      	orrs	r2, r1
 80049f0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80049f2:	e023      	b.n	8004a3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	68b9      	ldr	r1, [r7, #8]
 80049fa:	4618      	mov	r0, r3
 80049fc:	f000 fbfe 	bl	80051fc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a0e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a1e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	021a      	lsls	r2, r3, #8
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	430a      	orrs	r2, r1
 8004a32:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004a34:	e002      	b.n	8004a3c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	75fb      	strb	r3, [r7, #23]
      break;
 8004a3a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004a44:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3718      	adds	r7, #24
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop

08004a50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d101      	bne.n	8004a6c <HAL_TIM_ConfigClockSource+0x1c>
 8004a68:	2302      	movs	r3, #2
 8004a6a:	e0b6      	b.n	8004bda <HAL_TIM_ConfigClockSource+0x18a>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2202      	movs	r2, #2
 8004a78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a8a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004a8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004a96:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	68ba      	ldr	r2, [r7, #8]
 8004a9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004aa8:	d03e      	beq.n	8004b28 <HAL_TIM_ConfigClockSource+0xd8>
 8004aaa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004aae:	f200 8087 	bhi.w	8004bc0 <HAL_TIM_ConfigClockSource+0x170>
 8004ab2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ab6:	f000 8086 	beq.w	8004bc6 <HAL_TIM_ConfigClockSource+0x176>
 8004aba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004abe:	d87f      	bhi.n	8004bc0 <HAL_TIM_ConfigClockSource+0x170>
 8004ac0:	2b70      	cmp	r3, #112	@ 0x70
 8004ac2:	d01a      	beq.n	8004afa <HAL_TIM_ConfigClockSource+0xaa>
 8004ac4:	2b70      	cmp	r3, #112	@ 0x70
 8004ac6:	d87b      	bhi.n	8004bc0 <HAL_TIM_ConfigClockSource+0x170>
 8004ac8:	2b60      	cmp	r3, #96	@ 0x60
 8004aca:	d050      	beq.n	8004b6e <HAL_TIM_ConfigClockSource+0x11e>
 8004acc:	2b60      	cmp	r3, #96	@ 0x60
 8004ace:	d877      	bhi.n	8004bc0 <HAL_TIM_ConfigClockSource+0x170>
 8004ad0:	2b50      	cmp	r3, #80	@ 0x50
 8004ad2:	d03c      	beq.n	8004b4e <HAL_TIM_ConfigClockSource+0xfe>
 8004ad4:	2b50      	cmp	r3, #80	@ 0x50
 8004ad6:	d873      	bhi.n	8004bc0 <HAL_TIM_ConfigClockSource+0x170>
 8004ad8:	2b40      	cmp	r3, #64	@ 0x40
 8004ada:	d058      	beq.n	8004b8e <HAL_TIM_ConfigClockSource+0x13e>
 8004adc:	2b40      	cmp	r3, #64	@ 0x40
 8004ade:	d86f      	bhi.n	8004bc0 <HAL_TIM_ConfigClockSource+0x170>
 8004ae0:	2b30      	cmp	r3, #48	@ 0x30
 8004ae2:	d064      	beq.n	8004bae <HAL_TIM_ConfigClockSource+0x15e>
 8004ae4:	2b30      	cmp	r3, #48	@ 0x30
 8004ae6:	d86b      	bhi.n	8004bc0 <HAL_TIM_ConfigClockSource+0x170>
 8004ae8:	2b20      	cmp	r3, #32
 8004aea:	d060      	beq.n	8004bae <HAL_TIM_ConfigClockSource+0x15e>
 8004aec:	2b20      	cmp	r3, #32
 8004aee:	d867      	bhi.n	8004bc0 <HAL_TIM_ConfigClockSource+0x170>
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d05c      	beq.n	8004bae <HAL_TIM_ConfigClockSource+0x15e>
 8004af4:	2b10      	cmp	r3, #16
 8004af6:	d05a      	beq.n	8004bae <HAL_TIM_ConfigClockSource+0x15e>
 8004af8:	e062      	b.n	8004bc0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b0a:	f000 fc57 	bl	80053bc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004b1c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	68ba      	ldr	r2, [r7, #8]
 8004b24:	609a      	str	r2, [r3, #8]
      break;
 8004b26:	e04f      	b.n	8004bc8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b38:	f000 fc40 	bl	80053bc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	689a      	ldr	r2, [r3, #8]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004b4a:	609a      	str	r2, [r3, #8]
      break;
 8004b4c:	e03c      	b.n	8004bc8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	f000 fbb4 	bl	80052c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	2150      	movs	r1, #80	@ 0x50
 8004b66:	4618      	mov	r0, r3
 8004b68:	f000 fc0d 	bl	8005386 <TIM_ITRx_SetConfig>
      break;
 8004b6c:	e02c      	b.n	8004bc8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	f000 fbd3 	bl	8005326 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	2160      	movs	r1, #96	@ 0x60
 8004b86:	4618      	mov	r0, r3
 8004b88:	f000 fbfd 	bl	8005386 <TIM_ITRx_SetConfig>
      break;
 8004b8c:	e01c      	b.n	8004bc8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	f000 fb94 	bl	80052c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	2140      	movs	r1, #64	@ 0x40
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f000 fbed 	bl	8005386 <TIM_ITRx_SetConfig>
      break;
 8004bac:	e00c      	b.n	8004bc8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4619      	mov	r1, r3
 8004bb8:	4610      	mov	r0, r2
 8004bba:	f000 fbe4 	bl	8005386 <TIM_ITRx_SetConfig>
      break;
 8004bbe:	e003      	b.n	8004bc8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	73fb      	strb	r3, [r7, #15]
      break;
 8004bc4:	e000      	b.n	8004bc8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004bc6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3710      	adds	r7, #16
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
	...

08004be4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b085      	sub	sp, #20
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4a42      	ldr	r2, [pc, #264]	@ (8004d00 <TIM_Base_SetConfig+0x11c>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d00f      	beq.n	8004c1c <TIM_Base_SetConfig+0x38>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c02:	d00b      	beq.n	8004c1c <TIM_Base_SetConfig+0x38>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	4a3f      	ldr	r2, [pc, #252]	@ (8004d04 <TIM_Base_SetConfig+0x120>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d007      	beq.n	8004c1c <TIM_Base_SetConfig+0x38>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	4a3e      	ldr	r2, [pc, #248]	@ (8004d08 <TIM_Base_SetConfig+0x124>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d003      	beq.n	8004c1c <TIM_Base_SetConfig+0x38>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	4a3d      	ldr	r2, [pc, #244]	@ (8004d0c <TIM_Base_SetConfig+0x128>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d108      	bne.n	8004c2e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	68fa      	ldr	r2, [r7, #12]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4a33      	ldr	r2, [pc, #204]	@ (8004d00 <TIM_Base_SetConfig+0x11c>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d01b      	beq.n	8004c6e <TIM_Base_SetConfig+0x8a>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c3c:	d017      	beq.n	8004c6e <TIM_Base_SetConfig+0x8a>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a30      	ldr	r2, [pc, #192]	@ (8004d04 <TIM_Base_SetConfig+0x120>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d013      	beq.n	8004c6e <TIM_Base_SetConfig+0x8a>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	4a2f      	ldr	r2, [pc, #188]	@ (8004d08 <TIM_Base_SetConfig+0x124>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d00f      	beq.n	8004c6e <TIM_Base_SetConfig+0x8a>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a2e      	ldr	r2, [pc, #184]	@ (8004d0c <TIM_Base_SetConfig+0x128>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d00b      	beq.n	8004c6e <TIM_Base_SetConfig+0x8a>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4a2d      	ldr	r2, [pc, #180]	@ (8004d10 <TIM_Base_SetConfig+0x12c>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d007      	beq.n	8004c6e <TIM_Base_SetConfig+0x8a>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4a2c      	ldr	r2, [pc, #176]	@ (8004d14 <TIM_Base_SetConfig+0x130>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d003      	beq.n	8004c6e <TIM_Base_SetConfig+0x8a>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a2b      	ldr	r2, [pc, #172]	@ (8004d18 <TIM_Base_SetConfig+0x134>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d108      	bne.n	8004c80 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	68fa      	ldr	r2, [r7, #12]
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	695b      	ldr	r3, [r3, #20]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	68fa      	ldr	r2, [r7, #12]
 8004c92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	689a      	ldr	r2, [r3, #8]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	4a16      	ldr	r2, [pc, #88]	@ (8004d00 <TIM_Base_SetConfig+0x11c>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d00f      	beq.n	8004ccc <TIM_Base_SetConfig+0xe8>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	4a17      	ldr	r2, [pc, #92]	@ (8004d0c <TIM_Base_SetConfig+0x128>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d00b      	beq.n	8004ccc <TIM_Base_SetConfig+0xe8>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	4a16      	ldr	r2, [pc, #88]	@ (8004d10 <TIM_Base_SetConfig+0x12c>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d007      	beq.n	8004ccc <TIM_Base_SetConfig+0xe8>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4a15      	ldr	r2, [pc, #84]	@ (8004d14 <TIM_Base_SetConfig+0x130>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d003      	beq.n	8004ccc <TIM_Base_SetConfig+0xe8>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	4a14      	ldr	r2, [pc, #80]	@ (8004d18 <TIM_Base_SetConfig+0x134>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d103      	bne.n	8004cd4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	691a      	ldr	r2, [r3, #16]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	691b      	ldr	r3, [r3, #16]
 8004cde:	f003 0301 	and.w	r3, r3, #1
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d105      	bne.n	8004cf2 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	691b      	ldr	r3, [r3, #16]
 8004cea:	f023 0201 	bic.w	r2, r3, #1
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	611a      	str	r2, [r3, #16]
  }
}
 8004cf2:	bf00      	nop
 8004cf4:	3714      	adds	r7, #20
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr
 8004cfe:	bf00      	nop
 8004d00:	40012c00 	.word	0x40012c00
 8004d04:	40000400 	.word	0x40000400
 8004d08:	40000800 	.word	0x40000800
 8004d0c:	40013400 	.word	0x40013400
 8004d10:	40014000 	.word	0x40014000
 8004d14:	40014400 	.word	0x40014400
 8004d18:	40014800 	.word	0x40014800

08004d1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b087      	sub	sp, #28
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6a1b      	ldr	r3, [r3, #32]
 8004d2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6a1b      	ldr	r3, [r3, #32]
 8004d30:	f023 0201 	bic.w	r2, r3, #1
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	699b      	ldr	r3, [r3, #24]
 8004d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f023 0303 	bic.w	r3, r3, #3
 8004d56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	68fa      	ldr	r2, [r7, #12]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	f023 0302 	bic.w	r3, r3, #2
 8004d68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	697a      	ldr	r2, [r7, #20]
 8004d70:	4313      	orrs	r3, r2
 8004d72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	4a2c      	ldr	r2, [pc, #176]	@ (8004e28 <TIM_OC1_SetConfig+0x10c>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d00f      	beq.n	8004d9c <TIM_OC1_SetConfig+0x80>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	4a2b      	ldr	r2, [pc, #172]	@ (8004e2c <TIM_OC1_SetConfig+0x110>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d00b      	beq.n	8004d9c <TIM_OC1_SetConfig+0x80>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	4a2a      	ldr	r2, [pc, #168]	@ (8004e30 <TIM_OC1_SetConfig+0x114>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d007      	beq.n	8004d9c <TIM_OC1_SetConfig+0x80>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	4a29      	ldr	r2, [pc, #164]	@ (8004e34 <TIM_OC1_SetConfig+0x118>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d003      	beq.n	8004d9c <TIM_OC1_SetConfig+0x80>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	4a28      	ldr	r2, [pc, #160]	@ (8004e38 <TIM_OC1_SetConfig+0x11c>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d10c      	bne.n	8004db6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	f023 0308 	bic.w	r3, r3, #8
 8004da2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	697a      	ldr	r2, [r7, #20]
 8004daa:	4313      	orrs	r3, r2
 8004dac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	f023 0304 	bic.w	r3, r3, #4
 8004db4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4a1b      	ldr	r2, [pc, #108]	@ (8004e28 <TIM_OC1_SetConfig+0x10c>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d00f      	beq.n	8004dde <TIM_OC1_SetConfig+0xc2>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a1a      	ldr	r2, [pc, #104]	@ (8004e2c <TIM_OC1_SetConfig+0x110>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d00b      	beq.n	8004dde <TIM_OC1_SetConfig+0xc2>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4a19      	ldr	r2, [pc, #100]	@ (8004e30 <TIM_OC1_SetConfig+0x114>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d007      	beq.n	8004dde <TIM_OC1_SetConfig+0xc2>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4a18      	ldr	r2, [pc, #96]	@ (8004e34 <TIM_OC1_SetConfig+0x118>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d003      	beq.n	8004dde <TIM_OC1_SetConfig+0xc2>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4a17      	ldr	r2, [pc, #92]	@ (8004e38 <TIM_OC1_SetConfig+0x11c>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d111      	bne.n	8004e02 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004de4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004dec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	695b      	ldr	r3, [r3, #20]
 8004df2:	693a      	ldr	r2, [r7, #16]
 8004df4:	4313      	orrs	r3, r2
 8004df6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	699b      	ldr	r3, [r3, #24]
 8004dfc:	693a      	ldr	r2, [r7, #16]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	693a      	ldr	r2, [r7, #16]
 8004e06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	68fa      	ldr	r2, [r7, #12]
 8004e0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	685a      	ldr	r2, [r3, #4]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	697a      	ldr	r2, [r7, #20]
 8004e1a:	621a      	str	r2, [r3, #32]
}
 8004e1c:	bf00      	nop
 8004e1e:	371c      	adds	r7, #28
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr
 8004e28:	40012c00 	.word	0x40012c00
 8004e2c:	40013400 	.word	0x40013400
 8004e30:	40014000 	.word	0x40014000
 8004e34:	40014400 	.word	0x40014400
 8004e38:	40014800 	.word	0x40014800

08004e3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b087      	sub	sp, #28
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a1b      	ldr	r3, [r3, #32]
 8004e4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6a1b      	ldr	r3, [r3, #32]
 8004e50:	f023 0210 	bic.w	r2, r3, #16
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	699b      	ldr	r3, [r3, #24]
 8004e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	021b      	lsls	r3, r3, #8
 8004e7e:	68fa      	ldr	r2, [r7, #12]
 8004e80:	4313      	orrs	r3, r2
 8004e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	f023 0320 	bic.w	r3, r3, #32
 8004e8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	011b      	lsls	r3, r3, #4
 8004e92:	697a      	ldr	r2, [r7, #20]
 8004e94:	4313      	orrs	r3, r2
 8004e96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	4a28      	ldr	r2, [pc, #160]	@ (8004f3c <TIM_OC2_SetConfig+0x100>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d003      	beq.n	8004ea8 <TIM_OC2_SetConfig+0x6c>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	4a27      	ldr	r2, [pc, #156]	@ (8004f40 <TIM_OC2_SetConfig+0x104>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d10d      	bne.n	8004ec4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004eae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	011b      	lsls	r3, r3, #4
 8004eb6:	697a      	ldr	r2, [r7, #20]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ec2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	4a1d      	ldr	r2, [pc, #116]	@ (8004f3c <TIM_OC2_SetConfig+0x100>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d00f      	beq.n	8004eec <TIM_OC2_SetConfig+0xb0>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4a1c      	ldr	r2, [pc, #112]	@ (8004f40 <TIM_OC2_SetConfig+0x104>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d00b      	beq.n	8004eec <TIM_OC2_SetConfig+0xb0>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	4a1b      	ldr	r2, [pc, #108]	@ (8004f44 <TIM_OC2_SetConfig+0x108>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d007      	beq.n	8004eec <TIM_OC2_SetConfig+0xb0>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	4a1a      	ldr	r2, [pc, #104]	@ (8004f48 <TIM_OC2_SetConfig+0x10c>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d003      	beq.n	8004eec <TIM_OC2_SetConfig+0xb0>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	4a19      	ldr	r2, [pc, #100]	@ (8004f4c <TIM_OC2_SetConfig+0x110>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d113      	bne.n	8004f14 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004ef2:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004efa:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	695b      	ldr	r3, [r3, #20]
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	693a      	ldr	r2, [r7, #16]
 8004f04:	4313      	orrs	r3, r2
 8004f06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	699b      	ldr	r3, [r3, #24]
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	693a      	ldr	r2, [r7, #16]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	693a      	ldr	r2, [r7, #16]
 8004f18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	68fa      	ldr	r2, [r7, #12]
 8004f1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	685a      	ldr	r2, [r3, #4]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	697a      	ldr	r2, [r7, #20]
 8004f2c:	621a      	str	r2, [r3, #32]
}
 8004f2e:	bf00      	nop
 8004f30:	371c      	adds	r7, #28
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr
 8004f3a:	bf00      	nop
 8004f3c:	40012c00 	.word	0x40012c00
 8004f40:	40013400 	.word	0x40013400
 8004f44:	40014000 	.word	0x40014000
 8004f48:	40014400 	.word	0x40014400
 8004f4c:	40014800 	.word	0x40014800

08004f50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b087      	sub	sp, #28
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6a1b      	ldr	r3, [r3, #32]
 8004f5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6a1b      	ldr	r3, [r3, #32]
 8004f64:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	69db      	ldr	r3, [r3, #28]
 8004f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f023 0303 	bic.w	r3, r3, #3
 8004f8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	68fa      	ldr	r2, [r7, #12]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004f9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	021b      	lsls	r3, r3, #8
 8004fa4:	697a      	ldr	r2, [r7, #20]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a27      	ldr	r2, [pc, #156]	@ (800504c <TIM_OC3_SetConfig+0xfc>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d003      	beq.n	8004fba <TIM_OC3_SetConfig+0x6a>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a26      	ldr	r2, [pc, #152]	@ (8005050 <TIM_OC3_SetConfig+0x100>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d10d      	bne.n	8004fd6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004fc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	021b      	lsls	r3, r3, #8
 8004fc8:	697a      	ldr	r2, [r7, #20]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004fd4:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4a1c      	ldr	r2, [pc, #112]	@ (800504c <TIM_OC3_SetConfig+0xfc>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d00f      	beq.n	8004ffe <TIM_OC3_SetConfig+0xae>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4a1b      	ldr	r2, [pc, #108]	@ (8005050 <TIM_OC3_SetConfig+0x100>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d00b      	beq.n	8004ffe <TIM_OC3_SetConfig+0xae>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a1a      	ldr	r2, [pc, #104]	@ (8005054 <TIM_OC3_SetConfig+0x104>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d007      	beq.n	8004ffe <TIM_OC3_SetConfig+0xae>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4a19      	ldr	r2, [pc, #100]	@ (8005058 <TIM_OC3_SetConfig+0x108>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d003      	beq.n	8004ffe <TIM_OC3_SetConfig+0xae>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a18      	ldr	r2, [pc, #96]	@ (800505c <TIM_OC3_SetConfig+0x10c>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d113      	bne.n	8005026 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005004:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800500c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	695b      	ldr	r3, [r3, #20]
 8005012:	011b      	lsls	r3, r3, #4
 8005014:	693a      	ldr	r2, [r7, #16]
 8005016:	4313      	orrs	r3, r2
 8005018:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	699b      	ldr	r3, [r3, #24]
 800501e:	011b      	lsls	r3, r3, #4
 8005020:	693a      	ldr	r2, [r7, #16]
 8005022:	4313      	orrs	r3, r2
 8005024:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	693a      	ldr	r2, [r7, #16]
 800502a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	685a      	ldr	r2, [r3, #4]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	697a      	ldr	r2, [r7, #20]
 800503e:	621a      	str	r2, [r3, #32]
}
 8005040:	bf00      	nop
 8005042:	371c      	adds	r7, #28
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr
 800504c:	40012c00 	.word	0x40012c00
 8005050:	40013400 	.word	0x40013400
 8005054:	40014000 	.word	0x40014000
 8005058:	40014400 	.word	0x40014400
 800505c:	40014800 	.word	0x40014800

08005060 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005060:	b480      	push	{r7}
 8005062:	b087      	sub	sp, #28
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6a1b      	ldr	r3, [r3, #32]
 800506e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6a1b      	ldr	r3, [r3, #32]
 8005074:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	69db      	ldr	r3, [r3, #28]
 8005086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800508e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005092:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800509a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	021b      	lsls	r3, r3, #8
 80050a2:	68fa      	ldr	r2, [r7, #12]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80050ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	031b      	lsls	r3, r3, #12
 80050b6:	693a      	ldr	r2, [r7, #16]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	4a18      	ldr	r2, [pc, #96]	@ (8005120 <TIM_OC4_SetConfig+0xc0>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d00f      	beq.n	80050e4 <TIM_OC4_SetConfig+0x84>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	4a17      	ldr	r2, [pc, #92]	@ (8005124 <TIM_OC4_SetConfig+0xc4>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d00b      	beq.n	80050e4 <TIM_OC4_SetConfig+0x84>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4a16      	ldr	r2, [pc, #88]	@ (8005128 <TIM_OC4_SetConfig+0xc8>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d007      	beq.n	80050e4 <TIM_OC4_SetConfig+0x84>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4a15      	ldr	r2, [pc, #84]	@ (800512c <TIM_OC4_SetConfig+0xcc>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d003      	beq.n	80050e4 <TIM_OC4_SetConfig+0x84>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4a14      	ldr	r2, [pc, #80]	@ (8005130 <TIM_OC4_SetConfig+0xd0>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d109      	bne.n	80050f8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80050ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	695b      	ldr	r3, [r3, #20]
 80050f0:	019b      	lsls	r3, r3, #6
 80050f2:	697a      	ldr	r2, [r7, #20]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	697a      	ldr	r2, [r7, #20]
 80050fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	68fa      	ldr	r2, [r7, #12]
 8005102:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	685a      	ldr	r2, [r3, #4]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	693a      	ldr	r2, [r7, #16]
 8005110:	621a      	str	r2, [r3, #32]
}
 8005112:	bf00      	nop
 8005114:	371c      	adds	r7, #28
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr
 800511e:	bf00      	nop
 8005120:	40012c00 	.word	0x40012c00
 8005124:	40013400 	.word	0x40013400
 8005128:	40014000 	.word	0x40014000
 800512c:	40014400 	.word	0x40014400
 8005130:	40014800 	.word	0x40014800

08005134 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005134:	b480      	push	{r7}
 8005136:	b087      	sub	sp, #28
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6a1b      	ldr	r3, [r3, #32]
 8005142:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6a1b      	ldr	r3, [r3, #32]
 8005148:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800515a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005162:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005166:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	68fa      	ldr	r2, [r7, #12]
 800516e:	4313      	orrs	r3, r2
 8005170:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005178:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	041b      	lsls	r3, r3, #16
 8005180:	693a      	ldr	r2, [r7, #16]
 8005182:	4313      	orrs	r3, r2
 8005184:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a17      	ldr	r2, [pc, #92]	@ (80051e8 <TIM_OC5_SetConfig+0xb4>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d00f      	beq.n	80051ae <TIM_OC5_SetConfig+0x7a>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4a16      	ldr	r2, [pc, #88]	@ (80051ec <TIM_OC5_SetConfig+0xb8>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d00b      	beq.n	80051ae <TIM_OC5_SetConfig+0x7a>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a15      	ldr	r2, [pc, #84]	@ (80051f0 <TIM_OC5_SetConfig+0xbc>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d007      	beq.n	80051ae <TIM_OC5_SetConfig+0x7a>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a14      	ldr	r2, [pc, #80]	@ (80051f4 <TIM_OC5_SetConfig+0xc0>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d003      	beq.n	80051ae <TIM_OC5_SetConfig+0x7a>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a13      	ldr	r2, [pc, #76]	@ (80051f8 <TIM_OC5_SetConfig+0xc4>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d109      	bne.n	80051c2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80051b4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	695b      	ldr	r3, [r3, #20]
 80051ba:	021b      	lsls	r3, r3, #8
 80051bc:	697a      	ldr	r2, [r7, #20]
 80051be:	4313      	orrs	r3, r2
 80051c0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	697a      	ldr	r2, [r7, #20]
 80051c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	68fa      	ldr	r2, [r7, #12]
 80051cc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	685a      	ldr	r2, [r3, #4]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	693a      	ldr	r2, [r7, #16]
 80051da:	621a      	str	r2, [r3, #32]
}
 80051dc:	bf00      	nop
 80051de:	371c      	adds	r7, #28
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr
 80051e8:	40012c00 	.word	0x40012c00
 80051ec:	40013400 	.word	0x40013400
 80051f0:	40014000 	.word	0x40014000
 80051f4:	40014400 	.word	0x40014400
 80051f8:	40014800 	.word	0x40014800

080051fc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b087      	sub	sp, #28
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a1b      	ldr	r3, [r3, #32]
 800520a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6a1b      	ldr	r3, [r3, #32]
 8005210:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800522a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800522e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	021b      	lsls	r3, r3, #8
 8005236:	68fa      	ldr	r2, [r7, #12]
 8005238:	4313      	orrs	r3, r2
 800523a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005242:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	051b      	lsls	r3, r3, #20
 800524a:	693a      	ldr	r2, [r7, #16]
 800524c:	4313      	orrs	r3, r2
 800524e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	4a18      	ldr	r2, [pc, #96]	@ (80052b4 <TIM_OC6_SetConfig+0xb8>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d00f      	beq.n	8005278 <TIM_OC6_SetConfig+0x7c>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	4a17      	ldr	r2, [pc, #92]	@ (80052b8 <TIM_OC6_SetConfig+0xbc>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d00b      	beq.n	8005278 <TIM_OC6_SetConfig+0x7c>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	4a16      	ldr	r2, [pc, #88]	@ (80052bc <TIM_OC6_SetConfig+0xc0>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d007      	beq.n	8005278 <TIM_OC6_SetConfig+0x7c>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	4a15      	ldr	r2, [pc, #84]	@ (80052c0 <TIM_OC6_SetConfig+0xc4>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d003      	beq.n	8005278 <TIM_OC6_SetConfig+0x7c>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	4a14      	ldr	r2, [pc, #80]	@ (80052c4 <TIM_OC6_SetConfig+0xc8>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d109      	bne.n	800528c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800527e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	695b      	ldr	r3, [r3, #20]
 8005284:	029b      	lsls	r3, r3, #10
 8005286:	697a      	ldr	r2, [r7, #20]
 8005288:	4313      	orrs	r3, r2
 800528a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	697a      	ldr	r2, [r7, #20]
 8005290:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	68fa      	ldr	r2, [r7, #12]
 8005296:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	685a      	ldr	r2, [r3, #4]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	693a      	ldr	r2, [r7, #16]
 80052a4:	621a      	str	r2, [r3, #32]
}
 80052a6:	bf00      	nop
 80052a8:	371c      	adds	r7, #28
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr
 80052b2:	bf00      	nop
 80052b4:	40012c00 	.word	0x40012c00
 80052b8:	40013400 	.word	0x40013400
 80052bc:	40014000 	.word	0x40014000
 80052c0:	40014400 	.word	0x40014400
 80052c4:	40014800 	.word	0x40014800

080052c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b087      	sub	sp, #28
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	60f8      	str	r0, [r7, #12]
 80052d0:	60b9      	str	r1, [r7, #8]
 80052d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	6a1b      	ldr	r3, [r3, #32]
 80052d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	6a1b      	ldr	r3, [r3, #32]
 80052de:	f023 0201 	bic.w	r2, r3, #1
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	699b      	ldr	r3, [r3, #24]
 80052ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80052f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	011b      	lsls	r3, r3, #4
 80052f8:	693a      	ldr	r2, [r7, #16]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	f023 030a 	bic.w	r3, r3, #10
 8005304:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005306:	697a      	ldr	r2, [r7, #20]
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	4313      	orrs	r3, r2
 800530c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	693a      	ldr	r2, [r7, #16]
 8005312:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	697a      	ldr	r2, [r7, #20]
 8005318:	621a      	str	r2, [r3, #32]
}
 800531a:	bf00      	nop
 800531c:	371c      	adds	r7, #28
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr

08005326 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005326:	b480      	push	{r7}
 8005328:	b087      	sub	sp, #28
 800532a:	af00      	add	r7, sp, #0
 800532c:	60f8      	str	r0, [r7, #12]
 800532e:	60b9      	str	r1, [r7, #8]
 8005330:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	6a1b      	ldr	r3, [r3, #32]
 8005336:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6a1b      	ldr	r3, [r3, #32]
 800533c:	f023 0210 	bic.w	r2, r3, #16
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	699b      	ldr	r3, [r3, #24]
 8005348:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005350:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	031b      	lsls	r3, r3, #12
 8005356:	693a      	ldr	r2, [r7, #16]
 8005358:	4313      	orrs	r3, r2
 800535a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005362:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	011b      	lsls	r3, r3, #4
 8005368:	697a      	ldr	r2, [r7, #20]
 800536a:	4313      	orrs	r3, r2
 800536c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	693a      	ldr	r2, [r7, #16]
 8005372:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	697a      	ldr	r2, [r7, #20]
 8005378:	621a      	str	r2, [r3, #32]
}
 800537a:	bf00      	nop
 800537c:	371c      	adds	r7, #28
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr

08005386 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005386:	b480      	push	{r7}
 8005388:	b085      	sub	sp, #20
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
 800538e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800539c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800539e:	683a      	ldr	r2, [r7, #0]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	4313      	orrs	r3, r2
 80053a4:	f043 0307 	orr.w	r3, r3, #7
 80053a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	68fa      	ldr	r2, [r7, #12]
 80053ae:	609a      	str	r2, [r3, #8]
}
 80053b0:	bf00      	nop
 80053b2:	3714      	adds	r7, #20
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80053bc:	b480      	push	{r7}
 80053be:	b087      	sub	sp, #28
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	60f8      	str	r0, [r7, #12]
 80053c4:	60b9      	str	r1, [r7, #8]
 80053c6:	607a      	str	r2, [r7, #4]
 80053c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80053d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	021a      	lsls	r2, r3, #8
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	431a      	orrs	r2, r3
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	697a      	ldr	r2, [r7, #20]
 80053e6:	4313      	orrs	r3, r2
 80053e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	697a      	ldr	r2, [r7, #20]
 80053ee:	609a      	str	r2, [r3, #8]
}
 80053f0:	bf00      	nop
 80053f2:	371c      	adds	r7, #28
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr

080053fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b087      	sub	sp, #28
 8005400:	af00      	add	r7, sp, #0
 8005402:	60f8      	str	r0, [r7, #12]
 8005404:	60b9      	str	r1, [r7, #8]
 8005406:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	f003 031f 	and.w	r3, r3, #31
 800540e:	2201      	movs	r2, #1
 8005410:	fa02 f303 	lsl.w	r3, r2, r3
 8005414:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6a1a      	ldr	r2, [r3, #32]
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	43db      	mvns	r3, r3
 800541e:	401a      	ands	r2, r3
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6a1a      	ldr	r2, [r3, #32]
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	f003 031f 	and.w	r3, r3, #31
 800542e:	6879      	ldr	r1, [r7, #4]
 8005430:	fa01 f303 	lsl.w	r3, r1, r3
 8005434:	431a      	orrs	r2, r3
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	621a      	str	r2, [r3, #32]
}
 800543a:	bf00      	nop
 800543c:	371c      	adds	r7, #28
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr
	...

08005448 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005448:	b480      	push	{r7}
 800544a:	b085      	sub	sp, #20
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005458:	2b01      	cmp	r3, #1
 800545a:	d101      	bne.n	8005460 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800545c:	2302      	movs	r3, #2
 800545e:	e063      	b.n	8005528 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2202      	movs	r2, #2
 800546c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a2b      	ldr	r2, [pc, #172]	@ (8005534 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d004      	beq.n	8005494 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a2a      	ldr	r2, [pc, #168]	@ (8005538 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d108      	bne.n	80054a6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800549a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	68fa      	ldr	r2, [r7, #12]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054ac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	68fa      	ldr	r2, [r7, #12]
 80054b4:	4313      	orrs	r3, r2
 80054b6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	68fa      	ldr	r2, [r7, #12]
 80054be:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a1b      	ldr	r2, [pc, #108]	@ (8005534 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d018      	beq.n	80054fc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054d2:	d013      	beq.n	80054fc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a18      	ldr	r2, [pc, #96]	@ (800553c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d00e      	beq.n	80054fc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a17      	ldr	r2, [pc, #92]	@ (8005540 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d009      	beq.n	80054fc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a12      	ldr	r2, [pc, #72]	@ (8005538 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d004      	beq.n	80054fc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a13      	ldr	r2, [pc, #76]	@ (8005544 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d10c      	bne.n	8005516 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005502:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	68ba      	ldr	r2, [r7, #8]
 800550a:	4313      	orrs	r3, r2
 800550c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	68ba      	ldr	r2, [r7, #8]
 8005514:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2201      	movs	r2, #1
 800551a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2200      	movs	r2, #0
 8005522:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005526:	2300      	movs	r3, #0
}
 8005528:	4618      	mov	r0, r3
 800552a:	3714      	adds	r7, #20
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr
 8005534:	40012c00 	.word	0x40012c00
 8005538:	40013400 	.word	0x40013400
 800553c:	40000400 	.word	0x40000400
 8005540:	40000800 	.word	0x40000800
 8005544:	40014000 	.word	0x40014000

08005548 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b082      	sub	sp, #8
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d101      	bne.n	800555a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e040      	b.n	80055dc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800555e:	2b00      	cmp	r3, #0
 8005560:	d106      	bne.n	8005570 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2200      	movs	r2, #0
 8005566:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f7fb fb9e 	bl	8000cac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2224      	movs	r2, #36	@ 0x24
 8005574:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f022 0201 	bic.w	r2, r2, #1
 8005584:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800558a:	2b00      	cmp	r3, #0
 800558c:	d002      	beq.n	8005594 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 fa86 	bl	8005aa0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f000 f8af 	bl	80056f8 <UART_SetConfig>
 800559a:	4603      	mov	r3, r0
 800559c:	2b01      	cmp	r3, #1
 800559e:	d101      	bne.n	80055a4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	e01b      	b.n	80055dc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	685a      	ldr	r2, [r3, #4]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80055b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	689a      	ldr	r2, [r3, #8]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80055c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f042 0201 	orr.w	r2, r2, #1
 80055d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f000 fb05 	bl	8005be4 <UART_CheckIdleState>
 80055da:	4603      	mov	r3, r0
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3708      	adds	r7, #8
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}

080055e4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b08a      	sub	sp, #40	@ 0x28
 80055e8:	af02      	add	r7, sp, #8
 80055ea:	60f8      	str	r0, [r7, #12]
 80055ec:	60b9      	str	r1, [r7, #8]
 80055ee:	603b      	str	r3, [r7, #0]
 80055f0:	4613      	mov	r3, r2
 80055f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80055f8:	2b20      	cmp	r3, #32
 80055fa:	d177      	bne.n	80056ec <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d002      	beq.n	8005608 <HAL_UART_Transmit+0x24>
 8005602:	88fb      	ldrh	r3, [r7, #6]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d101      	bne.n	800560c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	e070      	b.n	80056ee <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2200      	movs	r2, #0
 8005610:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2221      	movs	r2, #33	@ 0x21
 8005618:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800561a:	f7fb fd69 	bl	80010f0 <HAL_GetTick>
 800561e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	88fa      	ldrh	r2, [r7, #6]
 8005624:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	88fa      	ldrh	r2, [r7, #6]
 800562c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005638:	d108      	bne.n	800564c <HAL_UART_Transmit+0x68>
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d104      	bne.n	800564c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005642:	2300      	movs	r3, #0
 8005644:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	61bb      	str	r3, [r7, #24]
 800564a:	e003      	b.n	8005654 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005650:	2300      	movs	r3, #0
 8005652:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005654:	e02f      	b.n	80056b6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	9300      	str	r3, [sp, #0]
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	2200      	movs	r2, #0
 800565e:	2180      	movs	r1, #128	@ 0x80
 8005660:	68f8      	ldr	r0, [r7, #12]
 8005662:	f000 fb67 	bl	8005d34 <UART_WaitOnFlagUntilTimeout>
 8005666:	4603      	mov	r3, r0
 8005668:	2b00      	cmp	r3, #0
 800566a:	d004      	beq.n	8005676 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2220      	movs	r2, #32
 8005670:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005672:	2303      	movs	r3, #3
 8005674:	e03b      	b.n	80056ee <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d10b      	bne.n	8005694 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800567c:	69bb      	ldr	r3, [r7, #24]
 800567e:	881a      	ldrh	r2, [r3, #0]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005688:	b292      	uxth	r2, r2
 800568a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800568c:	69bb      	ldr	r3, [r7, #24]
 800568e:	3302      	adds	r3, #2
 8005690:	61bb      	str	r3, [r7, #24]
 8005692:	e007      	b.n	80056a4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005694:	69fb      	ldr	r3, [r7, #28]
 8005696:	781a      	ldrb	r2, [r3, #0]
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800569e:	69fb      	ldr	r3, [r7, #28]
 80056a0:	3301      	adds	r3, #1
 80056a2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	3b01      	subs	r3, #1
 80056ae:	b29a      	uxth	r2, r3
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80056bc:	b29b      	uxth	r3, r3
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d1c9      	bne.n	8005656 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	9300      	str	r3, [sp, #0]
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	2200      	movs	r2, #0
 80056ca:	2140      	movs	r1, #64	@ 0x40
 80056cc:	68f8      	ldr	r0, [r7, #12]
 80056ce:	f000 fb31 	bl	8005d34 <UART_WaitOnFlagUntilTimeout>
 80056d2:	4603      	mov	r3, r0
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d004      	beq.n	80056e2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2220      	movs	r2, #32
 80056dc:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80056de:	2303      	movs	r3, #3
 80056e0:	e005      	b.n	80056ee <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2220      	movs	r2, #32
 80056e6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80056e8:	2300      	movs	r3, #0
 80056ea:	e000      	b.n	80056ee <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80056ec:	2302      	movs	r3, #2
  }
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3720      	adds	r7, #32
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}
	...

080056f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b088      	sub	sp, #32
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005700:	2300      	movs	r3, #0
 8005702:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	689a      	ldr	r2, [r3, #8]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	691b      	ldr	r3, [r3, #16]
 800570c:	431a      	orrs	r2, r3
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	695b      	ldr	r3, [r3, #20]
 8005712:	431a      	orrs	r2, r3
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	69db      	ldr	r3, [r3, #28]
 8005718:	4313      	orrs	r3, r2
 800571a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8005726:	f023 030c 	bic.w	r3, r3, #12
 800572a:	687a      	ldr	r2, [r7, #4]
 800572c:	6812      	ldr	r2, [r2, #0]
 800572e:	6979      	ldr	r1, [r7, #20]
 8005730:	430b      	orrs	r3, r1
 8005732:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	68da      	ldr	r2, [r3, #12]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	430a      	orrs	r2, r1
 8005748:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	699b      	ldr	r3, [r3, #24]
 800574e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6a1b      	ldr	r3, [r3, #32]
 8005754:	697a      	ldr	r2, [r7, #20]
 8005756:	4313      	orrs	r3, r2
 8005758:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	697a      	ldr	r2, [r7, #20]
 800576a:	430a      	orrs	r2, r1
 800576c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4aa7      	ldr	r2, [pc, #668]	@ (8005a10 <UART_SetConfig+0x318>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d120      	bne.n	80057ba <UART_SetConfig+0xc2>
 8005778:	4ba6      	ldr	r3, [pc, #664]	@ (8005a14 <UART_SetConfig+0x31c>)
 800577a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800577c:	f003 0303 	and.w	r3, r3, #3
 8005780:	2b03      	cmp	r3, #3
 8005782:	d817      	bhi.n	80057b4 <UART_SetConfig+0xbc>
 8005784:	a201      	add	r2, pc, #4	@ (adr r2, 800578c <UART_SetConfig+0x94>)
 8005786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800578a:	bf00      	nop
 800578c:	0800579d 	.word	0x0800579d
 8005790:	080057a9 	.word	0x080057a9
 8005794:	080057af 	.word	0x080057af
 8005798:	080057a3 	.word	0x080057a3
 800579c:	2301      	movs	r3, #1
 800579e:	77fb      	strb	r3, [r7, #31]
 80057a0:	e0b5      	b.n	800590e <UART_SetConfig+0x216>
 80057a2:	2302      	movs	r3, #2
 80057a4:	77fb      	strb	r3, [r7, #31]
 80057a6:	e0b2      	b.n	800590e <UART_SetConfig+0x216>
 80057a8:	2304      	movs	r3, #4
 80057aa:	77fb      	strb	r3, [r7, #31]
 80057ac:	e0af      	b.n	800590e <UART_SetConfig+0x216>
 80057ae:	2308      	movs	r3, #8
 80057b0:	77fb      	strb	r3, [r7, #31]
 80057b2:	e0ac      	b.n	800590e <UART_SetConfig+0x216>
 80057b4:	2310      	movs	r3, #16
 80057b6:	77fb      	strb	r3, [r7, #31]
 80057b8:	e0a9      	b.n	800590e <UART_SetConfig+0x216>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a96      	ldr	r2, [pc, #600]	@ (8005a18 <UART_SetConfig+0x320>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d124      	bne.n	800580e <UART_SetConfig+0x116>
 80057c4:	4b93      	ldr	r3, [pc, #588]	@ (8005a14 <UART_SetConfig+0x31c>)
 80057c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057c8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80057cc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80057d0:	d011      	beq.n	80057f6 <UART_SetConfig+0xfe>
 80057d2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80057d6:	d817      	bhi.n	8005808 <UART_SetConfig+0x110>
 80057d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80057dc:	d011      	beq.n	8005802 <UART_SetConfig+0x10a>
 80057de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80057e2:	d811      	bhi.n	8005808 <UART_SetConfig+0x110>
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d003      	beq.n	80057f0 <UART_SetConfig+0xf8>
 80057e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057ec:	d006      	beq.n	80057fc <UART_SetConfig+0x104>
 80057ee:	e00b      	b.n	8005808 <UART_SetConfig+0x110>
 80057f0:	2300      	movs	r3, #0
 80057f2:	77fb      	strb	r3, [r7, #31]
 80057f4:	e08b      	b.n	800590e <UART_SetConfig+0x216>
 80057f6:	2302      	movs	r3, #2
 80057f8:	77fb      	strb	r3, [r7, #31]
 80057fa:	e088      	b.n	800590e <UART_SetConfig+0x216>
 80057fc:	2304      	movs	r3, #4
 80057fe:	77fb      	strb	r3, [r7, #31]
 8005800:	e085      	b.n	800590e <UART_SetConfig+0x216>
 8005802:	2308      	movs	r3, #8
 8005804:	77fb      	strb	r3, [r7, #31]
 8005806:	e082      	b.n	800590e <UART_SetConfig+0x216>
 8005808:	2310      	movs	r3, #16
 800580a:	77fb      	strb	r3, [r7, #31]
 800580c:	e07f      	b.n	800590e <UART_SetConfig+0x216>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a82      	ldr	r2, [pc, #520]	@ (8005a1c <UART_SetConfig+0x324>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d124      	bne.n	8005862 <UART_SetConfig+0x16a>
 8005818:	4b7e      	ldr	r3, [pc, #504]	@ (8005a14 <UART_SetConfig+0x31c>)
 800581a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800581c:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8005820:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005824:	d011      	beq.n	800584a <UART_SetConfig+0x152>
 8005826:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800582a:	d817      	bhi.n	800585c <UART_SetConfig+0x164>
 800582c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005830:	d011      	beq.n	8005856 <UART_SetConfig+0x15e>
 8005832:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005836:	d811      	bhi.n	800585c <UART_SetConfig+0x164>
 8005838:	2b00      	cmp	r3, #0
 800583a:	d003      	beq.n	8005844 <UART_SetConfig+0x14c>
 800583c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005840:	d006      	beq.n	8005850 <UART_SetConfig+0x158>
 8005842:	e00b      	b.n	800585c <UART_SetConfig+0x164>
 8005844:	2300      	movs	r3, #0
 8005846:	77fb      	strb	r3, [r7, #31]
 8005848:	e061      	b.n	800590e <UART_SetConfig+0x216>
 800584a:	2302      	movs	r3, #2
 800584c:	77fb      	strb	r3, [r7, #31]
 800584e:	e05e      	b.n	800590e <UART_SetConfig+0x216>
 8005850:	2304      	movs	r3, #4
 8005852:	77fb      	strb	r3, [r7, #31]
 8005854:	e05b      	b.n	800590e <UART_SetConfig+0x216>
 8005856:	2308      	movs	r3, #8
 8005858:	77fb      	strb	r3, [r7, #31]
 800585a:	e058      	b.n	800590e <UART_SetConfig+0x216>
 800585c:	2310      	movs	r3, #16
 800585e:	77fb      	strb	r3, [r7, #31]
 8005860:	e055      	b.n	800590e <UART_SetConfig+0x216>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a6e      	ldr	r2, [pc, #440]	@ (8005a20 <UART_SetConfig+0x328>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d124      	bne.n	80058b6 <UART_SetConfig+0x1be>
 800586c:	4b69      	ldr	r3, [pc, #420]	@ (8005a14 <UART_SetConfig+0x31c>)
 800586e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005870:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8005874:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005878:	d011      	beq.n	800589e <UART_SetConfig+0x1a6>
 800587a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800587e:	d817      	bhi.n	80058b0 <UART_SetConfig+0x1b8>
 8005880:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005884:	d011      	beq.n	80058aa <UART_SetConfig+0x1b2>
 8005886:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800588a:	d811      	bhi.n	80058b0 <UART_SetConfig+0x1b8>
 800588c:	2b00      	cmp	r3, #0
 800588e:	d003      	beq.n	8005898 <UART_SetConfig+0x1a0>
 8005890:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005894:	d006      	beq.n	80058a4 <UART_SetConfig+0x1ac>
 8005896:	e00b      	b.n	80058b0 <UART_SetConfig+0x1b8>
 8005898:	2300      	movs	r3, #0
 800589a:	77fb      	strb	r3, [r7, #31]
 800589c:	e037      	b.n	800590e <UART_SetConfig+0x216>
 800589e:	2302      	movs	r3, #2
 80058a0:	77fb      	strb	r3, [r7, #31]
 80058a2:	e034      	b.n	800590e <UART_SetConfig+0x216>
 80058a4:	2304      	movs	r3, #4
 80058a6:	77fb      	strb	r3, [r7, #31]
 80058a8:	e031      	b.n	800590e <UART_SetConfig+0x216>
 80058aa:	2308      	movs	r3, #8
 80058ac:	77fb      	strb	r3, [r7, #31]
 80058ae:	e02e      	b.n	800590e <UART_SetConfig+0x216>
 80058b0:	2310      	movs	r3, #16
 80058b2:	77fb      	strb	r3, [r7, #31]
 80058b4:	e02b      	b.n	800590e <UART_SetConfig+0x216>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a5a      	ldr	r2, [pc, #360]	@ (8005a24 <UART_SetConfig+0x32c>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d124      	bne.n	800590a <UART_SetConfig+0x212>
 80058c0:	4b54      	ldr	r3, [pc, #336]	@ (8005a14 <UART_SetConfig+0x31c>)
 80058c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058c4:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80058c8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80058cc:	d011      	beq.n	80058f2 <UART_SetConfig+0x1fa>
 80058ce:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80058d2:	d817      	bhi.n	8005904 <UART_SetConfig+0x20c>
 80058d4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80058d8:	d011      	beq.n	80058fe <UART_SetConfig+0x206>
 80058da:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80058de:	d811      	bhi.n	8005904 <UART_SetConfig+0x20c>
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d003      	beq.n	80058ec <UART_SetConfig+0x1f4>
 80058e4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80058e8:	d006      	beq.n	80058f8 <UART_SetConfig+0x200>
 80058ea:	e00b      	b.n	8005904 <UART_SetConfig+0x20c>
 80058ec:	2300      	movs	r3, #0
 80058ee:	77fb      	strb	r3, [r7, #31]
 80058f0:	e00d      	b.n	800590e <UART_SetConfig+0x216>
 80058f2:	2302      	movs	r3, #2
 80058f4:	77fb      	strb	r3, [r7, #31]
 80058f6:	e00a      	b.n	800590e <UART_SetConfig+0x216>
 80058f8:	2304      	movs	r3, #4
 80058fa:	77fb      	strb	r3, [r7, #31]
 80058fc:	e007      	b.n	800590e <UART_SetConfig+0x216>
 80058fe:	2308      	movs	r3, #8
 8005900:	77fb      	strb	r3, [r7, #31]
 8005902:	e004      	b.n	800590e <UART_SetConfig+0x216>
 8005904:	2310      	movs	r3, #16
 8005906:	77fb      	strb	r3, [r7, #31]
 8005908:	e001      	b.n	800590e <UART_SetConfig+0x216>
 800590a:	2310      	movs	r3, #16
 800590c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	69db      	ldr	r3, [r3, #28]
 8005912:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005916:	d15b      	bne.n	80059d0 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8005918:	7ffb      	ldrb	r3, [r7, #31]
 800591a:	2b08      	cmp	r3, #8
 800591c:	d827      	bhi.n	800596e <UART_SetConfig+0x276>
 800591e:	a201      	add	r2, pc, #4	@ (adr r2, 8005924 <UART_SetConfig+0x22c>)
 8005920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005924:	08005949 	.word	0x08005949
 8005928:	08005951 	.word	0x08005951
 800592c:	08005959 	.word	0x08005959
 8005930:	0800596f 	.word	0x0800596f
 8005934:	0800595f 	.word	0x0800595f
 8005938:	0800596f 	.word	0x0800596f
 800593c:	0800596f 	.word	0x0800596f
 8005940:	0800596f 	.word	0x0800596f
 8005944:	08005967 	.word	0x08005967
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005948:	f7fe fb16 	bl	8003f78 <HAL_RCC_GetPCLK1Freq>
 800594c:	61b8      	str	r0, [r7, #24]
        break;
 800594e:	e013      	b.n	8005978 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005950:	f7fe fb34 	bl	8003fbc <HAL_RCC_GetPCLK2Freq>
 8005954:	61b8      	str	r0, [r7, #24]
        break;
 8005956:	e00f      	b.n	8005978 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005958:	4b33      	ldr	r3, [pc, #204]	@ (8005a28 <UART_SetConfig+0x330>)
 800595a:	61bb      	str	r3, [r7, #24]
        break;
 800595c:	e00c      	b.n	8005978 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800595e:	f7fe faab 	bl	8003eb8 <HAL_RCC_GetSysClockFreq>
 8005962:	61b8      	str	r0, [r7, #24]
        break;
 8005964:	e008      	b.n	8005978 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005966:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800596a:	61bb      	str	r3, [r7, #24]
        break;
 800596c:	e004      	b.n	8005978 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 800596e:	2300      	movs	r3, #0
 8005970:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	77bb      	strb	r3, [r7, #30]
        break;
 8005976:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005978:	69bb      	ldr	r3, [r7, #24]
 800597a:	2b00      	cmp	r3, #0
 800597c:	f000 8082 	beq.w	8005a84 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005980:	69bb      	ldr	r3, [r7, #24]
 8005982:	005a      	lsls	r2, r3, #1
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	085b      	lsrs	r3, r3, #1
 800598a:	441a      	add	r2, r3
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	fbb2 f3f3 	udiv	r3, r2, r3
 8005994:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	2b0f      	cmp	r3, #15
 800599a:	d916      	bls.n	80059ca <UART_SetConfig+0x2d2>
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059a2:	d212      	bcs.n	80059ca <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	f023 030f 	bic.w	r3, r3, #15
 80059ac:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	085b      	lsrs	r3, r3, #1
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	f003 0307 	and.w	r3, r3, #7
 80059b8:	b29a      	uxth	r2, r3
 80059ba:	89fb      	ldrh	r3, [r7, #14]
 80059bc:	4313      	orrs	r3, r2
 80059be:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	89fa      	ldrh	r2, [r7, #14]
 80059c6:	60da      	str	r2, [r3, #12]
 80059c8:	e05c      	b.n	8005a84 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	77bb      	strb	r3, [r7, #30]
 80059ce:	e059      	b.n	8005a84 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80059d0:	7ffb      	ldrb	r3, [r7, #31]
 80059d2:	2b08      	cmp	r3, #8
 80059d4:	d835      	bhi.n	8005a42 <UART_SetConfig+0x34a>
 80059d6:	a201      	add	r2, pc, #4	@ (adr r2, 80059dc <UART_SetConfig+0x2e4>)
 80059d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059dc:	08005a01 	.word	0x08005a01
 80059e0:	08005a09 	.word	0x08005a09
 80059e4:	08005a2d 	.word	0x08005a2d
 80059e8:	08005a43 	.word	0x08005a43
 80059ec:	08005a33 	.word	0x08005a33
 80059f0:	08005a43 	.word	0x08005a43
 80059f4:	08005a43 	.word	0x08005a43
 80059f8:	08005a43 	.word	0x08005a43
 80059fc:	08005a3b 	.word	0x08005a3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a00:	f7fe faba 	bl	8003f78 <HAL_RCC_GetPCLK1Freq>
 8005a04:	61b8      	str	r0, [r7, #24]
        break;
 8005a06:	e021      	b.n	8005a4c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a08:	f7fe fad8 	bl	8003fbc <HAL_RCC_GetPCLK2Freq>
 8005a0c:	61b8      	str	r0, [r7, #24]
        break;
 8005a0e:	e01d      	b.n	8005a4c <UART_SetConfig+0x354>
 8005a10:	40013800 	.word	0x40013800
 8005a14:	40021000 	.word	0x40021000
 8005a18:	40004400 	.word	0x40004400
 8005a1c:	40004800 	.word	0x40004800
 8005a20:	40004c00 	.word	0x40004c00
 8005a24:	40005000 	.word	0x40005000
 8005a28:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a2c:	4b1b      	ldr	r3, [pc, #108]	@ (8005a9c <UART_SetConfig+0x3a4>)
 8005a2e:	61bb      	str	r3, [r7, #24]
        break;
 8005a30:	e00c      	b.n	8005a4c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a32:	f7fe fa41 	bl	8003eb8 <HAL_RCC_GetSysClockFreq>
 8005a36:	61b8      	str	r0, [r7, #24]
        break;
 8005a38:	e008      	b.n	8005a4c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a3e:	61bb      	str	r3, [r7, #24]
        break;
 8005a40:	e004      	b.n	8005a4c <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8005a42:	2300      	movs	r3, #0
 8005a44:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	77bb      	strb	r3, [r7, #30]
        break;
 8005a4a:	bf00      	nop
    }

    if (pclk != 0U)
 8005a4c:	69bb      	ldr	r3, [r7, #24]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d018      	beq.n	8005a84 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	085a      	lsrs	r2, r3, #1
 8005a58:	69bb      	ldr	r3, [r7, #24]
 8005a5a:	441a      	add	r2, r3
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a64:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	2b0f      	cmp	r3, #15
 8005a6a:	d909      	bls.n	8005a80 <UART_SetConfig+0x388>
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a72:	d205      	bcs.n	8005a80 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	b29a      	uxth	r2, r3
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	60da      	str	r2, [r3, #12]
 8005a7e:	e001      	b.n	8005a84 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2200      	movs	r2, #0
 8005a88:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005a90:	7fbb      	ldrb	r3, [r7, #30]
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3720      	adds	r7, #32
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}
 8005a9a:	bf00      	nop
 8005a9c:	007a1200 	.word	0x007a1200

08005aa0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b083      	sub	sp, #12
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aac:	f003 0308 	and.w	r3, r3, #8
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d00a      	beq.n	8005aca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	430a      	orrs	r2, r1
 8005ac8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ace:	f003 0301 	and.w	r3, r3, #1
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d00a      	beq.n	8005aec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	430a      	orrs	r2, r1
 8005aea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005af0:	f003 0302 	and.w	r3, r3, #2
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d00a      	beq.n	8005b0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	430a      	orrs	r2, r1
 8005b0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b12:	f003 0304 	and.w	r3, r3, #4
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d00a      	beq.n	8005b30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	430a      	orrs	r2, r1
 8005b2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b34:	f003 0310 	and.w	r3, r3, #16
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d00a      	beq.n	8005b52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	430a      	orrs	r2, r1
 8005b50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b56:	f003 0320 	and.w	r3, r3, #32
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d00a      	beq.n	8005b74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	430a      	orrs	r2, r1
 8005b72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d01a      	beq.n	8005bb6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	430a      	orrs	r2, r1
 8005b94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b9e:	d10a      	bne.n	8005bb6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	430a      	orrs	r2, r1
 8005bb4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d00a      	beq.n	8005bd8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	430a      	orrs	r2, r1
 8005bd6:	605a      	str	r2, [r3, #4]
  }
}
 8005bd8:	bf00      	nop
 8005bda:	370c      	adds	r7, #12
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr

08005be4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b098      	sub	sp, #96	@ 0x60
 8005be8:	af02      	add	r7, sp, #8
 8005bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005bf4:	f7fb fa7c 	bl	80010f0 <HAL_GetTick>
 8005bf8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f003 0308 	and.w	r3, r3, #8
 8005c04:	2b08      	cmp	r3, #8
 8005c06:	d12e      	bne.n	8005c66 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c08:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005c0c:	9300      	str	r3, [sp, #0]
 8005c0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c10:	2200      	movs	r2, #0
 8005c12:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f000 f88c 	bl	8005d34 <UART_WaitOnFlagUntilTimeout>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d021      	beq.n	8005c66 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c2a:	e853 3f00 	ldrex	r3, [r3]
 8005c2e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005c30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c36:	653b      	str	r3, [r7, #80]	@ 0x50
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c40:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c42:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c44:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005c46:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c48:	e841 2300 	strex	r3, r2, [r1]
 8005c4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005c4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d1e6      	bne.n	8005c22 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2220      	movs	r2, #32
 8005c58:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c62:	2303      	movs	r3, #3
 8005c64:	e062      	b.n	8005d2c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f003 0304 	and.w	r3, r3, #4
 8005c70:	2b04      	cmp	r3, #4
 8005c72:	d149      	bne.n	8005d08 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c74:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005c78:	9300      	str	r3, [sp, #0]
 8005c7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f000 f856 	bl	8005d34 <UART_WaitOnFlagUntilTimeout>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d03c      	beq.n	8005d08 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c96:	e853 3f00 	ldrex	r3, [r3]
 8005c9a:	623b      	str	r3, [r7, #32]
   return(result);
 8005c9c:	6a3b      	ldr	r3, [r7, #32]
 8005c9e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ca2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	461a      	mov	r2, r3
 8005caa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cac:	633b      	str	r3, [r7, #48]	@ 0x30
 8005cae:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005cb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005cb4:	e841 2300 	strex	r3, r2, [r1]
 8005cb8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005cba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d1e6      	bne.n	8005c8e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	3308      	adds	r3, #8
 8005cc6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	e853 3f00 	ldrex	r3, [r3]
 8005cce:	60fb      	str	r3, [r7, #12]
   return(result);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f023 0301 	bic.w	r3, r3, #1
 8005cd6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	3308      	adds	r3, #8
 8005cde:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ce0:	61fa      	str	r2, [r7, #28]
 8005ce2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce4:	69b9      	ldr	r1, [r7, #24]
 8005ce6:	69fa      	ldr	r2, [r7, #28]
 8005ce8:	e841 2300 	strex	r3, r2, [r1]
 8005cec:	617b      	str	r3, [r7, #20]
   return(result);
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d1e5      	bne.n	8005cc0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2220      	movs	r2, #32
 8005cf8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d04:	2303      	movs	r3, #3
 8005d06:	e011      	b.n	8005d2c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2220      	movs	r2, #32
 8005d0c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2220      	movs	r2, #32
 8005d12:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2200      	movs	r2, #0
 8005d26:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005d2a:	2300      	movs	r3, #0
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3758      	adds	r7, #88	@ 0x58
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}

08005d34 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b084      	sub	sp, #16
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	60f8      	str	r0, [r7, #12]
 8005d3c:	60b9      	str	r1, [r7, #8]
 8005d3e:	603b      	str	r3, [r7, #0]
 8005d40:	4613      	mov	r3, r2
 8005d42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d44:	e04f      	b.n	8005de6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d46:	69bb      	ldr	r3, [r7, #24]
 8005d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d4c:	d04b      	beq.n	8005de6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d4e:	f7fb f9cf 	bl	80010f0 <HAL_GetTick>
 8005d52:	4602      	mov	r2, r0
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	1ad3      	subs	r3, r2, r3
 8005d58:	69ba      	ldr	r2, [r7, #24]
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d302      	bcc.n	8005d64 <UART_WaitOnFlagUntilTimeout+0x30>
 8005d5e:	69bb      	ldr	r3, [r7, #24]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d101      	bne.n	8005d68 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005d64:	2303      	movs	r3, #3
 8005d66:	e04e      	b.n	8005e06 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f003 0304 	and.w	r3, r3, #4
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d037      	beq.n	8005de6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	2b80      	cmp	r3, #128	@ 0x80
 8005d7a:	d034      	beq.n	8005de6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	2b40      	cmp	r3, #64	@ 0x40
 8005d80:	d031      	beq.n	8005de6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	69db      	ldr	r3, [r3, #28]
 8005d88:	f003 0308 	and.w	r3, r3, #8
 8005d8c:	2b08      	cmp	r3, #8
 8005d8e:	d110      	bne.n	8005db2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	2208      	movs	r2, #8
 8005d96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d98:	68f8      	ldr	r0, [r7, #12]
 8005d9a:	f000 f838 	bl	8005e0e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2208      	movs	r2, #8
 8005da2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2200      	movs	r2, #0
 8005daa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
 8005db0:	e029      	b.n	8005e06 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	69db      	ldr	r3, [r3, #28]
 8005db8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005dbc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005dc0:	d111      	bne.n	8005de6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005dca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005dcc:	68f8      	ldr	r0, [r7, #12]
 8005dce:	f000 f81e 	bl	8005e0e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2220      	movs	r2, #32
 8005dd6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005de2:	2303      	movs	r3, #3
 8005de4:	e00f      	b.n	8005e06 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	69da      	ldr	r2, [r3, #28]
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	4013      	ands	r3, r2
 8005df0:	68ba      	ldr	r2, [r7, #8]
 8005df2:	429a      	cmp	r2, r3
 8005df4:	bf0c      	ite	eq
 8005df6:	2301      	moveq	r3, #1
 8005df8:	2300      	movne	r3, #0
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	461a      	mov	r2, r3
 8005dfe:	79fb      	ldrb	r3, [r7, #7]
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d0a0      	beq.n	8005d46 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e04:	2300      	movs	r3, #0
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3710      	adds	r7, #16
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}

08005e0e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e0e:	b480      	push	{r7}
 8005e10:	b095      	sub	sp, #84	@ 0x54
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e1e:	e853 3f00 	ldrex	r3, [r3]
 8005e22:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005e24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e26:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	461a      	mov	r2, r3
 8005e32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e34:	643b      	str	r3, [r7, #64]	@ 0x40
 8005e36:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e38:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005e3a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005e3c:	e841 2300 	strex	r3, r2, [r1]
 8005e40:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005e42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d1e6      	bne.n	8005e16 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	3308      	adds	r3, #8
 8005e4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e50:	6a3b      	ldr	r3, [r7, #32]
 8005e52:	e853 3f00 	ldrex	r3, [r3]
 8005e56:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e58:	69fb      	ldr	r3, [r7, #28]
 8005e5a:	f023 0301 	bic.w	r3, r3, #1
 8005e5e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	3308      	adds	r3, #8
 8005e66:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005e68:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005e6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e6c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e70:	e841 2300 	strex	r3, r2, [r1]
 8005e74:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d1e5      	bne.n	8005e48 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d118      	bne.n	8005eb6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	e853 3f00 	ldrex	r3, [r3]
 8005e90:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	f023 0310 	bic.w	r3, r3, #16
 8005e98:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ea2:	61bb      	str	r3, [r7, #24]
 8005ea4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ea6:	6979      	ldr	r1, [r7, #20]
 8005ea8:	69ba      	ldr	r2, [r7, #24]
 8005eaa:	e841 2300 	strex	r3, r2, [r1]
 8005eae:	613b      	str	r3, [r7, #16]
   return(result);
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d1e6      	bne.n	8005e84 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2220      	movs	r2, #32
 8005eba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005eca:	bf00      	nop
 8005ecc:	3754      	adds	r7, #84	@ 0x54
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr

08005ed6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005ed6:	b480      	push	{r7}
 8005ed8:	b085      	sub	sp, #20
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005ede:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8005ee2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005eea:	b29a      	uxth	r2, r3
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	43db      	mvns	r3, r3
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	4013      	ands	r3, r2
 8005ef6:	b29a      	uxth	r2, r3
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005efe:	2300      	movs	r3, #0
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	3714      	adds	r7, #20
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr

08005f0c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b085      	sub	sp, #20
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	60f8      	str	r0, [r7, #12]
 8005f14:	1d3b      	adds	r3, r7, #4
 8005f16:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2200      	movs	r2, #0
 8005f26:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2200      	movs	r2, #0
 8005f36:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005f3a:	2300      	movs	r3, #0
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3714      	adds	r7, #20
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr

08005f48 <std>:
 8005f48:	2300      	movs	r3, #0
 8005f4a:	b510      	push	{r4, lr}
 8005f4c:	4604      	mov	r4, r0
 8005f4e:	e9c0 3300 	strd	r3, r3, [r0]
 8005f52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005f56:	6083      	str	r3, [r0, #8]
 8005f58:	8181      	strh	r1, [r0, #12]
 8005f5a:	6643      	str	r3, [r0, #100]	@ 0x64
 8005f5c:	81c2      	strh	r2, [r0, #14]
 8005f5e:	6183      	str	r3, [r0, #24]
 8005f60:	4619      	mov	r1, r3
 8005f62:	2208      	movs	r2, #8
 8005f64:	305c      	adds	r0, #92	@ 0x5c
 8005f66:	f000 f906 	bl	8006176 <memset>
 8005f6a:	4b0d      	ldr	r3, [pc, #52]	@ (8005fa0 <std+0x58>)
 8005f6c:	6263      	str	r3, [r4, #36]	@ 0x24
 8005f6e:	4b0d      	ldr	r3, [pc, #52]	@ (8005fa4 <std+0x5c>)
 8005f70:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005f72:	4b0d      	ldr	r3, [pc, #52]	@ (8005fa8 <std+0x60>)
 8005f74:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005f76:	4b0d      	ldr	r3, [pc, #52]	@ (8005fac <std+0x64>)
 8005f78:	6323      	str	r3, [r4, #48]	@ 0x30
 8005f7a:	4b0d      	ldr	r3, [pc, #52]	@ (8005fb0 <std+0x68>)
 8005f7c:	6224      	str	r4, [r4, #32]
 8005f7e:	429c      	cmp	r4, r3
 8005f80:	d006      	beq.n	8005f90 <std+0x48>
 8005f82:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005f86:	4294      	cmp	r4, r2
 8005f88:	d002      	beq.n	8005f90 <std+0x48>
 8005f8a:	33d0      	adds	r3, #208	@ 0xd0
 8005f8c:	429c      	cmp	r4, r3
 8005f8e:	d105      	bne.n	8005f9c <std+0x54>
 8005f90:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005f94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f98:	f000 b966 	b.w	8006268 <__retarget_lock_init_recursive>
 8005f9c:	bd10      	pop	{r4, pc}
 8005f9e:	bf00      	nop
 8005fa0:	080060f1 	.word	0x080060f1
 8005fa4:	08006113 	.word	0x08006113
 8005fa8:	0800614b 	.word	0x0800614b
 8005fac:	0800616f 	.word	0x0800616f
 8005fb0:	20000608 	.word	0x20000608

08005fb4 <stdio_exit_handler>:
 8005fb4:	4a02      	ldr	r2, [pc, #8]	@ (8005fc0 <stdio_exit_handler+0xc>)
 8005fb6:	4903      	ldr	r1, [pc, #12]	@ (8005fc4 <stdio_exit_handler+0x10>)
 8005fb8:	4803      	ldr	r0, [pc, #12]	@ (8005fc8 <stdio_exit_handler+0x14>)
 8005fba:	f000 b869 	b.w	8006090 <_fwalk_sglue>
 8005fbe:	bf00      	nop
 8005fc0:	2000003c 	.word	0x2000003c
 8005fc4:	08006b09 	.word	0x08006b09
 8005fc8:	2000004c 	.word	0x2000004c

08005fcc <cleanup_stdio>:
 8005fcc:	6841      	ldr	r1, [r0, #4]
 8005fce:	4b0c      	ldr	r3, [pc, #48]	@ (8006000 <cleanup_stdio+0x34>)
 8005fd0:	4299      	cmp	r1, r3
 8005fd2:	b510      	push	{r4, lr}
 8005fd4:	4604      	mov	r4, r0
 8005fd6:	d001      	beq.n	8005fdc <cleanup_stdio+0x10>
 8005fd8:	f000 fd96 	bl	8006b08 <_fflush_r>
 8005fdc:	68a1      	ldr	r1, [r4, #8]
 8005fde:	4b09      	ldr	r3, [pc, #36]	@ (8006004 <cleanup_stdio+0x38>)
 8005fe0:	4299      	cmp	r1, r3
 8005fe2:	d002      	beq.n	8005fea <cleanup_stdio+0x1e>
 8005fe4:	4620      	mov	r0, r4
 8005fe6:	f000 fd8f 	bl	8006b08 <_fflush_r>
 8005fea:	68e1      	ldr	r1, [r4, #12]
 8005fec:	4b06      	ldr	r3, [pc, #24]	@ (8006008 <cleanup_stdio+0x3c>)
 8005fee:	4299      	cmp	r1, r3
 8005ff0:	d004      	beq.n	8005ffc <cleanup_stdio+0x30>
 8005ff2:	4620      	mov	r0, r4
 8005ff4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ff8:	f000 bd86 	b.w	8006b08 <_fflush_r>
 8005ffc:	bd10      	pop	{r4, pc}
 8005ffe:	bf00      	nop
 8006000:	20000608 	.word	0x20000608
 8006004:	20000670 	.word	0x20000670
 8006008:	200006d8 	.word	0x200006d8

0800600c <global_stdio_init.part.0>:
 800600c:	b510      	push	{r4, lr}
 800600e:	4b0b      	ldr	r3, [pc, #44]	@ (800603c <global_stdio_init.part.0+0x30>)
 8006010:	4c0b      	ldr	r4, [pc, #44]	@ (8006040 <global_stdio_init.part.0+0x34>)
 8006012:	4a0c      	ldr	r2, [pc, #48]	@ (8006044 <global_stdio_init.part.0+0x38>)
 8006014:	601a      	str	r2, [r3, #0]
 8006016:	4620      	mov	r0, r4
 8006018:	2200      	movs	r2, #0
 800601a:	2104      	movs	r1, #4
 800601c:	f7ff ff94 	bl	8005f48 <std>
 8006020:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006024:	2201      	movs	r2, #1
 8006026:	2109      	movs	r1, #9
 8006028:	f7ff ff8e 	bl	8005f48 <std>
 800602c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006030:	2202      	movs	r2, #2
 8006032:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006036:	2112      	movs	r1, #18
 8006038:	f7ff bf86 	b.w	8005f48 <std>
 800603c:	20000740 	.word	0x20000740
 8006040:	20000608 	.word	0x20000608
 8006044:	08005fb5 	.word	0x08005fb5

08006048 <__sfp_lock_acquire>:
 8006048:	4801      	ldr	r0, [pc, #4]	@ (8006050 <__sfp_lock_acquire+0x8>)
 800604a:	f000 b90e 	b.w	800626a <__retarget_lock_acquire_recursive>
 800604e:	bf00      	nop
 8006050:	20000749 	.word	0x20000749

08006054 <__sfp_lock_release>:
 8006054:	4801      	ldr	r0, [pc, #4]	@ (800605c <__sfp_lock_release+0x8>)
 8006056:	f000 b909 	b.w	800626c <__retarget_lock_release_recursive>
 800605a:	bf00      	nop
 800605c:	20000749 	.word	0x20000749

08006060 <__sinit>:
 8006060:	b510      	push	{r4, lr}
 8006062:	4604      	mov	r4, r0
 8006064:	f7ff fff0 	bl	8006048 <__sfp_lock_acquire>
 8006068:	6a23      	ldr	r3, [r4, #32]
 800606a:	b11b      	cbz	r3, 8006074 <__sinit+0x14>
 800606c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006070:	f7ff bff0 	b.w	8006054 <__sfp_lock_release>
 8006074:	4b04      	ldr	r3, [pc, #16]	@ (8006088 <__sinit+0x28>)
 8006076:	6223      	str	r3, [r4, #32]
 8006078:	4b04      	ldr	r3, [pc, #16]	@ (800608c <__sinit+0x2c>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d1f5      	bne.n	800606c <__sinit+0xc>
 8006080:	f7ff ffc4 	bl	800600c <global_stdio_init.part.0>
 8006084:	e7f2      	b.n	800606c <__sinit+0xc>
 8006086:	bf00      	nop
 8006088:	08005fcd 	.word	0x08005fcd
 800608c:	20000740 	.word	0x20000740

08006090 <_fwalk_sglue>:
 8006090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006094:	4607      	mov	r7, r0
 8006096:	4688      	mov	r8, r1
 8006098:	4614      	mov	r4, r2
 800609a:	2600      	movs	r6, #0
 800609c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80060a0:	f1b9 0901 	subs.w	r9, r9, #1
 80060a4:	d505      	bpl.n	80060b2 <_fwalk_sglue+0x22>
 80060a6:	6824      	ldr	r4, [r4, #0]
 80060a8:	2c00      	cmp	r4, #0
 80060aa:	d1f7      	bne.n	800609c <_fwalk_sglue+0xc>
 80060ac:	4630      	mov	r0, r6
 80060ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060b2:	89ab      	ldrh	r3, [r5, #12]
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d907      	bls.n	80060c8 <_fwalk_sglue+0x38>
 80060b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80060bc:	3301      	adds	r3, #1
 80060be:	d003      	beq.n	80060c8 <_fwalk_sglue+0x38>
 80060c0:	4629      	mov	r1, r5
 80060c2:	4638      	mov	r0, r7
 80060c4:	47c0      	blx	r8
 80060c6:	4306      	orrs	r6, r0
 80060c8:	3568      	adds	r5, #104	@ 0x68
 80060ca:	e7e9      	b.n	80060a0 <_fwalk_sglue+0x10>

080060cc <iprintf>:
 80060cc:	b40f      	push	{r0, r1, r2, r3}
 80060ce:	b507      	push	{r0, r1, r2, lr}
 80060d0:	4906      	ldr	r1, [pc, #24]	@ (80060ec <iprintf+0x20>)
 80060d2:	ab04      	add	r3, sp, #16
 80060d4:	6808      	ldr	r0, [r1, #0]
 80060d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80060da:	6881      	ldr	r1, [r0, #8]
 80060dc:	9301      	str	r3, [sp, #4]
 80060de:	f000 f9e9 	bl	80064b4 <_vfiprintf_r>
 80060e2:	b003      	add	sp, #12
 80060e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80060e8:	b004      	add	sp, #16
 80060ea:	4770      	bx	lr
 80060ec:	20000048 	.word	0x20000048

080060f0 <__sread>:
 80060f0:	b510      	push	{r4, lr}
 80060f2:	460c      	mov	r4, r1
 80060f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060f8:	f000 f868 	bl	80061cc <_read_r>
 80060fc:	2800      	cmp	r0, #0
 80060fe:	bfab      	itete	ge
 8006100:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006102:	89a3      	ldrhlt	r3, [r4, #12]
 8006104:	181b      	addge	r3, r3, r0
 8006106:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800610a:	bfac      	ite	ge
 800610c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800610e:	81a3      	strhlt	r3, [r4, #12]
 8006110:	bd10      	pop	{r4, pc}

08006112 <__swrite>:
 8006112:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006116:	461f      	mov	r7, r3
 8006118:	898b      	ldrh	r3, [r1, #12]
 800611a:	05db      	lsls	r3, r3, #23
 800611c:	4605      	mov	r5, r0
 800611e:	460c      	mov	r4, r1
 8006120:	4616      	mov	r6, r2
 8006122:	d505      	bpl.n	8006130 <__swrite+0x1e>
 8006124:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006128:	2302      	movs	r3, #2
 800612a:	2200      	movs	r2, #0
 800612c:	f000 f83c 	bl	80061a8 <_lseek_r>
 8006130:	89a3      	ldrh	r3, [r4, #12]
 8006132:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006136:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800613a:	81a3      	strh	r3, [r4, #12]
 800613c:	4632      	mov	r2, r6
 800613e:	463b      	mov	r3, r7
 8006140:	4628      	mov	r0, r5
 8006142:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006146:	f000 b853 	b.w	80061f0 <_write_r>

0800614a <__sseek>:
 800614a:	b510      	push	{r4, lr}
 800614c:	460c      	mov	r4, r1
 800614e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006152:	f000 f829 	bl	80061a8 <_lseek_r>
 8006156:	1c43      	adds	r3, r0, #1
 8006158:	89a3      	ldrh	r3, [r4, #12]
 800615a:	bf15      	itete	ne
 800615c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800615e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006162:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006166:	81a3      	strheq	r3, [r4, #12]
 8006168:	bf18      	it	ne
 800616a:	81a3      	strhne	r3, [r4, #12]
 800616c:	bd10      	pop	{r4, pc}

0800616e <__sclose>:
 800616e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006172:	f000 b809 	b.w	8006188 <_close_r>

08006176 <memset>:
 8006176:	4402      	add	r2, r0
 8006178:	4603      	mov	r3, r0
 800617a:	4293      	cmp	r3, r2
 800617c:	d100      	bne.n	8006180 <memset+0xa>
 800617e:	4770      	bx	lr
 8006180:	f803 1b01 	strb.w	r1, [r3], #1
 8006184:	e7f9      	b.n	800617a <memset+0x4>
	...

08006188 <_close_r>:
 8006188:	b538      	push	{r3, r4, r5, lr}
 800618a:	4d06      	ldr	r5, [pc, #24]	@ (80061a4 <_close_r+0x1c>)
 800618c:	2300      	movs	r3, #0
 800618e:	4604      	mov	r4, r0
 8006190:	4608      	mov	r0, r1
 8006192:	602b      	str	r3, [r5, #0]
 8006194:	f7fa feac 	bl	8000ef0 <_close>
 8006198:	1c43      	adds	r3, r0, #1
 800619a:	d102      	bne.n	80061a2 <_close_r+0x1a>
 800619c:	682b      	ldr	r3, [r5, #0]
 800619e:	b103      	cbz	r3, 80061a2 <_close_r+0x1a>
 80061a0:	6023      	str	r3, [r4, #0]
 80061a2:	bd38      	pop	{r3, r4, r5, pc}
 80061a4:	20000744 	.word	0x20000744

080061a8 <_lseek_r>:
 80061a8:	b538      	push	{r3, r4, r5, lr}
 80061aa:	4d07      	ldr	r5, [pc, #28]	@ (80061c8 <_lseek_r+0x20>)
 80061ac:	4604      	mov	r4, r0
 80061ae:	4608      	mov	r0, r1
 80061b0:	4611      	mov	r1, r2
 80061b2:	2200      	movs	r2, #0
 80061b4:	602a      	str	r2, [r5, #0]
 80061b6:	461a      	mov	r2, r3
 80061b8:	f7fa fec1 	bl	8000f3e <_lseek>
 80061bc:	1c43      	adds	r3, r0, #1
 80061be:	d102      	bne.n	80061c6 <_lseek_r+0x1e>
 80061c0:	682b      	ldr	r3, [r5, #0]
 80061c2:	b103      	cbz	r3, 80061c6 <_lseek_r+0x1e>
 80061c4:	6023      	str	r3, [r4, #0]
 80061c6:	bd38      	pop	{r3, r4, r5, pc}
 80061c8:	20000744 	.word	0x20000744

080061cc <_read_r>:
 80061cc:	b538      	push	{r3, r4, r5, lr}
 80061ce:	4d07      	ldr	r5, [pc, #28]	@ (80061ec <_read_r+0x20>)
 80061d0:	4604      	mov	r4, r0
 80061d2:	4608      	mov	r0, r1
 80061d4:	4611      	mov	r1, r2
 80061d6:	2200      	movs	r2, #0
 80061d8:	602a      	str	r2, [r5, #0]
 80061da:	461a      	mov	r2, r3
 80061dc:	f7fa fe4f 	bl	8000e7e <_read>
 80061e0:	1c43      	adds	r3, r0, #1
 80061e2:	d102      	bne.n	80061ea <_read_r+0x1e>
 80061e4:	682b      	ldr	r3, [r5, #0]
 80061e6:	b103      	cbz	r3, 80061ea <_read_r+0x1e>
 80061e8:	6023      	str	r3, [r4, #0]
 80061ea:	bd38      	pop	{r3, r4, r5, pc}
 80061ec:	20000744 	.word	0x20000744

080061f0 <_write_r>:
 80061f0:	b538      	push	{r3, r4, r5, lr}
 80061f2:	4d07      	ldr	r5, [pc, #28]	@ (8006210 <_write_r+0x20>)
 80061f4:	4604      	mov	r4, r0
 80061f6:	4608      	mov	r0, r1
 80061f8:	4611      	mov	r1, r2
 80061fa:	2200      	movs	r2, #0
 80061fc:	602a      	str	r2, [r5, #0]
 80061fe:	461a      	mov	r2, r3
 8006200:	f7fa fe5a 	bl	8000eb8 <_write>
 8006204:	1c43      	adds	r3, r0, #1
 8006206:	d102      	bne.n	800620e <_write_r+0x1e>
 8006208:	682b      	ldr	r3, [r5, #0]
 800620a:	b103      	cbz	r3, 800620e <_write_r+0x1e>
 800620c:	6023      	str	r3, [r4, #0]
 800620e:	bd38      	pop	{r3, r4, r5, pc}
 8006210:	20000744 	.word	0x20000744

08006214 <__errno>:
 8006214:	4b01      	ldr	r3, [pc, #4]	@ (800621c <__errno+0x8>)
 8006216:	6818      	ldr	r0, [r3, #0]
 8006218:	4770      	bx	lr
 800621a:	bf00      	nop
 800621c:	20000048 	.word	0x20000048

08006220 <__libc_init_array>:
 8006220:	b570      	push	{r4, r5, r6, lr}
 8006222:	4d0d      	ldr	r5, [pc, #52]	@ (8006258 <__libc_init_array+0x38>)
 8006224:	4c0d      	ldr	r4, [pc, #52]	@ (800625c <__libc_init_array+0x3c>)
 8006226:	1b64      	subs	r4, r4, r5
 8006228:	10a4      	asrs	r4, r4, #2
 800622a:	2600      	movs	r6, #0
 800622c:	42a6      	cmp	r6, r4
 800622e:	d109      	bne.n	8006244 <__libc_init_array+0x24>
 8006230:	4d0b      	ldr	r5, [pc, #44]	@ (8006260 <__libc_init_array+0x40>)
 8006232:	4c0c      	ldr	r4, [pc, #48]	@ (8006264 <__libc_init_array+0x44>)
 8006234:	f000 fddc 	bl	8006df0 <_init>
 8006238:	1b64      	subs	r4, r4, r5
 800623a:	10a4      	asrs	r4, r4, #2
 800623c:	2600      	movs	r6, #0
 800623e:	42a6      	cmp	r6, r4
 8006240:	d105      	bne.n	800624e <__libc_init_array+0x2e>
 8006242:	bd70      	pop	{r4, r5, r6, pc}
 8006244:	f855 3b04 	ldr.w	r3, [r5], #4
 8006248:	4798      	blx	r3
 800624a:	3601      	adds	r6, #1
 800624c:	e7ee      	b.n	800622c <__libc_init_array+0xc>
 800624e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006252:	4798      	blx	r3
 8006254:	3601      	adds	r6, #1
 8006256:	e7f2      	b.n	800623e <__libc_init_array+0x1e>
 8006258:	08006e8c 	.word	0x08006e8c
 800625c:	08006e8c 	.word	0x08006e8c
 8006260:	08006e8c 	.word	0x08006e8c
 8006264:	08006e90 	.word	0x08006e90

08006268 <__retarget_lock_init_recursive>:
 8006268:	4770      	bx	lr

0800626a <__retarget_lock_acquire_recursive>:
 800626a:	4770      	bx	lr

0800626c <__retarget_lock_release_recursive>:
 800626c:	4770      	bx	lr
	...

08006270 <_free_r>:
 8006270:	b538      	push	{r3, r4, r5, lr}
 8006272:	4605      	mov	r5, r0
 8006274:	2900      	cmp	r1, #0
 8006276:	d041      	beq.n	80062fc <_free_r+0x8c>
 8006278:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800627c:	1f0c      	subs	r4, r1, #4
 800627e:	2b00      	cmp	r3, #0
 8006280:	bfb8      	it	lt
 8006282:	18e4      	addlt	r4, r4, r3
 8006284:	f000 f8e0 	bl	8006448 <__malloc_lock>
 8006288:	4a1d      	ldr	r2, [pc, #116]	@ (8006300 <_free_r+0x90>)
 800628a:	6813      	ldr	r3, [r2, #0]
 800628c:	b933      	cbnz	r3, 800629c <_free_r+0x2c>
 800628e:	6063      	str	r3, [r4, #4]
 8006290:	6014      	str	r4, [r2, #0]
 8006292:	4628      	mov	r0, r5
 8006294:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006298:	f000 b8dc 	b.w	8006454 <__malloc_unlock>
 800629c:	42a3      	cmp	r3, r4
 800629e:	d908      	bls.n	80062b2 <_free_r+0x42>
 80062a0:	6820      	ldr	r0, [r4, #0]
 80062a2:	1821      	adds	r1, r4, r0
 80062a4:	428b      	cmp	r3, r1
 80062a6:	bf01      	itttt	eq
 80062a8:	6819      	ldreq	r1, [r3, #0]
 80062aa:	685b      	ldreq	r3, [r3, #4]
 80062ac:	1809      	addeq	r1, r1, r0
 80062ae:	6021      	streq	r1, [r4, #0]
 80062b0:	e7ed      	b.n	800628e <_free_r+0x1e>
 80062b2:	461a      	mov	r2, r3
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	b10b      	cbz	r3, 80062bc <_free_r+0x4c>
 80062b8:	42a3      	cmp	r3, r4
 80062ba:	d9fa      	bls.n	80062b2 <_free_r+0x42>
 80062bc:	6811      	ldr	r1, [r2, #0]
 80062be:	1850      	adds	r0, r2, r1
 80062c0:	42a0      	cmp	r0, r4
 80062c2:	d10b      	bne.n	80062dc <_free_r+0x6c>
 80062c4:	6820      	ldr	r0, [r4, #0]
 80062c6:	4401      	add	r1, r0
 80062c8:	1850      	adds	r0, r2, r1
 80062ca:	4283      	cmp	r3, r0
 80062cc:	6011      	str	r1, [r2, #0]
 80062ce:	d1e0      	bne.n	8006292 <_free_r+0x22>
 80062d0:	6818      	ldr	r0, [r3, #0]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	6053      	str	r3, [r2, #4]
 80062d6:	4408      	add	r0, r1
 80062d8:	6010      	str	r0, [r2, #0]
 80062da:	e7da      	b.n	8006292 <_free_r+0x22>
 80062dc:	d902      	bls.n	80062e4 <_free_r+0x74>
 80062de:	230c      	movs	r3, #12
 80062e0:	602b      	str	r3, [r5, #0]
 80062e2:	e7d6      	b.n	8006292 <_free_r+0x22>
 80062e4:	6820      	ldr	r0, [r4, #0]
 80062e6:	1821      	adds	r1, r4, r0
 80062e8:	428b      	cmp	r3, r1
 80062ea:	bf04      	itt	eq
 80062ec:	6819      	ldreq	r1, [r3, #0]
 80062ee:	685b      	ldreq	r3, [r3, #4]
 80062f0:	6063      	str	r3, [r4, #4]
 80062f2:	bf04      	itt	eq
 80062f4:	1809      	addeq	r1, r1, r0
 80062f6:	6021      	streq	r1, [r4, #0]
 80062f8:	6054      	str	r4, [r2, #4]
 80062fa:	e7ca      	b.n	8006292 <_free_r+0x22>
 80062fc:	bd38      	pop	{r3, r4, r5, pc}
 80062fe:	bf00      	nop
 8006300:	20000750 	.word	0x20000750

08006304 <sbrk_aligned>:
 8006304:	b570      	push	{r4, r5, r6, lr}
 8006306:	4e0f      	ldr	r6, [pc, #60]	@ (8006344 <sbrk_aligned+0x40>)
 8006308:	460c      	mov	r4, r1
 800630a:	6831      	ldr	r1, [r6, #0]
 800630c:	4605      	mov	r5, r0
 800630e:	b911      	cbnz	r1, 8006316 <sbrk_aligned+0x12>
 8006310:	f000 fcb6 	bl	8006c80 <_sbrk_r>
 8006314:	6030      	str	r0, [r6, #0]
 8006316:	4621      	mov	r1, r4
 8006318:	4628      	mov	r0, r5
 800631a:	f000 fcb1 	bl	8006c80 <_sbrk_r>
 800631e:	1c43      	adds	r3, r0, #1
 8006320:	d103      	bne.n	800632a <sbrk_aligned+0x26>
 8006322:	f04f 34ff 	mov.w	r4, #4294967295
 8006326:	4620      	mov	r0, r4
 8006328:	bd70      	pop	{r4, r5, r6, pc}
 800632a:	1cc4      	adds	r4, r0, #3
 800632c:	f024 0403 	bic.w	r4, r4, #3
 8006330:	42a0      	cmp	r0, r4
 8006332:	d0f8      	beq.n	8006326 <sbrk_aligned+0x22>
 8006334:	1a21      	subs	r1, r4, r0
 8006336:	4628      	mov	r0, r5
 8006338:	f000 fca2 	bl	8006c80 <_sbrk_r>
 800633c:	3001      	adds	r0, #1
 800633e:	d1f2      	bne.n	8006326 <sbrk_aligned+0x22>
 8006340:	e7ef      	b.n	8006322 <sbrk_aligned+0x1e>
 8006342:	bf00      	nop
 8006344:	2000074c 	.word	0x2000074c

08006348 <_malloc_r>:
 8006348:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800634c:	1ccd      	adds	r5, r1, #3
 800634e:	f025 0503 	bic.w	r5, r5, #3
 8006352:	3508      	adds	r5, #8
 8006354:	2d0c      	cmp	r5, #12
 8006356:	bf38      	it	cc
 8006358:	250c      	movcc	r5, #12
 800635a:	2d00      	cmp	r5, #0
 800635c:	4606      	mov	r6, r0
 800635e:	db01      	blt.n	8006364 <_malloc_r+0x1c>
 8006360:	42a9      	cmp	r1, r5
 8006362:	d904      	bls.n	800636e <_malloc_r+0x26>
 8006364:	230c      	movs	r3, #12
 8006366:	6033      	str	r3, [r6, #0]
 8006368:	2000      	movs	r0, #0
 800636a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800636e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006444 <_malloc_r+0xfc>
 8006372:	f000 f869 	bl	8006448 <__malloc_lock>
 8006376:	f8d8 3000 	ldr.w	r3, [r8]
 800637a:	461c      	mov	r4, r3
 800637c:	bb44      	cbnz	r4, 80063d0 <_malloc_r+0x88>
 800637e:	4629      	mov	r1, r5
 8006380:	4630      	mov	r0, r6
 8006382:	f7ff ffbf 	bl	8006304 <sbrk_aligned>
 8006386:	1c43      	adds	r3, r0, #1
 8006388:	4604      	mov	r4, r0
 800638a:	d158      	bne.n	800643e <_malloc_r+0xf6>
 800638c:	f8d8 4000 	ldr.w	r4, [r8]
 8006390:	4627      	mov	r7, r4
 8006392:	2f00      	cmp	r7, #0
 8006394:	d143      	bne.n	800641e <_malloc_r+0xd6>
 8006396:	2c00      	cmp	r4, #0
 8006398:	d04b      	beq.n	8006432 <_malloc_r+0xea>
 800639a:	6823      	ldr	r3, [r4, #0]
 800639c:	4639      	mov	r1, r7
 800639e:	4630      	mov	r0, r6
 80063a0:	eb04 0903 	add.w	r9, r4, r3
 80063a4:	f000 fc6c 	bl	8006c80 <_sbrk_r>
 80063a8:	4581      	cmp	r9, r0
 80063aa:	d142      	bne.n	8006432 <_malloc_r+0xea>
 80063ac:	6821      	ldr	r1, [r4, #0]
 80063ae:	1a6d      	subs	r5, r5, r1
 80063b0:	4629      	mov	r1, r5
 80063b2:	4630      	mov	r0, r6
 80063b4:	f7ff ffa6 	bl	8006304 <sbrk_aligned>
 80063b8:	3001      	adds	r0, #1
 80063ba:	d03a      	beq.n	8006432 <_malloc_r+0xea>
 80063bc:	6823      	ldr	r3, [r4, #0]
 80063be:	442b      	add	r3, r5
 80063c0:	6023      	str	r3, [r4, #0]
 80063c2:	f8d8 3000 	ldr.w	r3, [r8]
 80063c6:	685a      	ldr	r2, [r3, #4]
 80063c8:	bb62      	cbnz	r2, 8006424 <_malloc_r+0xdc>
 80063ca:	f8c8 7000 	str.w	r7, [r8]
 80063ce:	e00f      	b.n	80063f0 <_malloc_r+0xa8>
 80063d0:	6822      	ldr	r2, [r4, #0]
 80063d2:	1b52      	subs	r2, r2, r5
 80063d4:	d420      	bmi.n	8006418 <_malloc_r+0xd0>
 80063d6:	2a0b      	cmp	r2, #11
 80063d8:	d917      	bls.n	800640a <_malloc_r+0xc2>
 80063da:	1961      	adds	r1, r4, r5
 80063dc:	42a3      	cmp	r3, r4
 80063de:	6025      	str	r5, [r4, #0]
 80063e0:	bf18      	it	ne
 80063e2:	6059      	strne	r1, [r3, #4]
 80063e4:	6863      	ldr	r3, [r4, #4]
 80063e6:	bf08      	it	eq
 80063e8:	f8c8 1000 	streq.w	r1, [r8]
 80063ec:	5162      	str	r2, [r4, r5]
 80063ee:	604b      	str	r3, [r1, #4]
 80063f0:	4630      	mov	r0, r6
 80063f2:	f000 f82f 	bl	8006454 <__malloc_unlock>
 80063f6:	f104 000b 	add.w	r0, r4, #11
 80063fa:	1d23      	adds	r3, r4, #4
 80063fc:	f020 0007 	bic.w	r0, r0, #7
 8006400:	1ac2      	subs	r2, r0, r3
 8006402:	bf1c      	itt	ne
 8006404:	1a1b      	subne	r3, r3, r0
 8006406:	50a3      	strne	r3, [r4, r2]
 8006408:	e7af      	b.n	800636a <_malloc_r+0x22>
 800640a:	6862      	ldr	r2, [r4, #4]
 800640c:	42a3      	cmp	r3, r4
 800640e:	bf0c      	ite	eq
 8006410:	f8c8 2000 	streq.w	r2, [r8]
 8006414:	605a      	strne	r2, [r3, #4]
 8006416:	e7eb      	b.n	80063f0 <_malloc_r+0xa8>
 8006418:	4623      	mov	r3, r4
 800641a:	6864      	ldr	r4, [r4, #4]
 800641c:	e7ae      	b.n	800637c <_malloc_r+0x34>
 800641e:	463c      	mov	r4, r7
 8006420:	687f      	ldr	r7, [r7, #4]
 8006422:	e7b6      	b.n	8006392 <_malloc_r+0x4a>
 8006424:	461a      	mov	r2, r3
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	42a3      	cmp	r3, r4
 800642a:	d1fb      	bne.n	8006424 <_malloc_r+0xdc>
 800642c:	2300      	movs	r3, #0
 800642e:	6053      	str	r3, [r2, #4]
 8006430:	e7de      	b.n	80063f0 <_malloc_r+0xa8>
 8006432:	230c      	movs	r3, #12
 8006434:	6033      	str	r3, [r6, #0]
 8006436:	4630      	mov	r0, r6
 8006438:	f000 f80c 	bl	8006454 <__malloc_unlock>
 800643c:	e794      	b.n	8006368 <_malloc_r+0x20>
 800643e:	6005      	str	r5, [r0, #0]
 8006440:	e7d6      	b.n	80063f0 <_malloc_r+0xa8>
 8006442:	bf00      	nop
 8006444:	20000750 	.word	0x20000750

08006448 <__malloc_lock>:
 8006448:	4801      	ldr	r0, [pc, #4]	@ (8006450 <__malloc_lock+0x8>)
 800644a:	f7ff bf0e 	b.w	800626a <__retarget_lock_acquire_recursive>
 800644e:	bf00      	nop
 8006450:	20000748 	.word	0x20000748

08006454 <__malloc_unlock>:
 8006454:	4801      	ldr	r0, [pc, #4]	@ (800645c <__malloc_unlock+0x8>)
 8006456:	f7ff bf09 	b.w	800626c <__retarget_lock_release_recursive>
 800645a:	bf00      	nop
 800645c:	20000748 	.word	0x20000748

08006460 <__sfputc_r>:
 8006460:	6893      	ldr	r3, [r2, #8]
 8006462:	3b01      	subs	r3, #1
 8006464:	2b00      	cmp	r3, #0
 8006466:	b410      	push	{r4}
 8006468:	6093      	str	r3, [r2, #8]
 800646a:	da08      	bge.n	800647e <__sfputc_r+0x1e>
 800646c:	6994      	ldr	r4, [r2, #24]
 800646e:	42a3      	cmp	r3, r4
 8006470:	db01      	blt.n	8006476 <__sfputc_r+0x16>
 8006472:	290a      	cmp	r1, #10
 8006474:	d103      	bne.n	800647e <__sfputc_r+0x1e>
 8006476:	f85d 4b04 	ldr.w	r4, [sp], #4
 800647a:	f000 bb6d 	b.w	8006b58 <__swbuf_r>
 800647e:	6813      	ldr	r3, [r2, #0]
 8006480:	1c58      	adds	r0, r3, #1
 8006482:	6010      	str	r0, [r2, #0]
 8006484:	7019      	strb	r1, [r3, #0]
 8006486:	4608      	mov	r0, r1
 8006488:	f85d 4b04 	ldr.w	r4, [sp], #4
 800648c:	4770      	bx	lr

0800648e <__sfputs_r>:
 800648e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006490:	4606      	mov	r6, r0
 8006492:	460f      	mov	r7, r1
 8006494:	4614      	mov	r4, r2
 8006496:	18d5      	adds	r5, r2, r3
 8006498:	42ac      	cmp	r4, r5
 800649a:	d101      	bne.n	80064a0 <__sfputs_r+0x12>
 800649c:	2000      	movs	r0, #0
 800649e:	e007      	b.n	80064b0 <__sfputs_r+0x22>
 80064a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064a4:	463a      	mov	r2, r7
 80064a6:	4630      	mov	r0, r6
 80064a8:	f7ff ffda 	bl	8006460 <__sfputc_r>
 80064ac:	1c43      	adds	r3, r0, #1
 80064ae:	d1f3      	bne.n	8006498 <__sfputs_r+0xa>
 80064b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080064b4 <_vfiprintf_r>:
 80064b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064b8:	460d      	mov	r5, r1
 80064ba:	b09d      	sub	sp, #116	@ 0x74
 80064bc:	4614      	mov	r4, r2
 80064be:	4698      	mov	r8, r3
 80064c0:	4606      	mov	r6, r0
 80064c2:	b118      	cbz	r0, 80064cc <_vfiprintf_r+0x18>
 80064c4:	6a03      	ldr	r3, [r0, #32]
 80064c6:	b90b      	cbnz	r3, 80064cc <_vfiprintf_r+0x18>
 80064c8:	f7ff fdca 	bl	8006060 <__sinit>
 80064cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80064ce:	07d9      	lsls	r1, r3, #31
 80064d0:	d405      	bmi.n	80064de <_vfiprintf_r+0x2a>
 80064d2:	89ab      	ldrh	r3, [r5, #12]
 80064d4:	059a      	lsls	r2, r3, #22
 80064d6:	d402      	bmi.n	80064de <_vfiprintf_r+0x2a>
 80064d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80064da:	f7ff fec6 	bl	800626a <__retarget_lock_acquire_recursive>
 80064de:	89ab      	ldrh	r3, [r5, #12]
 80064e0:	071b      	lsls	r3, r3, #28
 80064e2:	d501      	bpl.n	80064e8 <_vfiprintf_r+0x34>
 80064e4:	692b      	ldr	r3, [r5, #16]
 80064e6:	b99b      	cbnz	r3, 8006510 <_vfiprintf_r+0x5c>
 80064e8:	4629      	mov	r1, r5
 80064ea:	4630      	mov	r0, r6
 80064ec:	f000 fb72 	bl	8006bd4 <__swsetup_r>
 80064f0:	b170      	cbz	r0, 8006510 <_vfiprintf_r+0x5c>
 80064f2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80064f4:	07dc      	lsls	r4, r3, #31
 80064f6:	d504      	bpl.n	8006502 <_vfiprintf_r+0x4e>
 80064f8:	f04f 30ff 	mov.w	r0, #4294967295
 80064fc:	b01d      	add	sp, #116	@ 0x74
 80064fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006502:	89ab      	ldrh	r3, [r5, #12]
 8006504:	0598      	lsls	r0, r3, #22
 8006506:	d4f7      	bmi.n	80064f8 <_vfiprintf_r+0x44>
 8006508:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800650a:	f7ff feaf 	bl	800626c <__retarget_lock_release_recursive>
 800650e:	e7f3      	b.n	80064f8 <_vfiprintf_r+0x44>
 8006510:	2300      	movs	r3, #0
 8006512:	9309      	str	r3, [sp, #36]	@ 0x24
 8006514:	2320      	movs	r3, #32
 8006516:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800651a:	f8cd 800c 	str.w	r8, [sp, #12]
 800651e:	2330      	movs	r3, #48	@ 0x30
 8006520:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80066d0 <_vfiprintf_r+0x21c>
 8006524:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006528:	f04f 0901 	mov.w	r9, #1
 800652c:	4623      	mov	r3, r4
 800652e:	469a      	mov	sl, r3
 8006530:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006534:	b10a      	cbz	r2, 800653a <_vfiprintf_r+0x86>
 8006536:	2a25      	cmp	r2, #37	@ 0x25
 8006538:	d1f9      	bne.n	800652e <_vfiprintf_r+0x7a>
 800653a:	ebba 0b04 	subs.w	fp, sl, r4
 800653e:	d00b      	beq.n	8006558 <_vfiprintf_r+0xa4>
 8006540:	465b      	mov	r3, fp
 8006542:	4622      	mov	r2, r4
 8006544:	4629      	mov	r1, r5
 8006546:	4630      	mov	r0, r6
 8006548:	f7ff ffa1 	bl	800648e <__sfputs_r>
 800654c:	3001      	adds	r0, #1
 800654e:	f000 80a7 	beq.w	80066a0 <_vfiprintf_r+0x1ec>
 8006552:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006554:	445a      	add	r2, fp
 8006556:	9209      	str	r2, [sp, #36]	@ 0x24
 8006558:	f89a 3000 	ldrb.w	r3, [sl]
 800655c:	2b00      	cmp	r3, #0
 800655e:	f000 809f 	beq.w	80066a0 <_vfiprintf_r+0x1ec>
 8006562:	2300      	movs	r3, #0
 8006564:	f04f 32ff 	mov.w	r2, #4294967295
 8006568:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800656c:	f10a 0a01 	add.w	sl, sl, #1
 8006570:	9304      	str	r3, [sp, #16]
 8006572:	9307      	str	r3, [sp, #28]
 8006574:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006578:	931a      	str	r3, [sp, #104]	@ 0x68
 800657a:	4654      	mov	r4, sl
 800657c:	2205      	movs	r2, #5
 800657e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006582:	4853      	ldr	r0, [pc, #332]	@ (80066d0 <_vfiprintf_r+0x21c>)
 8006584:	f7f9 fe24 	bl	80001d0 <memchr>
 8006588:	9a04      	ldr	r2, [sp, #16]
 800658a:	b9d8      	cbnz	r0, 80065c4 <_vfiprintf_r+0x110>
 800658c:	06d1      	lsls	r1, r2, #27
 800658e:	bf44      	itt	mi
 8006590:	2320      	movmi	r3, #32
 8006592:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006596:	0713      	lsls	r3, r2, #28
 8006598:	bf44      	itt	mi
 800659a:	232b      	movmi	r3, #43	@ 0x2b
 800659c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80065a0:	f89a 3000 	ldrb.w	r3, [sl]
 80065a4:	2b2a      	cmp	r3, #42	@ 0x2a
 80065a6:	d015      	beq.n	80065d4 <_vfiprintf_r+0x120>
 80065a8:	9a07      	ldr	r2, [sp, #28]
 80065aa:	4654      	mov	r4, sl
 80065ac:	2000      	movs	r0, #0
 80065ae:	f04f 0c0a 	mov.w	ip, #10
 80065b2:	4621      	mov	r1, r4
 80065b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80065b8:	3b30      	subs	r3, #48	@ 0x30
 80065ba:	2b09      	cmp	r3, #9
 80065bc:	d94b      	bls.n	8006656 <_vfiprintf_r+0x1a2>
 80065be:	b1b0      	cbz	r0, 80065ee <_vfiprintf_r+0x13a>
 80065c0:	9207      	str	r2, [sp, #28]
 80065c2:	e014      	b.n	80065ee <_vfiprintf_r+0x13a>
 80065c4:	eba0 0308 	sub.w	r3, r0, r8
 80065c8:	fa09 f303 	lsl.w	r3, r9, r3
 80065cc:	4313      	orrs	r3, r2
 80065ce:	9304      	str	r3, [sp, #16]
 80065d0:	46a2      	mov	sl, r4
 80065d2:	e7d2      	b.n	800657a <_vfiprintf_r+0xc6>
 80065d4:	9b03      	ldr	r3, [sp, #12]
 80065d6:	1d19      	adds	r1, r3, #4
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	9103      	str	r1, [sp, #12]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	bfbb      	ittet	lt
 80065e0:	425b      	neglt	r3, r3
 80065e2:	f042 0202 	orrlt.w	r2, r2, #2
 80065e6:	9307      	strge	r3, [sp, #28]
 80065e8:	9307      	strlt	r3, [sp, #28]
 80065ea:	bfb8      	it	lt
 80065ec:	9204      	strlt	r2, [sp, #16]
 80065ee:	7823      	ldrb	r3, [r4, #0]
 80065f0:	2b2e      	cmp	r3, #46	@ 0x2e
 80065f2:	d10a      	bne.n	800660a <_vfiprintf_r+0x156>
 80065f4:	7863      	ldrb	r3, [r4, #1]
 80065f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80065f8:	d132      	bne.n	8006660 <_vfiprintf_r+0x1ac>
 80065fa:	9b03      	ldr	r3, [sp, #12]
 80065fc:	1d1a      	adds	r2, r3, #4
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	9203      	str	r2, [sp, #12]
 8006602:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006606:	3402      	adds	r4, #2
 8006608:	9305      	str	r3, [sp, #20]
 800660a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80066e0 <_vfiprintf_r+0x22c>
 800660e:	7821      	ldrb	r1, [r4, #0]
 8006610:	2203      	movs	r2, #3
 8006612:	4650      	mov	r0, sl
 8006614:	f7f9 fddc 	bl	80001d0 <memchr>
 8006618:	b138      	cbz	r0, 800662a <_vfiprintf_r+0x176>
 800661a:	9b04      	ldr	r3, [sp, #16]
 800661c:	eba0 000a 	sub.w	r0, r0, sl
 8006620:	2240      	movs	r2, #64	@ 0x40
 8006622:	4082      	lsls	r2, r0
 8006624:	4313      	orrs	r3, r2
 8006626:	3401      	adds	r4, #1
 8006628:	9304      	str	r3, [sp, #16]
 800662a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800662e:	4829      	ldr	r0, [pc, #164]	@ (80066d4 <_vfiprintf_r+0x220>)
 8006630:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006634:	2206      	movs	r2, #6
 8006636:	f7f9 fdcb 	bl	80001d0 <memchr>
 800663a:	2800      	cmp	r0, #0
 800663c:	d03f      	beq.n	80066be <_vfiprintf_r+0x20a>
 800663e:	4b26      	ldr	r3, [pc, #152]	@ (80066d8 <_vfiprintf_r+0x224>)
 8006640:	bb1b      	cbnz	r3, 800668a <_vfiprintf_r+0x1d6>
 8006642:	9b03      	ldr	r3, [sp, #12]
 8006644:	3307      	adds	r3, #7
 8006646:	f023 0307 	bic.w	r3, r3, #7
 800664a:	3308      	adds	r3, #8
 800664c:	9303      	str	r3, [sp, #12]
 800664e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006650:	443b      	add	r3, r7
 8006652:	9309      	str	r3, [sp, #36]	@ 0x24
 8006654:	e76a      	b.n	800652c <_vfiprintf_r+0x78>
 8006656:	fb0c 3202 	mla	r2, ip, r2, r3
 800665a:	460c      	mov	r4, r1
 800665c:	2001      	movs	r0, #1
 800665e:	e7a8      	b.n	80065b2 <_vfiprintf_r+0xfe>
 8006660:	2300      	movs	r3, #0
 8006662:	3401      	adds	r4, #1
 8006664:	9305      	str	r3, [sp, #20]
 8006666:	4619      	mov	r1, r3
 8006668:	f04f 0c0a 	mov.w	ip, #10
 800666c:	4620      	mov	r0, r4
 800666e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006672:	3a30      	subs	r2, #48	@ 0x30
 8006674:	2a09      	cmp	r2, #9
 8006676:	d903      	bls.n	8006680 <_vfiprintf_r+0x1cc>
 8006678:	2b00      	cmp	r3, #0
 800667a:	d0c6      	beq.n	800660a <_vfiprintf_r+0x156>
 800667c:	9105      	str	r1, [sp, #20]
 800667e:	e7c4      	b.n	800660a <_vfiprintf_r+0x156>
 8006680:	fb0c 2101 	mla	r1, ip, r1, r2
 8006684:	4604      	mov	r4, r0
 8006686:	2301      	movs	r3, #1
 8006688:	e7f0      	b.n	800666c <_vfiprintf_r+0x1b8>
 800668a:	ab03      	add	r3, sp, #12
 800668c:	9300      	str	r3, [sp, #0]
 800668e:	462a      	mov	r2, r5
 8006690:	4b12      	ldr	r3, [pc, #72]	@ (80066dc <_vfiprintf_r+0x228>)
 8006692:	a904      	add	r1, sp, #16
 8006694:	4630      	mov	r0, r6
 8006696:	f3af 8000 	nop.w
 800669a:	4607      	mov	r7, r0
 800669c:	1c78      	adds	r0, r7, #1
 800669e:	d1d6      	bne.n	800664e <_vfiprintf_r+0x19a>
 80066a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80066a2:	07d9      	lsls	r1, r3, #31
 80066a4:	d405      	bmi.n	80066b2 <_vfiprintf_r+0x1fe>
 80066a6:	89ab      	ldrh	r3, [r5, #12]
 80066a8:	059a      	lsls	r2, r3, #22
 80066aa:	d402      	bmi.n	80066b2 <_vfiprintf_r+0x1fe>
 80066ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80066ae:	f7ff fddd 	bl	800626c <__retarget_lock_release_recursive>
 80066b2:	89ab      	ldrh	r3, [r5, #12]
 80066b4:	065b      	lsls	r3, r3, #25
 80066b6:	f53f af1f 	bmi.w	80064f8 <_vfiprintf_r+0x44>
 80066ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80066bc:	e71e      	b.n	80064fc <_vfiprintf_r+0x48>
 80066be:	ab03      	add	r3, sp, #12
 80066c0:	9300      	str	r3, [sp, #0]
 80066c2:	462a      	mov	r2, r5
 80066c4:	4b05      	ldr	r3, [pc, #20]	@ (80066dc <_vfiprintf_r+0x228>)
 80066c6:	a904      	add	r1, sp, #16
 80066c8:	4630      	mov	r0, r6
 80066ca:	f000 f879 	bl	80067c0 <_printf_i>
 80066ce:	e7e4      	b.n	800669a <_vfiprintf_r+0x1e6>
 80066d0:	08006e50 	.word	0x08006e50
 80066d4:	08006e5a 	.word	0x08006e5a
 80066d8:	00000000 	.word	0x00000000
 80066dc:	0800648f 	.word	0x0800648f
 80066e0:	08006e56 	.word	0x08006e56

080066e4 <_printf_common>:
 80066e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066e8:	4616      	mov	r6, r2
 80066ea:	4698      	mov	r8, r3
 80066ec:	688a      	ldr	r2, [r1, #8]
 80066ee:	690b      	ldr	r3, [r1, #16]
 80066f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80066f4:	4293      	cmp	r3, r2
 80066f6:	bfb8      	it	lt
 80066f8:	4613      	movlt	r3, r2
 80066fa:	6033      	str	r3, [r6, #0]
 80066fc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006700:	4607      	mov	r7, r0
 8006702:	460c      	mov	r4, r1
 8006704:	b10a      	cbz	r2, 800670a <_printf_common+0x26>
 8006706:	3301      	adds	r3, #1
 8006708:	6033      	str	r3, [r6, #0]
 800670a:	6823      	ldr	r3, [r4, #0]
 800670c:	0699      	lsls	r1, r3, #26
 800670e:	bf42      	ittt	mi
 8006710:	6833      	ldrmi	r3, [r6, #0]
 8006712:	3302      	addmi	r3, #2
 8006714:	6033      	strmi	r3, [r6, #0]
 8006716:	6825      	ldr	r5, [r4, #0]
 8006718:	f015 0506 	ands.w	r5, r5, #6
 800671c:	d106      	bne.n	800672c <_printf_common+0x48>
 800671e:	f104 0a19 	add.w	sl, r4, #25
 8006722:	68e3      	ldr	r3, [r4, #12]
 8006724:	6832      	ldr	r2, [r6, #0]
 8006726:	1a9b      	subs	r3, r3, r2
 8006728:	42ab      	cmp	r3, r5
 800672a:	dc26      	bgt.n	800677a <_printf_common+0x96>
 800672c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006730:	6822      	ldr	r2, [r4, #0]
 8006732:	3b00      	subs	r3, #0
 8006734:	bf18      	it	ne
 8006736:	2301      	movne	r3, #1
 8006738:	0692      	lsls	r2, r2, #26
 800673a:	d42b      	bmi.n	8006794 <_printf_common+0xb0>
 800673c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006740:	4641      	mov	r1, r8
 8006742:	4638      	mov	r0, r7
 8006744:	47c8      	blx	r9
 8006746:	3001      	adds	r0, #1
 8006748:	d01e      	beq.n	8006788 <_printf_common+0xa4>
 800674a:	6823      	ldr	r3, [r4, #0]
 800674c:	6922      	ldr	r2, [r4, #16]
 800674e:	f003 0306 	and.w	r3, r3, #6
 8006752:	2b04      	cmp	r3, #4
 8006754:	bf02      	ittt	eq
 8006756:	68e5      	ldreq	r5, [r4, #12]
 8006758:	6833      	ldreq	r3, [r6, #0]
 800675a:	1aed      	subeq	r5, r5, r3
 800675c:	68a3      	ldr	r3, [r4, #8]
 800675e:	bf0c      	ite	eq
 8006760:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006764:	2500      	movne	r5, #0
 8006766:	4293      	cmp	r3, r2
 8006768:	bfc4      	itt	gt
 800676a:	1a9b      	subgt	r3, r3, r2
 800676c:	18ed      	addgt	r5, r5, r3
 800676e:	2600      	movs	r6, #0
 8006770:	341a      	adds	r4, #26
 8006772:	42b5      	cmp	r5, r6
 8006774:	d11a      	bne.n	80067ac <_printf_common+0xc8>
 8006776:	2000      	movs	r0, #0
 8006778:	e008      	b.n	800678c <_printf_common+0xa8>
 800677a:	2301      	movs	r3, #1
 800677c:	4652      	mov	r2, sl
 800677e:	4641      	mov	r1, r8
 8006780:	4638      	mov	r0, r7
 8006782:	47c8      	blx	r9
 8006784:	3001      	adds	r0, #1
 8006786:	d103      	bne.n	8006790 <_printf_common+0xac>
 8006788:	f04f 30ff 	mov.w	r0, #4294967295
 800678c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006790:	3501      	adds	r5, #1
 8006792:	e7c6      	b.n	8006722 <_printf_common+0x3e>
 8006794:	18e1      	adds	r1, r4, r3
 8006796:	1c5a      	adds	r2, r3, #1
 8006798:	2030      	movs	r0, #48	@ 0x30
 800679a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800679e:	4422      	add	r2, r4
 80067a0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80067a4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80067a8:	3302      	adds	r3, #2
 80067aa:	e7c7      	b.n	800673c <_printf_common+0x58>
 80067ac:	2301      	movs	r3, #1
 80067ae:	4622      	mov	r2, r4
 80067b0:	4641      	mov	r1, r8
 80067b2:	4638      	mov	r0, r7
 80067b4:	47c8      	blx	r9
 80067b6:	3001      	adds	r0, #1
 80067b8:	d0e6      	beq.n	8006788 <_printf_common+0xa4>
 80067ba:	3601      	adds	r6, #1
 80067bc:	e7d9      	b.n	8006772 <_printf_common+0x8e>
	...

080067c0 <_printf_i>:
 80067c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067c4:	7e0f      	ldrb	r7, [r1, #24]
 80067c6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80067c8:	2f78      	cmp	r7, #120	@ 0x78
 80067ca:	4691      	mov	r9, r2
 80067cc:	4680      	mov	r8, r0
 80067ce:	460c      	mov	r4, r1
 80067d0:	469a      	mov	sl, r3
 80067d2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80067d6:	d807      	bhi.n	80067e8 <_printf_i+0x28>
 80067d8:	2f62      	cmp	r7, #98	@ 0x62
 80067da:	d80a      	bhi.n	80067f2 <_printf_i+0x32>
 80067dc:	2f00      	cmp	r7, #0
 80067de:	f000 80d2 	beq.w	8006986 <_printf_i+0x1c6>
 80067e2:	2f58      	cmp	r7, #88	@ 0x58
 80067e4:	f000 80b9 	beq.w	800695a <_printf_i+0x19a>
 80067e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80067ec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80067f0:	e03a      	b.n	8006868 <_printf_i+0xa8>
 80067f2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80067f6:	2b15      	cmp	r3, #21
 80067f8:	d8f6      	bhi.n	80067e8 <_printf_i+0x28>
 80067fa:	a101      	add	r1, pc, #4	@ (adr r1, 8006800 <_printf_i+0x40>)
 80067fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006800:	08006859 	.word	0x08006859
 8006804:	0800686d 	.word	0x0800686d
 8006808:	080067e9 	.word	0x080067e9
 800680c:	080067e9 	.word	0x080067e9
 8006810:	080067e9 	.word	0x080067e9
 8006814:	080067e9 	.word	0x080067e9
 8006818:	0800686d 	.word	0x0800686d
 800681c:	080067e9 	.word	0x080067e9
 8006820:	080067e9 	.word	0x080067e9
 8006824:	080067e9 	.word	0x080067e9
 8006828:	080067e9 	.word	0x080067e9
 800682c:	0800696d 	.word	0x0800696d
 8006830:	08006897 	.word	0x08006897
 8006834:	08006927 	.word	0x08006927
 8006838:	080067e9 	.word	0x080067e9
 800683c:	080067e9 	.word	0x080067e9
 8006840:	0800698f 	.word	0x0800698f
 8006844:	080067e9 	.word	0x080067e9
 8006848:	08006897 	.word	0x08006897
 800684c:	080067e9 	.word	0x080067e9
 8006850:	080067e9 	.word	0x080067e9
 8006854:	0800692f 	.word	0x0800692f
 8006858:	6833      	ldr	r3, [r6, #0]
 800685a:	1d1a      	adds	r2, r3, #4
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	6032      	str	r2, [r6, #0]
 8006860:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006864:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006868:	2301      	movs	r3, #1
 800686a:	e09d      	b.n	80069a8 <_printf_i+0x1e8>
 800686c:	6833      	ldr	r3, [r6, #0]
 800686e:	6820      	ldr	r0, [r4, #0]
 8006870:	1d19      	adds	r1, r3, #4
 8006872:	6031      	str	r1, [r6, #0]
 8006874:	0606      	lsls	r6, r0, #24
 8006876:	d501      	bpl.n	800687c <_printf_i+0xbc>
 8006878:	681d      	ldr	r5, [r3, #0]
 800687a:	e003      	b.n	8006884 <_printf_i+0xc4>
 800687c:	0645      	lsls	r5, r0, #25
 800687e:	d5fb      	bpl.n	8006878 <_printf_i+0xb8>
 8006880:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006884:	2d00      	cmp	r5, #0
 8006886:	da03      	bge.n	8006890 <_printf_i+0xd0>
 8006888:	232d      	movs	r3, #45	@ 0x2d
 800688a:	426d      	negs	r5, r5
 800688c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006890:	4859      	ldr	r0, [pc, #356]	@ (80069f8 <_printf_i+0x238>)
 8006892:	230a      	movs	r3, #10
 8006894:	e011      	b.n	80068ba <_printf_i+0xfa>
 8006896:	6821      	ldr	r1, [r4, #0]
 8006898:	6833      	ldr	r3, [r6, #0]
 800689a:	0608      	lsls	r0, r1, #24
 800689c:	f853 5b04 	ldr.w	r5, [r3], #4
 80068a0:	d402      	bmi.n	80068a8 <_printf_i+0xe8>
 80068a2:	0649      	lsls	r1, r1, #25
 80068a4:	bf48      	it	mi
 80068a6:	b2ad      	uxthmi	r5, r5
 80068a8:	2f6f      	cmp	r7, #111	@ 0x6f
 80068aa:	4853      	ldr	r0, [pc, #332]	@ (80069f8 <_printf_i+0x238>)
 80068ac:	6033      	str	r3, [r6, #0]
 80068ae:	bf14      	ite	ne
 80068b0:	230a      	movne	r3, #10
 80068b2:	2308      	moveq	r3, #8
 80068b4:	2100      	movs	r1, #0
 80068b6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80068ba:	6866      	ldr	r6, [r4, #4]
 80068bc:	60a6      	str	r6, [r4, #8]
 80068be:	2e00      	cmp	r6, #0
 80068c0:	bfa2      	ittt	ge
 80068c2:	6821      	ldrge	r1, [r4, #0]
 80068c4:	f021 0104 	bicge.w	r1, r1, #4
 80068c8:	6021      	strge	r1, [r4, #0]
 80068ca:	b90d      	cbnz	r5, 80068d0 <_printf_i+0x110>
 80068cc:	2e00      	cmp	r6, #0
 80068ce:	d04b      	beq.n	8006968 <_printf_i+0x1a8>
 80068d0:	4616      	mov	r6, r2
 80068d2:	fbb5 f1f3 	udiv	r1, r5, r3
 80068d6:	fb03 5711 	mls	r7, r3, r1, r5
 80068da:	5dc7      	ldrb	r7, [r0, r7]
 80068dc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80068e0:	462f      	mov	r7, r5
 80068e2:	42bb      	cmp	r3, r7
 80068e4:	460d      	mov	r5, r1
 80068e6:	d9f4      	bls.n	80068d2 <_printf_i+0x112>
 80068e8:	2b08      	cmp	r3, #8
 80068ea:	d10b      	bne.n	8006904 <_printf_i+0x144>
 80068ec:	6823      	ldr	r3, [r4, #0]
 80068ee:	07df      	lsls	r7, r3, #31
 80068f0:	d508      	bpl.n	8006904 <_printf_i+0x144>
 80068f2:	6923      	ldr	r3, [r4, #16]
 80068f4:	6861      	ldr	r1, [r4, #4]
 80068f6:	4299      	cmp	r1, r3
 80068f8:	bfde      	ittt	le
 80068fa:	2330      	movle	r3, #48	@ 0x30
 80068fc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006900:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006904:	1b92      	subs	r2, r2, r6
 8006906:	6122      	str	r2, [r4, #16]
 8006908:	f8cd a000 	str.w	sl, [sp]
 800690c:	464b      	mov	r3, r9
 800690e:	aa03      	add	r2, sp, #12
 8006910:	4621      	mov	r1, r4
 8006912:	4640      	mov	r0, r8
 8006914:	f7ff fee6 	bl	80066e4 <_printf_common>
 8006918:	3001      	adds	r0, #1
 800691a:	d14a      	bne.n	80069b2 <_printf_i+0x1f2>
 800691c:	f04f 30ff 	mov.w	r0, #4294967295
 8006920:	b004      	add	sp, #16
 8006922:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006926:	6823      	ldr	r3, [r4, #0]
 8006928:	f043 0320 	orr.w	r3, r3, #32
 800692c:	6023      	str	r3, [r4, #0]
 800692e:	4833      	ldr	r0, [pc, #204]	@ (80069fc <_printf_i+0x23c>)
 8006930:	2778      	movs	r7, #120	@ 0x78
 8006932:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006936:	6823      	ldr	r3, [r4, #0]
 8006938:	6831      	ldr	r1, [r6, #0]
 800693a:	061f      	lsls	r7, r3, #24
 800693c:	f851 5b04 	ldr.w	r5, [r1], #4
 8006940:	d402      	bmi.n	8006948 <_printf_i+0x188>
 8006942:	065f      	lsls	r7, r3, #25
 8006944:	bf48      	it	mi
 8006946:	b2ad      	uxthmi	r5, r5
 8006948:	6031      	str	r1, [r6, #0]
 800694a:	07d9      	lsls	r1, r3, #31
 800694c:	bf44      	itt	mi
 800694e:	f043 0320 	orrmi.w	r3, r3, #32
 8006952:	6023      	strmi	r3, [r4, #0]
 8006954:	b11d      	cbz	r5, 800695e <_printf_i+0x19e>
 8006956:	2310      	movs	r3, #16
 8006958:	e7ac      	b.n	80068b4 <_printf_i+0xf4>
 800695a:	4827      	ldr	r0, [pc, #156]	@ (80069f8 <_printf_i+0x238>)
 800695c:	e7e9      	b.n	8006932 <_printf_i+0x172>
 800695e:	6823      	ldr	r3, [r4, #0]
 8006960:	f023 0320 	bic.w	r3, r3, #32
 8006964:	6023      	str	r3, [r4, #0]
 8006966:	e7f6      	b.n	8006956 <_printf_i+0x196>
 8006968:	4616      	mov	r6, r2
 800696a:	e7bd      	b.n	80068e8 <_printf_i+0x128>
 800696c:	6833      	ldr	r3, [r6, #0]
 800696e:	6825      	ldr	r5, [r4, #0]
 8006970:	6961      	ldr	r1, [r4, #20]
 8006972:	1d18      	adds	r0, r3, #4
 8006974:	6030      	str	r0, [r6, #0]
 8006976:	062e      	lsls	r6, r5, #24
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	d501      	bpl.n	8006980 <_printf_i+0x1c0>
 800697c:	6019      	str	r1, [r3, #0]
 800697e:	e002      	b.n	8006986 <_printf_i+0x1c6>
 8006980:	0668      	lsls	r0, r5, #25
 8006982:	d5fb      	bpl.n	800697c <_printf_i+0x1bc>
 8006984:	8019      	strh	r1, [r3, #0]
 8006986:	2300      	movs	r3, #0
 8006988:	6123      	str	r3, [r4, #16]
 800698a:	4616      	mov	r6, r2
 800698c:	e7bc      	b.n	8006908 <_printf_i+0x148>
 800698e:	6833      	ldr	r3, [r6, #0]
 8006990:	1d1a      	adds	r2, r3, #4
 8006992:	6032      	str	r2, [r6, #0]
 8006994:	681e      	ldr	r6, [r3, #0]
 8006996:	6862      	ldr	r2, [r4, #4]
 8006998:	2100      	movs	r1, #0
 800699a:	4630      	mov	r0, r6
 800699c:	f7f9 fc18 	bl	80001d0 <memchr>
 80069a0:	b108      	cbz	r0, 80069a6 <_printf_i+0x1e6>
 80069a2:	1b80      	subs	r0, r0, r6
 80069a4:	6060      	str	r0, [r4, #4]
 80069a6:	6863      	ldr	r3, [r4, #4]
 80069a8:	6123      	str	r3, [r4, #16]
 80069aa:	2300      	movs	r3, #0
 80069ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80069b0:	e7aa      	b.n	8006908 <_printf_i+0x148>
 80069b2:	6923      	ldr	r3, [r4, #16]
 80069b4:	4632      	mov	r2, r6
 80069b6:	4649      	mov	r1, r9
 80069b8:	4640      	mov	r0, r8
 80069ba:	47d0      	blx	sl
 80069bc:	3001      	adds	r0, #1
 80069be:	d0ad      	beq.n	800691c <_printf_i+0x15c>
 80069c0:	6823      	ldr	r3, [r4, #0]
 80069c2:	079b      	lsls	r3, r3, #30
 80069c4:	d413      	bmi.n	80069ee <_printf_i+0x22e>
 80069c6:	68e0      	ldr	r0, [r4, #12]
 80069c8:	9b03      	ldr	r3, [sp, #12]
 80069ca:	4298      	cmp	r0, r3
 80069cc:	bfb8      	it	lt
 80069ce:	4618      	movlt	r0, r3
 80069d0:	e7a6      	b.n	8006920 <_printf_i+0x160>
 80069d2:	2301      	movs	r3, #1
 80069d4:	4632      	mov	r2, r6
 80069d6:	4649      	mov	r1, r9
 80069d8:	4640      	mov	r0, r8
 80069da:	47d0      	blx	sl
 80069dc:	3001      	adds	r0, #1
 80069de:	d09d      	beq.n	800691c <_printf_i+0x15c>
 80069e0:	3501      	adds	r5, #1
 80069e2:	68e3      	ldr	r3, [r4, #12]
 80069e4:	9903      	ldr	r1, [sp, #12]
 80069e6:	1a5b      	subs	r3, r3, r1
 80069e8:	42ab      	cmp	r3, r5
 80069ea:	dcf2      	bgt.n	80069d2 <_printf_i+0x212>
 80069ec:	e7eb      	b.n	80069c6 <_printf_i+0x206>
 80069ee:	2500      	movs	r5, #0
 80069f0:	f104 0619 	add.w	r6, r4, #25
 80069f4:	e7f5      	b.n	80069e2 <_printf_i+0x222>
 80069f6:	bf00      	nop
 80069f8:	08006e61 	.word	0x08006e61
 80069fc:	08006e72 	.word	0x08006e72

08006a00 <__sflush_r>:
 8006a00:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006a04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a08:	0716      	lsls	r6, r2, #28
 8006a0a:	4605      	mov	r5, r0
 8006a0c:	460c      	mov	r4, r1
 8006a0e:	d454      	bmi.n	8006aba <__sflush_r+0xba>
 8006a10:	684b      	ldr	r3, [r1, #4]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	dc02      	bgt.n	8006a1c <__sflush_r+0x1c>
 8006a16:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	dd48      	ble.n	8006aae <__sflush_r+0xae>
 8006a1c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006a1e:	2e00      	cmp	r6, #0
 8006a20:	d045      	beq.n	8006aae <__sflush_r+0xae>
 8006a22:	2300      	movs	r3, #0
 8006a24:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006a28:	682f      	ldr	r7, [r5, #0]
 8006a2a:	6a21      	ldr	r1, [r4, #32]
 8006a2c:	602b      	str	r3, [r5, #0]
 8006a2e:	d030      	beq.n	8006a92 <__sflush_r+0x92>
 8006a30:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006a32:	89a3      	ldrh	r3, [r4, #12]
 8006a34:	0759      	lsls	r1, r3, #29
 8006a36:	d505      	bpl.n	8006a44 <__sflush_r+0x44>
 8006a38:	6863      	ldr	r3, [r4, #4]
 8006a3a:	1ad2      	subs	r2, r2, r3
 8006a3c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006a3e:	b10b      	cbz	r3, 8006a44 <__sflush_r+0x44>
 8006a40:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006a42:	1ad2      	subs	r2, r2, r3
 8006a44:	2300      	movs	r3, #0
 8006a46:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006a48:	6a21      	ldr	r1, [r4, #32]
 8006a4a:	4628      	mov	r0, r5
 8006a4c:	47b0      	blx	r6
 8006a4e:	1c43      	adds	r3, r0, #1
 8006a50:	89a3      	ldrh	r3, [r4, #12]
 8006a52:	d106      	bne.n	8006a62 <__sflush_r+0x62>
 8006a54:	6829      	ldr	r1, [r5, #0]
 8006a56:	291d      	cmp	r1, #29
 8006a58:	d82b      	bhi.n	8006ab2 <__sflush_r+0xb2>
 8006a5a:	4a2a      	ldr	r2, [pc, #168]	@ (8006b04 <__sflush_r+0x104>)
 8006a5c:	410a      	asrs	r2, r1
 8006a5e:	07d6      	lsls	r6, r2, #31
 8006a60:	d427      	bmi.n	8006ab2 <__sflush_r+0xb2>
 8006a62:	2200      	movs	r2, #0
 8006a64:	6062      	str	r2, [r4, #4]
 8006a66:	04d9      	lsls	r1, r3, #19
 8006a68:	6922      	ldr	r2, [r4, #16]
 8006a6a:	6022      	str	r2, [r4, #0]
 8006a6c:	d504      	bpl.n	8006a78 <__sflush_r+0x78>
 8006a6e:	1c42      	adds	r2, r0, #1
 8006a70:	d101      	bne.n	8006a76 <__sflush_r+0x76>
 8006a72:	682b      	ldr	r3, [r5, #0]
 8006a74:	b903      	cbnz	r3, 8006a78 <__sflush_r+0x78>
 8006a76:	6560      	str	r0, [r4, #84]	@ 0x54
 8006a78:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006a7a:	602f      	str	r7, [r5, #0]
 8006a7c:	b1b9      	cbz	r1, 8006aae <__sflush_r+0xae>
 8006a7e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006a82:	4299      	cmp	r1, r3
 8006a84:	d002      	beq.n	8006a8c <__sflush_r+0x8c>
 8006a86:	4628      	mov	r0, r5
 8006a88:	f7ff fbf2 	bl	8006270 <_free_r>
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	6363      	str	r3, [r4, #52]	@ 0x34
 8006a90:	e00d      	b.n	8006aae <__sflush_r+0xae>
 8006a92:	2301      	movs	r3, #1
 8006a94:	4628      	mov	r0, r5
 8006a96:	47b0      	blx	r6
 8006a98:	4602      	mov	r2, r0
 8006a9a:	1c50      	adds	r0, r2, #1
 8006a9c:	d1c9      	bne.n	8006a32 <__sflush_r+0x32>
 8006a9e:	682b      	ldr	r3, [r5, #0]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d0c6      	beq.n	8006a32 <__sflush_r+0x32>
 8006aa4:	2b1d      	cmp	r3, #29
 8006aa6:	d001      	beq.n	8006aac <__sflush_r+0xac>
 8006aa8:	2b16      	cmp	r3, #22
 8006aaa:	d11e      	bne.n	8006aea <__sflush_r+0xea>
 8006aac:	602f      	str	r7, [r5, #0]
 8006aae:	2000      	movs	r0, #0
 8006ab0:	e022      	b.n	8006af8 <__sflush_r+0xf8>
 8006ab2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ab6:	b21b      	sxth	r3, r3
 8006ab8:	e01b      	b.n	8006af2 <__sflush_r+0xf2>
 8006aba:	690f      	ldr	r7, [r1, #16]
 8006abc:	2f00      	cmp	r7, #0
 8006abe:	d0f6      	beq.n	8006aae <__sflush_r+0xae>
 8006ac0:	0793      	lsls	r3, r2, #30
 8006ac2:	680e      	ldr	r6, [r1, #0]
 8006ac4:	bf08      	it	eq
 8006ac6:	694b      	ldreq	r3, [r1, #20]
 8006ac8:	600f      	str	r7, [r1, #0]
 8006aca:	bf18      	it	ne
 8006acc:	2300      	movne	r3, #0
 8006ace:	eba6 0807 	sub.w	r8, r6, r7
 8006ad2:	608b      	str	r3, [r1, #8]
 8006ad4:	f1b8 0f00 	cmp.w	r8, #0
 8006ad8:	dde9      	ble.n	8006aae <__sflush_r+0xae>
 8006ada:	6a21      	ldr	r1, [r4, #32]
 8006adc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006ade:	4643      	mov	r3, r8
 8006ae0:	463a      	mov	r2, r7
 8006ae2:	4628      	mov	r0, r5
 8006ae4:	47b0      	blx	r6
 8006ae6:	2800      	cmp	r0, #0
 8006ae8:	dc08      	bgt.n	8006afc <__sflush_r+0xfc>
 8006aea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006aee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006af2:	81a3      	strh	r3, [r4, #12]
 8006af4:	f04f 30ff 	mov.w	r0, #4294967295
 8006af8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006afc:	4407      	add	r7, r0
 8006afe:	eba8 0800 	sub.w	r8, r8, r0
 8006b02:	e7e7      	b.n	8006ad4 <__sflush_r+0xd4>
 8006b04:	dfbffffe 	.word	0xdfbffffe

08006b08 <_fflush_r>:
 8006b08:	b538      	push	{r3, r4, r5, lr}
 8006b0a:	690b      	ldr	r3, [r1, #16]
 8006b0c:	4605      	mov	r5, r0
 8006b0e:	460c      	mov	r4, r1
 8006b10:	b913      	cbnz	r3, 8006b18 <_fflush_r+0x10>
 8006b12:	2500      	movs	r5, #0
 8006b14:	4628      	mov	r0, r5
 8006b16:	bd38      	pop	{r3, r4, r5, pc}
 8006b18:	b118      	cbz	r0, 8006b22 <_fflush_r+0x1a>
 8006b1a:	6a03      	ldr	r3, [r0, #32]
 8006b1c:	b90b      	cbnz	r3, 8006b22 <_fflush_r+0x1a>
 8006b1e:	f7ff fa9f 	bl	8006060 <__sinit>
 8006b22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d0f3      	beq.n	8006b12 <_fflush_r+0xa>
 8006b2a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006b2c:	07d0      	lsls	r0, r2, #31
 8006b2e:	d404      	bmi.n	8006b3a <_fflush_r+0x32>
 8006b30:	0599      	lsls	r1, r3, #22
 8006b32:	d402      	bmi.n	8006b3a <_fflush_r+0x32>
 8006b34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006b36:	f7ff fb98 	bl	800626a <__retarget_lock_acquire_recursive>
 8006b3a:	4628      	mov	r0, r5
 8006b3c:	4621      	mov	r1, r4
 8006b3e:	f7ff ff5f 	bl	8006a00 <__sflush_r>
 8006b42:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006b44:	07da      	lsls	r2, r3, #31
 8006b46:	4605      	mov	r5, r0
 8006b48:	d4e4      	bmi.n	8006b14 <_fflush_r+0xc>
 8006b4a:	89a3      	ldrh	r3, [r4, #12]
 8006b4c:	059b      	lsls	r3, r3, #22
 8006b4e:	d4e1      	bmi.n	8006b14 <_fflush_r+0xc>
 8006b50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006b52:	f7ff fb8b 	bl	800626c <__retarget_lock_release_recursive>
 8006b56:	e7dd      	b.n	8006b14 <_fflush_r+0xc>

08006b58 <__swbuf_r>:
 8006b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b5a:	460e      	mov	r6, r1
 8006b5c:	4614      	mov	r4, r2
 8006b5e:	4605      	mov	r5, r0
 8006b60:	b118      	cbz	r0, 8006b6a <__swbuf_r+0x12>
 8006b62:	6a03      	ldr	r3, [r0, #32]
 8006b64:	b90b      	cbnz	r3, 8006b6a <__swbuf_r+0x12>
 8006b66:	f7ff fa7b 	bl	8006060 <__sinit>
 8006b6a:	69a3      	ldr	r3, [r4, #24]
 8006b6c:	60a3      	str	r3, [r4, #8]
 8006b6e:	89a3      	ldrh	r3, [r4, #12]
 8006b70:	071a      	lsls	r2, r3, #28
 8006b72:	d501      	bpl.n	8006b78 <__swbuf_r+0x20>
 8006b74:	6923      	ldr	r3, [r4, #16]
 8006b76:	b943      	cbnz	r3, 8006b8a <__swbuf_r+0x32>
 8006b78:	4621      	mov	r1, r4
 8006b7a:	4628      	mov	r0, r5
 8006b7c:	f000 f82a 	bl	8006bd4 <__swsetup_r>
 8006b80:	b118      	cbz	r0, 8006b8a <__swbuf_r+0x32>
 8006b82:	f04f 37ff 	mov.w	r7, #4294967295
 8006b86:	4638      	mov	r0, r7
 8006b88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b8a:	6823      	ldr	r3, [r4, #0]
 8006b8c:	6922      	ldr	r2, [r4, #16]
 8006b8e:	1a98      	subs	r0, r3, r2
 8006b90:	6963      	ldr	r3, [r4, #20]
 8006b92:	b2f6      	uxtb	r6, r6
 8006b94:	4283      	cmp	r3, r0
 8006b96:	4637      	mov	r7, r6
 8006b98:	dc05      	bgt.n	8006ba6 <__swbuf_r+0x4e>
 8006b9a:	4621      	mov	r1, r4
 8006b9c:	4628      	mov	r0, r5
 8006b9e:	f7ff ffb3 	bl	8006b08 <_fflush_r>
 8006ba2:	2800      	cmp	r0, #0
 8006ba4:	d1ed      	bne.n	8006b82 <__swbuf_r+0x2a>
 8006ba6:	68a3      	ldr	r3, [r4, #8]
 8006ba8:	3b01      	subs	r3, #1
 8006baa:	60a3      	str	r3, [r4, #8]
 8006bac:	6823      	ldr	r3, [r4, #0]
 8006bae:	1c5a      	adds	r2, r3, #1
 8006bb0:	6022      	str	r2, [r4, #0]
 8006bb2:	701e      	strb	r6, [r3, #0]
 8006bb4:	6962      	ldr	r2, [r4, #20]
 8006bb6:	1c43      	adds	r3, r0, #1
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d004      	beq.n	8006bc6 <__swbuf_r+0x6e>
 8006bbc:	89a3      	ldrh	r3, [r4, #12]
 8006bbe:	07db      	lsls	r3, r3, #31
 8006bc0:	d5e1      	bpl.n	8006b86 <__swbuf_r+0x2e>
 8006bc2:	2e0a      	cmp	r6, #10
 8006bc4:	d1df      	bne.n	8006b86 <__swbuf_r+0x2e>
 8006bc6:	4621      	mov	r1, r4
 8006bc8:	4628      	mov	r0, r5
 8006bca:	f7ff ff9d 	bl	8006b08 <_fflush_r>
 8006bce:	2800      	cmp	r0, #0
 8006bd0:	d0d9      	beq.n	8006b86 <__swbuf_r+0x2e>
 8006bd2:	e7d6      	b.n	8006b82 <__swbuf_r+0x2a>

08006bd4 <__swsetup_r>:
 8006bd4:	b538      	push	{r3, r4, r5, lr}
 8006bd6:	4b29      	ldr	r3, [pc, #164]	@ (8006c7c <__swsetup_r+0xa8>)
 8006bd8:	4605      	mov	r5, r0
 8006bda:	6818      	ldr	r0, [r3, #0]
 8006bdc:	460c      	mov	r4, r1
 8006bde:	b118      	cbz	r0, 8006be8 <__swsetup_r+0x14>
 8006be0:	6a03      	ldr	r3, [r0, #32]
 8006be2:	b90b      	cbnz	r3, 8006be8 <__swsetup_r+0x14>
 8006be4:	f7ff fa3c 	bl	8006060 <__sinit>
 8006be8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bec:	0719      	lsls	r1, r3, #28
 8006bee:	d422      	bmi.n	8006c36 <__swsetup_r+0x62>
 8006bf0:	06da      	lsls	r2, r3, #27
 8006bf2:	d407      	bmi.n	8006c04 <__swsetup_r+0x30>
 8006bf4:	2209      	movs	r2, #9
 8006bf6:	602a      	str	r2, [r5, #0]
 8006bf8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006bfc:	81a3      	strh	r3, [r4, #12]
 8006bfe:	f04f 30ff 	mov.w	r0, #4294967295
 8006c02:	e033      	b.n	8006c6c <__swsetup_r+0x98>
 8006c04:	0758      	lsls	r0, r3, #29
 8006c06:	d512      	bpl.n	8006c2e <__swsetup_r+0x5a>
 8006c08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006c0a:	b141      	cbz	r1, 8006c1e <__swsetup_r+0x4a>
 8006c0c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006c10:	4299      	cmp	r1, r3
 8006c12:	d002      	beq.n	8006c1a <__swsetup_r+0x46>
 8006c14:	4628      	mov	r0, r5
 8006c16:	f7ff fb2b 	bl	8006270 <_free_r>
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	6363      	str	r3, [r4, #52]	@ 0x34
 8006c1e:	89a3      	ldrh	r3, [r4, #12]
 8006c20:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006c24:	81a3      	strh	r3, [r4, #12]
 8006c26:	2300      	movs	r3, #0
 8006c28:	6063      	str	r3, [r4, #4]
 8006c2a:	6923      	ldr	r3, [r4, #16]
 8006c2c:	6023      	str	r3, [r4, #0]
 8006c2e:	89a3      	ldrh	r3, [r4, #12]
 8006c30:	f043 0308 	orr.w	r3, r3, #8
 8006c34:	81a3      	strh	r3, [r4, #12]
 8006c36:	6923      	ldr	r3, [r4, #16]
 8006c38:	b94b      	cbnz	r3, 8006c4e <__swsetup_r+0x7a>
 8006c3a:	89a3      	ldrh	r3, [r4, #12]
 8006c3c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006c40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c44:	d003      	beq.n	8006c4e <__swsetup_r+0x7a>
 8006c46:	4621      	mov	r1, r4
 8006c48:	4628      	mov	r0, r5
 8006c4a:	f000 f84f 	bl	8006cec <__smakebuf_r>
 8006c4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c52:	f013 0201 	ands.w	r2, r3, #1
 8006c56:	d00a      	beq.n	8006c6e <__swsetup_r+0x9a>
 8006c58:	2200      	movs	r2, #0
 8006c5a:	60a2      	str	r2, [r4, #8]
 8006c5c:	6962      	ldr	r2, [r4, #20]
 8006c5e:	4252      	negs	r2, r2
 8006c60:	61a2      	str	r2, [r4, #24]
 8006c62:	6922      	ldr	r2, [r4, #16]
 8006c64:	b942      	cbnz	r2, 8006c78 <__swsetup_r+0xa4>
 8006c66:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006c6a:	d1c5      	bne.n	8006bf8 <__swsetup_r+0x24>
 8006c6c:	bd38      	pop	{r3, r4, r5, pc}
 8006c6e:	0799      	lsls	r1, r3, #30
 8006c70:	bf58      	it	pl
 8006c72:	6962      	ldrpl	r2, [r4, #20]
 8006c74:	60a2      	str	r2, [r4, #8]
 8006c76:	e7f4      	b.n	8006c62 <__swsetup_r+0x8e>
 8006c78:	2000      	movs	r0, #0
 8006c7a:	e7f7      	b.n	8006c6c <__swsetup_r+0x98>
 8006c7c:	20000048 	.word	0x20000048

08006c80 <_sbrk_r>:
 8006c80:	b538      	push	{r3, r4, r5, lr}
 8006c82:	4d06      	ldr	r5, [pc, #24]	@ (8006c9c <_sbrk_r+0x1c>)
 8006c84:	2300      	movs	r3, #0
 8006c86:	4604      	mov	r4, r0
 8006c88:	4608      	mov	r0, r1
 8006c8a:	602b      	str	r3, [r5, #0]
 8006c8c:	f7fa f964 	bl	8000f58 <_sbrk>
 8006c90:	1c43      	adds	r3, r0, #1
 8006c92:	d102      	bne.n	8006c9a <_sbrk_r+0x1a>
 8006c94:	682b      	ldr	r3, [r5, #0]
 8006c96:	b103      	cbz	r3, 8006c9a <_sbrk_r+0x1a>
 8006c98:	6023      	str	r3, [r4, #0]
 8006c9a:	bd38      	pop	{r3, r4, r5, pc}
 8006c9c:	20000744 	.word	0x20000744

08006ca0 <__swhatbuf_r>:
 8006ca0:	b570      	push	{r4, r5, r6, lr}
 8006ca2:	460c      	mov	r4, r1
 8006ca4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ca8:	2900      	cmp	r1, #0
 8006caa:	b096      	sub	sp, #88	@ 0x58
 8006cac:	4615      	mov	r5, r2
 8006cae:	461e      	mov	r6, r3
 8006cb0:	da0d      	bge.n	8006cce <__swhatbuf_r+0x2e>
 8006cb2:	89a3      	ldrh	r3, [r4, #12]
 8006cb4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006cb8:	f04f 0100 	mov.w	r1, #0
 8006cbc:	bf14      	ite	ne
 8006cbe:	2340      	movne	r3, #64	@ 0x40
 8006cc0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006cc4:	2000      	movs	r0, #0
 8006cc6:	6031      	str	r1, [r6, #0]
 8006cc8:	602b      	str	r3, [r5, #0]
 8006cca:	b016      	add	sp, #88	@ 0x58
 8006ccc:	bd70      	pop	{r4, r5, r6, pc}
 8006cce:	466a      	mov	r2, sp
 8006cd0:	f000 f848 	bl	8006d64 <_fstat_r>
 8006cd4:	2800      	cmp	r0, #0
 8006cd6:	dbec      	blt.n	8006cb2 <__swhatbuf_r+0x12>
 8006cd8:	9901      	ldr	r1, [sp, #4]
 8006cda:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006cde:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006ce2:	4259      	negs	r1, r3
 8006ce4:	4159      	adcs	r1, r3
 8006ce6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006cea:	e7eb      	b.n	8006cc4 <__swhatbuf_r+0x24>

08006cec <__smakebuf_r>:
 8006cec:	898b      	ldrh	r3, [r1, #12]
 8006cee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006cf0:	079d      	lsls	r5, r3, #30
 8006cf2:	4606      	mov	r6, r0
 8006cf4:	460c      	mov	r4, r1
 8006cf6:	d507      	bpl.n	8006d08 <__smakebuf_r+0x1c>
 8006cf8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006cfc:	6023      	str	r3, [r4, #0]
 8006cfe:	6123      	str	r3, [r4, #16]
 8006d00:	2301      	movs	r3, #1
 8006d02:	6163      	str	r3, [r4, #20]
 8006d04:	b003      	add	sp, #12
 8006d06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d08:	ab01      	add	r3, sp, #4
 8006d0a:	466a      	mov	r2, sp
 8006d0c:	f7ff ffc8 	bl	8006ca0 <__swhatbuf_r>
 8006d10:	9f00      	ldr	r7, [sp, #0]
 8006d12:	4605      	mov	r5, r0
 8006d14:	4639      	mov	r1, r7
 8006d16:	4630      	mov	r0, r6
 8006d18:	f7ff fb16 	bl	8006348 <_malloc_r>
 8006d1c:	b948      	cbnz	r0, 8006d32 <__smakebuf_r+0x46>
 8006d1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d22:	059a      	lsls	r2, r3, #22
 8006d24:	d4ee      	bmi.n	8006d04 <__smakebuf_r+0x18>
 8006d26:	f023 0303 	bic.w	r3, r3, #3
 8006d2a:	f043 0302 	orr.w	r3, r3, #2
 8006d2e:	81a3      	strh	r3, [r4, #12]
 8006d30:	e7e2      	b.n	8006cf8 <__smakebuf_r+0xc>
 8006d32:	89a3      	ldrh	r3, [r4, #12]
 8006d34:	6020      	str	r0, [r4, #0]
 8006d36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d3a:	81a3      	strh	r3, [r4, #12]
 8006d3c:	9b01      	ldr	r3, [sp, #4]
 8006d3e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006d42:	b15b      	cbz	r3, 8006d5c <__smakebuf_r+0x70>
 8006d44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d48:	4630      	mov	r0, r6
 8006d4a:	f000 f81d 	bl	8006d88 <_isatty_r>
 8006d4e:	b128      	cbz	r0, 8006d5c <__smakebuf_r+0x70>
 8006d50:	89a3      	ldrh	r3, [r4, #12]
 8006d52:	f023 0303 	bic.w	r3, r3, #3
 8006d56:	f043 0301 	orr.w	r3, r3, #1
 8006d5a:	81a3      	strh	r3, [r4, #12]
 8006d5c:	89a3      	ldrh	r3, [r4, #12]
 8006d5e:	431d      	orrs	r5, r3
 8006d60:	81a5      	strh	r5, [r4, #12]
 8006d62:	e7cf      	b.n	8006d04 <__smakebuf_r+0x18>

08006d64 <_fstat_r>:
 8006d64:	b538      	push	{r3, r4, r5, lr}
 8006d66:	4d07      	ldr	r5, [pc, #28]	@ (8006d84 <_fstat_r+0x20>)
 8006d68:	2300      	movs	r3, #0
 8006d6a:	4604      	mov	r4, r0
 8006d6c:	4608      	mov	r0, r1
 8006d6e:	4611      	mov	r1, r2
 8006d70:	602b      	str	r3, [r5, #0]
 8006d72:	f7fa f8c9 	bl	8000f08 <_fstat>
 8006d76:	1c43      	adds	r3, r0, #1
 8006d78:	d102      	bne.n	8006d80 <_fstat_r+0x1c>
 8006d7a:	682b      	ldr	r3, [r5, #0]
 8006d7c:	b103      	cbz	r3, 8006d80 <_fstat_r+0x1c>
 8006d7e:	6023      	str	r3, [r4, #0]
 8006d80:	bd38      	pop	{r3, r4, r5, pc}
 8006d82:	bf00      	nop
 8006d84:	20000744 	.word	0x20000744

08006d88 <_isatty_r>:
 8006d88:	b538      	push	{r3, r4, r5, lr}
 8006d8a:	4d06      	ldr	r5, [pc, #24]	@ (8006da4 <_isatty_r+0x1c>)
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	4604      	mov	r4, r0
 8006d90:	4608      	mov	r0, r1
 8006d92:	602b      	str	r3, [r5, #0]
 8006d94:	f7fa f8c8 	bl	8000f28 <_isatty>
 8006d98:	1c43      	adds	r3, r0, #1
 8006d9a:	d102      	bne.n	8006da2 <_isatty_r+0x1a>
 8006d9c:	682b      	ldr	r3, [r5, #0]
 8006d9e:	b103      	cbz	r3, 8006da2 <_isatty_r+0x1a>
 8006da0:	6023      	str	r3, [r4, #0]
 8006da2:	bd38      	pop	{r3, r4, r5, pc}
 8006da4:	20000744 	.word	0x20000744

08006da8 <roundf>:
 8006da8:	ee10 0a10 	vmov	r0, s0
 8006dac:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8006db0:	3a7f      	subs	r2, #127	@ 0x7f
 8006db2:	2a16      	cmp	r2, #22
 8006db4:	dc15      	bgt.n	8006de2 <roundf+0x3a>
 8006db6:	2a00      	cmp	r2, #0
 8006db8:	da08      	bge.n	8006dcc <roundf+0x24>
 8006dba:	3201      	adds	r2, #1
 8006dbc:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8006dc0:	d101      	bne.n	8006dc6 <roundf+0x1e>
 8006dc2:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
 8006dc6:	ee00 3a10 	vmov	s0, r3
 8006dca:	4770      	bx	lr
 8006dcc:	4907      	ldr	r1, [pc, #28]	@ (8006dec <roundf+0x44>)
 8006dce:	4111      	asrs	r1, r2
 8006dd0:	4201      	tst	r1, r0
 8006dd2:	d0fa      	beq.n	8006dca <roundf+0x22>
 8006dd4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8006dd8:	4113      	asrs	r3, r2
 8006dda:	4403      	add	r3, r0
 8006ddc:	ea23 0301 	bic.w	r3, r3, r1
 8006de0:	e7f1      	b.n	8006dc6 <roundf+0x1e>
 8006de2:	2a80      	cmp	r2, #128	@ 0x80
 8006de4:	d1f1      	bne.n	8006dca <roundf+0x22>
 8006de6:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006dea:	4770      	bx	lr
 8006dec:	007fffff 	.word	0x007fffff

08006df0 <_init>:
 8006df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006df2:	bf00      	nop
 8006df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006df6:	bc08      	pop	{r3}
 8006df8:	469e      	mov	lr, r3
 8006dfa:	4770      	bx	lr

08006dfc <_fini>:
 8006dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dfe:	bf00      	nop
 8006e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e02:	bc08      	pop	{r3}
 8006e04:	469e      	mov	lr, r3
 8006e06:	4770      	bx	lr
